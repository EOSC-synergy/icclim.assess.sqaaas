{
    "meta": {
        "version": "3.2.1",
        "report_json_url": "https://raw.githubusercontent.com/eosc-synergy/icclim.assess.sqaaas/master/.report/assessment_output.json"
    },
    "repository": [
        {
            "url": "https://github.com/cerfacs-globc/icclim",
            "name": "cerfacs-globc/icclim",
            "tag": "master",
            "commit_id": "4f1c8d3870001948913ec10748ae6b05c6710db1",
            "is_main_repo": true,
            "avatar_url": "https://avatars.githubusercontent.com/u/11227557?v=4",
            "description": null,
            "languages": null,
            "topics": null,
            "stargazers_count": null,
            "watchers_count": null,
            "contributors_count": null,
            "forks_count": null,
            "badge_status": "no_badge"
        }
    ],
    "report": {
        "QC.Acc": {
            "valid": true,
            "subcriteria": {
                "QC.Acc01": {
                    "description": "Is the source code managed with a Version Control System?",
                    "requirement_level": "MUST",
                    "hint": "The source code shall be managed with Git and remain publicly available for this criterion to be successful. Please check <a href=\"https://git-scm.com/book/es/v2\" target=\"_blank\">Pro Git</a> docs about how to get started using Git tool. Guidelines provided by the most popular social coding platforms (<a href=\"https://docs.github.com/get-started\" target=\"_blank\">GitHub</a>, <a href=\"https://about.gitlab.com/get-started/\" target=\"_blank\">GitLab</a>) are also a good starting point",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "Source code uses Git for version control",
                            "plugin": {
                                "name": "report2sqaaas-plugin-boolean",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "git",
                                "lang": "scm",
                                "version": "2.34.1",
                                "docker": {
                                    "image": "bitnami/git:2.34.1",
                                    "reviewed": "2021-12-30"
                                },
                                "ci": {
                                    "name": "QC.Acc github.com/cerfacs-globc/icclim git",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "git rev-parse --is-inside-work-tree "
                                    ],
                                    "stdout_text": "true",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/34/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {}
                        }
                    ],
                    "valid": true
                }
            },
            "coverage": {
                "percentage": 100,
                "total_subcriteria": 1,
                "success_subcriteria": 1
            }
        },
        "QC.Doc": {
            "valid": false,
            "subcriteria": {
                "QC.Doc06.1": {
                    "description": "Is the software scope outlined in the code repository?",
                    "requirement_level": "MUST",
                    "hint": "A README file presents your software to the audience interested in your software project. Several online sites simplify the task of creating the README file, such as <a href=\"https://www.makeareadme.com/\" target=\"_blank\">Make a README</a> or <a href=\"https://readme.so/\" target=\"_blank\">readme.so</a> sites. Be sure to add it to the code repository's root path",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "A README file is present in the code repository",
                            "plugin": {
                                "name": "report2sqaaas-plugin-find_doc_files",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "find_doc_files.py",
                                "lang": "Contribution-enabling Files",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Doc/Dockerfile",
                                    "reviewed": "2022-01-26"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/cerfacs-globc/icclim find_doc_files.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "find_doc_files.py --file_type all"
                                    ],
                                    "stdout_text": "{\"README\": [{\"file_name\": \"README.rst\", \"size\": 3860}], \"CODE_OF_CONDUCT\": [], \"CONTRIBUTING\": [{\"file_name\": \".github/CONTRIBUTING.rst\", \"size\": 10720}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/43/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "README": [
                                    {
                                        "file_name": "README.rst",
                                        "size": 3860
                                    }
                                ],
                                "CODE_OF_CONDUCT": [],
                                "CONTRIBUTING": [
                                    {
                                        "file_name": ".github/CONTRIBUTING.rst",
                                        "size": 10720
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Doc06.3": {
                    "description": "Does the project establish a code of conduct for its participants?",
                    "requirement_level": "MUST",
                    "hint": "A CODE_OF_CONDUCT file sets the path for a constructive, respectful and positive atmosphere among all the contributors in your software project. Of course you can define your own, but in case you want to rely on external and widely-adopted code of conducts check out some of the most popular ones: <a href=\"https://contributor-covenant.org/\" target=\"_blank\">Contributor Covenant</a> or <a href=\"https://web.archive.org/web/20200330154000/http://citizencodeofconduct.org/\" target=\"_blank\">Citizen Code of Conduct</a>",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "A CODE_OF_CONDUCT file is not present in the code repository",
                            "plugin": {
                                "name": "report2sqaaas-plugin-find_doc_files",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "find_doc_files.py",
                                "lang": "Contribution-enabling Files",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Doc/Dockerfile",
                                    "reviewed": "2022-01-26"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/cerfacs-globc/icclim find_doc_files.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "find_doc_files.py --file_type all"
                                    ],
                                    "stdout_text": "{\"README\": [{\"file_name\": \"README.rst\", \"size\": 3860}], \"CODE_OF_CONDUCT\": [], \"CONTRIBUTING\": [{\"file_name\": \".github/CONTRIBUTING.rst\", \"size\": 10720}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/43/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "README": [
                                    {
                                        "file_name": "README.rst",
                                        "size": 3860
                                    }
                                ],
                                "CODE_OF_CONDUCT": [],
                                "CONTRIBUTING": [
                                    {
                                        "file_name": ".github/CONTRIBUTING.rst",
                                        "size": 10720
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": true
                },
                "QC.Doc06.2": {
                    "description": "Is there a clear path or guidelines on how to contribute to the code?",
                    "requirement_level": "MUST",
                    "hint": "A CONTRIBUTING file shall be present in the root path of the code repository describing the expected workflow to follow when adding contributions. Please check <a href=\"https://mozillascience.github.io/working-open-workshop/contributing/\" target=\"_blank\">Mozilla's guidelines</a> and <a href=\"https://github.com/github/docs/blob/main/CONTRIBUTING.md\" target=\"_blank\">GitHub's CONTRIBUTING.md example</a> to get inspired on how to write a good CONTRIBUTING file",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "A CONTRIBUTING file is present in the code repository",
                            "plugin": {
                                "name": "report2sqaaas-plugin-find_doc_files",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "find_doc_files.py",
                                "lang": "Contribution-enabling Files",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Doc/Dockerfile",
                                    "reviewed": "2022-01-26"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/cerfacs-globc/icclim find_doc_files.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "find_doc_files.py --file_type all"
                                    ],
                                    "stdout_text": "{\"README\": [{\"file_name\": \"README.rst\", \"size\": 3860}], \"CODE_OF_CONDUCT\": [], \"CONTRIBUTING\": [{\"file_name\": \".github/CONTRIBUTING.rst\", \"size\": 10720}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/43/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "README": [
                                    {
                                        "file_name": "README.rst",
                                        "size": 3860
                                    }
                                ],
                                "CODE_OF_CONDUCT": [],
                                "CONTRIBUTING": [
                                    {
                                        "file_name": ".github/CONTRIBUTING.rst",
                                        "size": 10720
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Doc01.1": {
                    "description": "Are docs managed in the same repository as code?",
                    "requirement_level": "MAY",
                    "hint": "This subcriterion will succeed if the documentation files exist on the same repository as the source code, e.g. under a <code>docs/</code> folder",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "Documentation resides in the same repository as code",
                            "plugin": {
                                "name": "report2sqaaas-plugin-boolean",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "git",
                                "lang": null,
                                "version": null,
                                "docker": null,
                                "ci": {
                                    "name": "QC.Doc github.com/cerfacs-globc/icclim git",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "git rev-parse --is-inside-work-tree "
                                    ],
                                    "stdout_text": "true",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/52/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {}
                        }
                    ],
                    "valid": true
                },
                "QC.Doc02.X": {
                    "description": "Are docs following a style for the Markdown markup language?",
                    "requirement_level": "MAY",
                    "hint": "When using a docs-as-code approach, the style of the markup language is being checked. SQAaaS relies on <a href=\"https://github.com/markdownlint/markdownlint/\" target=\"_blank\">markdownlint</a> for Markdown files and <a href=\"https://github.com/twolfson/restructuredtext-lint/\" target=\"_blank\">restructuredtext-lint</a> for reStructuredText",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "Docs are compliant with markdownlint standard",
                            "plugin": {
                                "name": "report2sqaaas-plugin-markdownlint",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "markdownlint",
                                "lang": "Markdown",
                                "version": "0.11.0",
                                "docker": {
                                    "dockerfile": "QC.Doc/markdownlint/Dockerfile",
                                    "reviewed": "1970-01-01"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/cerfacs-globc/icclim markdownlint",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "mdl --json  ."
                                    ],
                                    "stdout_text": "[]",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/61/log?consoleFull"
                                },
                                "level": "RECOMMENDED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {}
                        },
                        {
                            "valid": false,
                            "message": "Docs are not fully compliant with restructuredtext-lint standard",
                            "plugin": {
                                "name": "report2sqaaas-plugin-markdownlint",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "restructuredtext-lint",
                                "lang": "reStructuredText",
                                "version": "1.3.2",
                                "docker": {
                                    "dockerfile": "QC.Doc/restructuredtext-lint/Dockerfile",
                                    "reviewed": "2022-01-18"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/cerfacs-globc/icclim restructuredtext-lint",
                                    "status": "FAILED",
                                    "stdout_command": [
                                        "rst-lint --level warning --format json ."
                                    ],
                                    "stdout_text": "[{\"line\": 27, \"source\": \"./README.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 8, \"source\": \"./.github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 9, \"source\": \"./.github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 10, \"source\": \"./.github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 11, \"source\": \"./.github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 12, \"source\": \"./.github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 13, \"source\": \"./.github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 89, \"source\": \"./.github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 31, \"source\": \"./doc/source/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :maxdepth: 2\\n   :caption: Contents:\\n\\n   tutorials/index\\n   how_to/index\\n   references/index\\n   explanation/index\\n   dev/index\\n\"}, {\"line\": 51, \"source\": \"./doc/source/dev/release_process.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 57, \"source\": \"./doc/source/dev/release_process.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 10, \"source\": \"./doc/source/dev/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :maxdepth: 2\\n   :caption: Contents:\\n\\n   release_process\\n   ci\\n   contributing\"}, {\"line\": 8, \"source\": \".github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 9, \"source\": \".github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 10, \"source\": \".github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 11, \"source\": \".github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 12, \"source\": \".github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 13, \"source\": \".github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 89, \"source\": \".github/CONTRIBUTING.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 52, \"source\": \"./doc/source/references/output_metadata.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 72, \"source\": \"./doc/source/references/output_metadata.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 93, \"source\": \"./doc/source/references/output_metadata.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 109, \"source\": \"./doc/source/references/output_metadata.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 141, \"source\": \"./doc/source/references/output_metadata.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 168, \"source\": \"./doc/source/references/output_metadata.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 5, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"func\\\".\", \"full_message\": \"Unknown interpreted text role \\\"func\\\".\"}, {\"line\": 5, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 13, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 21, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autofunction\\\".\", \"full_message\": \"Unknown directive type \\\"autofunction\\\".\\n\\n.. autofunction:: icclim.index(**kwargs)\\n   :noindex:\\n\"}, {\"line\": 26, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 45, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:func\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:func\\\".\"}, {\"line\": 45, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:class\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:class\\\".\"}, {\"line\": 51, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 58, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 65, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:class\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:class\\\".\"}, {\"line\": 74, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 81, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 144, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 161, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 171, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 205, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 211, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 225, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 259, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 259, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 259, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 265, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 265, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 297, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 369, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 397, \"source\": \"./doc/source/references/icclim_index_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 12, \"source\": \"./doc/source/references/custom_indices.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 121, \"source\": \"./doc/source/references/custom_indices.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 170, \"source\": \"./doc/source/references/custom_indices.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"func\\\".\", \"full_message\": \"Unknown interpreted text role \\\"func\\\".\"}, {\"line\": 177, \"source\": \"./doc/source/references/custom_indices.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 14, \"source\": \"./doc/source/references/ecad_functions_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 37, \"source\": \"./doc/source/references/ecad_functions_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 7, \"source\": \"./doc/source/references/generic_functions_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:class\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:class\\\".\"}, {\"line\": 15, \"source\": \"./doc/source/references/generic_functions_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 26, \"source\": \"./doc/source/references/generic_functions_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 31, \"source\": \"./doc/source/references/generic_functions_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 11, \"source\": \"./doc/source/references/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 12, \"source\": \"./doc/source/references/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 14, \"source\": \"./doc/source/references/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :maxdepth: 3\\n   :caption: References\\n\\n   icclim_index_api\\n   ecad_functions_api\\n   dcsc_functions_api\\n   generic_functions_api\\n   custom_indices\\n   output_metadata\\n   release_notes\\n   api/index\"}, {\"line\": 13, \"source\": \"./doc/source/references/dcsc_functions_api.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 27, \"source\": \"./doc/source/references/dcsc_functions_api.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n\\n   /references/api/icclim/index\\n\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Python library for climate indices calculation.\\n\\n\\n\"}, {\"line\": 14, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 3\\n\\n   _core/index.rst\\n   dcsc/index.rst\\n   ecad/index.rst\\n   generic/index.rst\\n   threshold/index.rst\\n\\n\"}, {\"line\": 27, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   exception/index.rst\\n   main/index.rst\\n   rechunk/index.rst\\n\\n\"}, {\"line\": 39, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: index(in_files: icclim._core.model.icclim_types.InFileLike, index_name: str | icclim._core.generic.indicator.GenericIndicator | icclim._core.model.standard_index.StandardIndex | None = None, var_name: str | collections.abc.Sequence[str] | None = None, slice_mode: icclim._core.model.icclim_types.FrequencyLike | icclim._core.frequency.Frequency = 'year', time_range: collections.abc.Sequence[datetime.datetime | str] | None = None, out_file: str | None = None, threshold: str | icclim._core.model.threshold.Threshold | collections.abc.Sequence[str | icclim._core.model.threshold.Threshold] | None = None, callback: Callable[[int], None] = log.callback, callback_percentage_start_value: int = 0, callback_percentage_total: int = 100, base_period_time_range: collections.abc.Sequence[datetime.datetime] | collections.abc.Sequence[str] | None = None, doy_window_width: int = 5, only_leap_years: bool = False, ignore_Feb29th: bool = False, interpolation: str | icclim._core.model.quantile_interpolation.QuantileInterpolation = 'median_unbiased', out_unit: str | None = None, netcdf_version: str | icclim._core.model.netcdf_version.NetcdfVersion = 'NETCDF4', user_index: icclim._core.legacy.user_index.model.UserIndexDict | None = None, save_thresholds: bool = False, logs_verbosity: icclim.logger.Verbosity | str = 'LOW', date_event: bool = False, min_spell_length: int | None = 6, rolling_window_width: int | None = 5, sampling_method: icclim._core.model.icclim_types.SamplingMethodLike = RESAMPLE_METHOD, *, window_width: int | None = None, save_percentile: bool | None = None, indice_name: str | None = None, user_indice: icclim._core.legacy.user_index.model.UserIndexDict | None = None, transfer_limit_Mbytes: float | None = None) -> xarray.core.dataset.Dataset\\n\\n   Compute climate index.\\n\\n   This is the main entry point for icclim.\\n\\n   :param in_files: Absolute path(s) to NetCDF dataset(s), including OPeNDAP URLs,\\n                    or path to zarr store, or xarray.Dataset or xarray.DataArray.\\n   :type in_files: str | list[str] | Dataset | DataArray | InputDictionary\\n   :param index_name: Climate index name.\\n                      For ECA&D index, case insensitive name used to lookup the index.\\n                      For user index, it's the name of the output variable.\\n   :type index_name: str | StandardIndex\\n   :param var_name: ``optional`` Target variable name to process corresponding to ``in_files``.\\n                    If None (default) on ECA&D index, the variable is guessed based on the\\n                    climate index wanted.\\n                    Mandatory for a user index.\\n   :type var_name: str | list[str] | None\\n   :param slice_mode: Type of temporal aggregation:\\n                      The possibles values are ``{\\\"year\\\", \\\"month\\\", \\\"DJF\\\", \\\"MAM\\\", \\\"JJA\\\", \\\"SON\\\",\\n                      \\\"ONDJFM\\\" or \\\"AMJJAS\\\", (\\\"season\\\", [1,2,3]), (\\\"month\\\", [1,2,3,])}``\\n                      (where season and month lists can be customized) or any valid pandas\\n                      frequency.\\n                      A season can also be defined between two exact dates:\\n                      ``(\\\"season\\\", (\\\"19 july\\\", \\\"14 august\\\"))``.\\n                      Default is \\\"year\\\".\\n                      See :ref:`slice_mode` for details.\\n   :type slice_mode: FrequencyLike | Frequency\\n   :param time_range: ``optional`` Temporal range: upper and lower bounds for temporal subsetting.\\n                      If ``None``, whole period of input files will be processed.\\n                      The dates can either be given as instance of datetime.datetime or as string\\n                      values. For strings, many format are accepted.\\n                      Default is ``None``.\\n   :type time_range: list[datetime.datetime ] | list[str]  | tuple[str, str] | None\\n   :param out_file: Output NetCDF file name (default: \\\"icclim_out.nc\\\" in the current directory).\\n                    Default is \\\"icclim_out.nc\\\".\\n                    If the input ``in_files`` is a ``Dataset``, ``out_file`` field is ignored.\\n                    Use the function returned value instead to retrieve the computed value.\\n                    If ``out_file`` already exists, icclim will overwrite it!\\n   :type out_file: str | None\\n   :param threshold: ``optional`` User defined threshold for certain indices.\\n                     Default depend on the index, see their individual definition.\\n                     When a list of threshold is provided, the index will be computed for each\\n                     thresholds.\\n   :type threshold: float | list[float] | None\\n   :param transfer_limit_Mbytes: Deprecated, does not have any effect.\\n   :type transfer_limit_Mbytes: float\\n   :param callback: ``optional`` Progress bar printing. If ``None``, progress bar will not be\\n                    printed.\\n   :type callback: Callable[[int], None]\\n   :param callback_percentage_start_value: ``optional`` Initial value of percentage of the progress bar (default: 0).\\n   :type callback_percentage_start_value: int\\n   :param callback_percentage_total: ``optional`` Total percentage value (default: 100).\\n   :type callback_percentage_total: int\\n   :param base_period_time_range: ``optional`` Temporal range of the reference period.\\n                                  The dates can either be given as instance of datetime.datetime or as string\\n                                  values.\\n                                  It is used either:\\n                                  #. to compute percentiles if threshold is filled.\\n                                  When missing, the studied period is used to compute percentiles.\\n                                  The study period is either the dataset filtered by `time_range` or the whole\\n                                  dataset if `time_range` is missing.\\n                                  For day of year percentiles (doy_per), on extreme percentiles the\\n                                  overlapping period between `base_period_time_range` and the study period is\\n                                  bootstrapped.\\n                                  #. to compute a reference period for indices such as difference_of_mean\\n                                  (a.k.a anomaly) if a single variable is given in input.\\n   :type base_period_time_range: list[datetime.datetime ] | list[str] | tuple[str, str] | None\\n   :param doy_window_width: ``optional`` Window width used to aggreagte day of year values when computing\\n                            day of year percentiles (doy_per)\\n                            Default: 5 (5 days).\\n   :type doy_window_width: int\\n   :param min_spell_length: ``optional`` Minimum spell duration to be taken into account when computing\\n                            the sum_of_spell_lengths.\\n   :type min_spell_length: int\\n   :param rolling_window_width: ``optional`` Window width of the rolling window for indicators such as\\n                                `{max_of_rolling_sum, max_of_rolling_average, min_of_rolling_sum, min_of_rolling_average}`\\n   :type rolling_window_width: int\\n   :param only_leap_years: ``optional`` Option for February 29th (default: False).\\n   :type only_leap_years: bool\\n   :param ignore_Feb29th: ``optional`` Ignoring or not February 29th (default: False).\\n   :type ignore_Feb29th: bool\\n   :param interpolation: ``optional`` Interpolation method to compute percentile values:\\n                         ``{\\\"linear\\\", \\\"median_unbiased\\\"}``\\n                         Default is \\\"median_unbiased\\\", a.k.a type 8 or method 8.\\n                         Ignored for non percentile based indices.\\n   :type interpolation: str | QuantileInterpolation | None\\n   :param out_unit: ``optional`` Output unit for certain indices: \\\"days\\\" or \\\"%\\\"\\n                    (default: \\\"days\\\").\\n   :type out_unit: str | None\\n   :param netcdf_version: ``optional`` NetCDF version to create (default: \\\"NETCDF3_CLASSIC\\\").\\n   :type netcdf_version: str | NetcdfVersion\\n   :param user_index: ``optional`` A dictionary with parameters for user defined index.\\n                      See :ref:`Custom indices`.\\n                      Ignored for ECA&D indices.\\n   :type user_index: UserIndexDict\\n   :param save_thresholds: ``optional`` True if the thresholds should be saved within the resulting\\n                           netcdf file (default: False).\\n   :type save_thresholds: bool\\n   :param date_event: When True the date of the event (such as when a maximum is reached) will be\\n                      stored in coordinates variables.\\n                      **warning** This option may significantly slow down computation.\\n   :type date_event: bool\\n   :param logs_verbosity: ``optional`` Configure how verbose icclim is.\\n                          Possible values: ``{\\\"LOW\\\", \\\"HIGH\\\", \\\"SILENT\\\"}`` (default: \\\"LOW\\\")\\n   :type logs_verbosity: str | Verbosity\\n   :param sampling_method: Choose whether the output sampling configured in `slice_mode` is a\\n                           `groupby` operation or a `resample` operation (as per xarray definitions).\\n                           Possible values:\\n                           ``{\\\"groupby\\\", \\\"resample\\\", \\\"groupby_ref_and_resample_study\\\"}``\\n                           (default: \\\"resample\\\")\\n                           `groupby_ref_and_resample_study` may only be used when computing the\\n                           `difference_of_means` (a.k.a the anomaly).\\n   :type sampling_method: str\\n   :param indice_name: DEPRECATED, use index_name instead.\\n   :type indice_name: str | None\\n   :param user_indice: DEPRECATED, use user_index instead.\\n   :type user_indice: dict | None\\n   :param window_width: DEPRECATED, use doy_window_width, min_spell_length or rolling_window_width\\n                        instead.\\n   :type window_width: int\\n   :param save_percentile: DEPRECATED, use save_thresholds instead.\\n   :type save_percentile: bool\\n\\n\"}, {\"line\": 164, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: indice(*args, **kwargs) -> xarray.core.dataset.Dataset\\n\\n   Proxy for `icclim.index` function.\\n\\n   Deprecated: to be deleted in a future release.\\n\\n\"}, {\"line\": 171, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: indices(index_group: collections.abc.Sequence[str] | str | icclim._core.model.index_group.IndexGroup | icclim._core.model.standard_index.StandardIndex, *, ignore_error: bool = False, **kwargs) -> xarray.core.dataset.Dataset\\n\\n   Compute multiple indices at the same time.\\n\\n   The input dataset(s) must include all the necessary variables.\\n   It can only be used with keyword arguments (kwargs).\\n\\n   :param index_group: Either the name of an IndexGroup or an instance of IndexGroup or a list\\n                       of index short names or the name(s) of standard variable(s) (such as 'tasmax').\\n                       The value \\\"all\\\" can also be used to compute every indices.\\n                       Note that the input given by ``in_files`` must include all the necessary\\n                       variables to compute the indices of this group.\\n   :type index_group: \\\"all\\\" | str | IndexGroup | list[str]\\n   :param ignore_error: When True, ignore indices that fails to compute. This is option is particularly\\n                        useful when used with `index_group='all'` to compute everything that can be\\n                        computed given the input.\\n   :type ignore_error: bool\\n   :param kwargs: ``icclim.index`` keyword arguments.\\n   :type kwargs: Dict\\n\\n   :returns: A Dataset with one data variable per index.\\n   :rtype: xr.Dataset\\n\\n   .. rubric:: Notes\\n\\n   If ``output_file`` is part of kwargs, the result is written in a single netCDF\\n   file, which will contain all the index results of this group.\\n\\n\"}, {\"line\": 200, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: create_optimized_zarr_store(in_files: str | list[str] | xarray.core.dataset.Dataset | xarray.core.dataarray.DataArray, var_names: str | list[str], target_zarr_store_name: str = 'icclim-target-store.zarr', keep_target_store: bool = False, chunking: dict[str, int] | None = None, filesystem: str | fsspec.AbstractFileSystem = LOCAL_FILE_SYSTEM) -> collections.abc.Generator[xarray.core.dataset.Dataset]\\n\\n   Context manager to create an zarr store given an input netcdf or xarray structure.\\n\\n   -- EXPERIMENTAL FEATURE --\\n   API may changes without deprecation warning!\\n\\n   The execution may take a long time.\\n\\n   The result is rechunked according to `chunking` schema provided.\\n   By default, when leaving `chunking` to None, the resulting zarr store is NOT chunked\\n   on time dimension.\\n   This kind of chunking will significantly speed up the bootstrapping of\\n   percentiles for indices such as Tx90p, Tx10p, TN90p...\\n   But such chunking will most likely result in suboptimal performances for other\\n   indices.\\n   Actually, when computing indices where no bootstrap is needed,\\n   you should first try the computation without using `create_optimized_zarr_store`.\\n   If there are performance issues, you may want to use `create_optimized_zarr_store`\\n   with a dictionary of a better chunking schema than your current storage chunking.\\n\\n   By default, `keep_target_store` being False, the resulting zarr store is destroyed\\n   when the context manager is exit.\\n   To keep the zarr store for futur uses set `keep_target_store` to True.\\n\\n   The output is the resulting zarr store as a xarray Dataset.\\n\\n   :param in_files: Absolute path(s) to NetCDF dataset(s), including OPeNDAP URLs,\\n                    or path to zarr store, or xarray.Dataset or xarray.DataArray.\\n   :type in_files: str | list[str] | Dataset | DataArray\\n   :param var_names: List of data variable to include in the target zarr store.\\n                     All other data variable are dropped.\\n                     The coordinate variable are untouched and are part of the target zarr store.\\n   :type var_names: str | list[str]\\n   :param target_zarr_store_name: Name of the target zarr store.\\n                                  Used to avoid overriding an existing zarr store.\\n   :type target_zarr_store_name: str\\n   :param chunking: The target chunking schema.\\n   :type chunking: dict\\n   :param keep_target_store: Set to True to keep the target zarr store after the execution of the context\\n                             manager.\\n                             Set to False to remove the target zarr store once execution is finished.\\n                             Default is False.\\n   :type keep_target_store: bool\\n   :param filesystem: A fsspec filesystem where the zarr store will be created.\\n\\n   :rtype: returns Dataset opened on the newly created target zarr store.\\n\\n   .. rubric:: Examples\\n\\n   .. code-block:: python\\n\\n       import icclim\\n\\n       with icclim.create_optimized_zarr_store(\\n           in_files=\\\"tasmax.nc\\\",\\n           var_names=\\\"tasmax\\\",\\n           target_zarr_store_name=\\\"tasmax-store.zarr\\\",\\n           chunking={\\\"time\\\": 42, \\\"lat\\\": 42, \\\"lon\\\": 42},\\n       ) as tasmax_opti:\\n           su_out = icclim.index(in_files=tasmax_opti, index_name=\\\"su\\\")\\n\\n\"}, {\"line\": 263, \"source\": \"./doc/source/references/api/icclim/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: build_threshold(query: str | None = None, *, operator: icclim._core.model.operator.Operator | str | None = None, value: icclim._core.model.threshold.ThresholdValueType = None, unit: str | None = None, threshold_min_value: str | float | pint.Quantity | None = None, thresholds: collections.abc.Sequence[icclim._core.model.threshold.Threshold | str] | None = None, logical_link: str | icclim._core.model.logical_link.LogicalLink | None = None, offset: str | float | pint.Quantity | None = None, **kwargs) -> icclim._core.generic.threshold.bounded.BoundedThreshold | icclim._core.generic.threshold.percentile.PercentileThreshold | icclim._core.generic.threshold.basic.BasicThreshold\\n\\n   Build a `Threshold`.\\n\\n   This function is a factory for `Threshold` instances.\\n   It can build a `BasicThreshold`, a `PercentileThreshold` or a `BoundedThreshold`.\\n   See :ref:`generic_indices_recipes` for how to combine thresholds with generic\\n   indices.\\n\\n   :param query: string query describing a threshold.\\n                 It must include: an operator, a threshold value and optionally a unit\\n                 such as \\\"> 10 degC\\\".\\n                 It acts as a shorthand for ``operator``, ``value`` and ``unit`` parameters for\\n                 simple threshold.\\n                 Don't use ``query`` when value is a DataArray, a Dataset or a path to a\\n                 netcdf/zarr storage, instead use ``operator``, ``value`` and ``unit``.\\n                 ``query`` supersede `operator`, `value` and `unit` parameters.\\n   :type query: str | None = None\\n   :param operator: keyword argument only.\\n                    The operator either as an instance of Operator or as a compatible string.\\n                    See :py:class:`OperatorRegistry` for the list of all operators.\\n                    When ``query`` is None and operator is None, the default ``Operator.REACH`` is\\n                    used.\\n   :type operator: Operator | str = None\\n   :param value: keyword argument only.\\n                 The threshold value(s), default to None.\\n                 It can be:\\n                 * a simple scalar threshold\\n                 * a percentile that will be computed per-grid cell (in combinaison with `unit`)\\n                 * per-grid cell thresholds defined by a DataArray, a Dataset or a string path to\\n                 a netcdf/zarr.\\n                 * a sequence of scalars, the indicator will then be computed for each value and\\n                 a specific dimension will be created (also work with percentiles).\\n   :type value: str | float | int | Dataset | DataArray | Sequence[float | int | str] | None\\n   :param unit: Keyword argument only.\\n                The threshold unit.\\n                When ``unit`` is None, if ``value`` is a dataset and a \\\"units\\\"\\n                can be read from its `attrs`, this unit will be used. If value is a scalar or\\n                a sequence of scalar, the exceedance will be computed by assuming threshold has\\n                the same unit as the studied value is it compared to.\\n                When unit is a string it must be a valid unit of our shared pint registry with\\n                xclim or a special percentile unit:\\n                * \\\"doy_per\\\" for day of year percentiles (in ECAD, used for temperature indices\\n                such as TX90p)\\n                * \\\"period_per\\\" for per period percentiles (in ECAD, used for rain indices such\\n                as R75p)\\n   :type unit: str | None = None\\n   :param threshold_min_value: A minimum value used to pre-filter computed threshold values.\\n                               This is particularly useful to compute a percentile threshold for rain where\\n                               dry days are usually ignored. In that case threshold_min_value would be set to\\n                               \\\"1 mm/day\\\".\\n                               If threshold_min_value is a number, ``unit`` is used to quantify\\n                               ``threshold_min_value``.\\n   :type threshold_min_value: str | float | pint.Quantity\\n   :param offset: Optional. An offset applied to the threshold. This is particularly useful when\\n                  the threshold is an existing dataset (netcdf file or zarr store) and the data\\n                  should be compared to this dataset + an offset\\n                  (e.g. to compute days when T > 5 degC above normal)\\n   :type offset: float | None\\n   :param kwargs: Additional arguments to build a PercentileThreshold.\\n                  See :py:class:`PercentileThreshold` constructor for the complete list\\n                  of possible arguments.\\n\\n   .. rubric:: Examples\\n\\n   .. code-block:: python\\n\\n       # -- Scalar threshold\\n       scalar_t = build_threshold(\\\">= 30 degC\\\")\\n       assert isinstance(scalar_t, BasicThreshold)\\n\\n       # -- Daily percentile threshold\\n       doy_t = build_threshold(\\\">= 30 doy_per\\\")\\n       assert isinstance(doy_t, PercentileThreshold)\\n\\n       # -- Per grid-cell threshold, with offset\\n       grided_t = build_threshold(\\n           operator=\\\">=\\\", value=\\\"path/to/tasmax_thresholds.nc\\\", unit=\\\"K\\\", offset=5\\n       )\\n       assert isinstance(grided_t, BasicThreshold)\\n\\n       # -- Daily percentile threshold, from a file\\n       tasmax = xarray.open_dataset(\\\"path/to/tasmax_thresholds.nc\\\").tasmax\\n       doys = xclim.core.calendar.percentile_doy(tasmax)\\n       doy_file_t = build_threshold(operator=\\\">=\\\", value=doys)\\n       assert isinstance(doy_file_t, PercentileThreshold)\\n\\n       # -- Bounded threshold\\n       bounded_t = build_threshold(\\\">= -20 degree AND <= 20 degree \\\")\\n       # equivalent to:\\n       x = build_threshold(\\\">= -20 degree\\\")\\n       y = build_threshold(\\\"<= 20 degree\\\")\\n       bounded_t2 = x & y\\n       assert bounded_t == bounded_t2\\n       # equivalent to:\\n       bounded_t3 = build_threshold(thresholds=[x, y], logical_link=\\\"AND\\\")\\n       assert bounded_t == bounded_t3\\n       assert isinstance(bounded_t, BoundedThreshold)\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/rechunk/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/rechunk/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.rechunk\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/rechunk/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the create_optimized_zarr_store context manager.\\n\\n   This context manager is used to create an \\\"optimized\\\" zarr store from a given input\\n   dataset. The optimization is done by rechunking the input dataset according to a\\n   given chunking schema.\\n\\n\\n\"}, {\"line\": 19, \"source\": \"./doc/source/references/api/icclim/rechunk/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: create_optimized_zarr_store(in_files: str | list[str] | xarray.core.dataset.Dataset | xarray.core.dataarray.DataArray, var_names: str | list[str], target_zarr_store_name: str = 'icclim-target-store.zarr', keep_target_store: bool = False, chunking: dict[str, int] | None = None, filesystem: str | fsspec.AbstractFileSystem = LOCAL_FILE_SYSTEM) -> collections.abc.Generator[xarray.core.dataset.Dataset]\\n\\n   Context manager to create an zarr store given an input netcdf or xarray structure.\\n\\n   -- EXPERIMENTAL FEATURE --\\n   API may changes without deprecation warning!\\n\\n   The execution may take a long time.\\n\\n   The result is rechunked according to `chunking` schema provided.\\n   By default, when leaving `chunking` to None, the resulting zarr store is NOT chunked\\n   on time dimension.\\n   This kind of chunking will significantly speed up the bootstrapping of\\n   percentiles for indices such as Tx90p, Tx10p, TN90p...\\n   But such chunking will most likely result in suboptimal performances for other\\n   indices.\\n   Actually, when computing indices where no bootstrap is needed,\\n   you should first try the computation without using `create_optimized_zarr_store`.\\n   If there are performance issues, you may want to use `create_optimized_zarr_store`\\n   with a dictionary of a better chunking schema than your current storage chunking.\\n\\n   By default, `keep_target_store` being False, the resulting zarr store is destroyed\\n   when the context manager is exit.\\n   To keep the zarr store for futur uses set `keep_target_store` to True.\\n\\n   The output is the resulting zarr store as a xarray Dataset.\\n\\n   :param in_files: Absolute path(s) to NetCDF dataset(s), including OPeNDAP URLs,\\n                    or path to zarr store, or xarray.Dataset or xarray.DataArray.\\n   :type in_files: str | list[str] | Dataset | DataArray\\n   :param var_names: List of data variable to include in the target zarr store.\\n                     All other data variable are dropped.\\n                     The coordinate variable are untouched and are part of the target zarr store.\\n   :type var_names: str | list[str]\\n   :param target_zarr_store_name: Name of the target zarr store.\\n                                  Used to avoid overriding an existing zarr store.\\n   :type target_zarr_store_name: str\\n   :param chunking: The target chunking schema.\\n   :type chunking: dict\\n   :param keep_target_store: Set to True to keep the target zarr store after the execution of the context\\n                             manager.\\n                             Set to False to remove the target zarr store once execution is finished.\\n                             Default is False.\\n   :type keep_target_store: bool\\n   :param filesystem: A fsspec filesystem where the zarr store will be created.\\n\\n   :rtype: returns Dataset opened on the newly created target zarr store.\\n\\n   .. rubric:: Examples\\n\\n   .. code-block:: python\\n\\n       import icclim\\n\\n       with icclim.create_optimized_zarr_store(\\n           in_files=\\\"tasmax.nc\\\",\\n           var_names=\\\"tasmax\\\",\\n           target_zarr_store_name=\\\"tasmax-store.zarr\\\",\\n           chunking={\\\"time\\\": 42, \\\"lat\\\": 42, \\\"lon\\\": 42},\\n       ) as tasmax_opti:\\n           su_out = icclim.index(in_files=tasmax_opti, index_name=\\\"su\\\")\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   icclim's internal core module.\\n\\n   The structure of this module may change without warnings.\\n   Avoid importing from this module directly.\\n\\n\\n\"}, {\"line\": 17, \"source\": \"./doc/source/references/api/icclim/_core/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 3\\n\\n   model/index.rst\\n\\n\"}, {\"line\": 26, \"source\": \"./doc/source/references/api/icclim/_core/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   climate_variable/index.rst\\n   constants/index.rst\\n   frequency/index.rst\\n   input_parsing/index.rst\\n   utils/index.rst\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/utils/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/utils/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.utils\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/utils/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain utility functions for icclim.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/utils/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: read_date(in_date: str | datetime.datetime) -> datetime.datetime\\n\\n   Read a date from a string or return the date if it is already a datetime object.\\n\\n   :param in_date: A string representing a date or a datetime object.\\n   :type in_date: str | datetime\\n\\n   :returns: A datetime object.\\n   :rtype: datetime\\n\\n\"}, {\"line\": 26, \"source\": \"./doc/source/references/api/icclim/_core/utils/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: is_number_sequence(values: object) -> bool\\n\\n   Return True if values is a sequence of numbers.\"}, {\"line\": 3, \"source\": \"./doc/source/references/api/icclim/_core/legacy/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/legacy/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.legacy\\n\\n\"}, {\"line\": 11, \"source\": \"./doc/source/references/api/icclim/_core/legacy/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 3\\n\\n   user_index/index.rst\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.legacy.user_index\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   User indices module for icclim.\\n\\n   User indices are a way of creating custom climate indices since icclim v4.\\n   It allows to define a dictionary to describe the computation of a climate index.\\n   Since icclim v6 it is reccomended to use generic indices instead, as they are more\\n   flexible and have a better API.\\n   See :ref:`generic_indices_recipes` for more information on generic indices.\\n\\n   User indices are not deprecated but are not recommended for new code.\\n\\n\\n\"}, {\"line\": 22, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   calc_operation/index.rst\\n   model/index.rst\\n   parse/index.rst\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.legacy.user_index.parse\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the parsing operations to create a user indices.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: read_indicator(user_index: icclim._core.legacy.user_index.model.UserIndexDict) -> icclim._core.generic.indicator.GenericIndicator\\n\\n   Read the user index and return the corresponding generic indicator.\\n\\n   :param user_index: The user index dictionary containing the calculation operation and extreme mode.\\n   :type user_index: UserIndexDict\\n\\n   :returns: The corresponding generic indicator based on the user index.\\n   :rtype: GenericIndicator\\n\\n   :raises InvalidIcclimArgumentError: If the user index does not contain a calculation operation.\\n       If the user index's calculation operation is unknown.\\n   :raises NotImplementedError: If the calculation operation or extreme mode is not implemented.\\n\\n   .. rubric:: Notes\\n\\n   This function reads the user index dictionary and maps the calculation operation and\\n   extreme mode to the corresponding generic indicator.\\n   It raises errors if the required information is missing or if the operation is not\\n   implemented.\\n\\n\"}, {\"line\": 37, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: read_logical_link(user_index: icclim._core.legacy.user_index.model.UserIndexDict) -> icclim._core.model.logical_link.LogicalLink\\n\\n   Read the logical link from the user index dictionary.\\n\\n   :param user_index: The user index dictionary containing the logical link information.\\n   :type user_index: UserIndexDict\\n\\n   :returns: The corresponding LogicalLink based on the logical link information in the user\\n             index dictionary.\\n   :rtype: LogicalLink\\n\\n   .. rubric:: Notes\\n\\n   If the logical link is not specified in the user index dictionary, the default\\n   logical link is LogicalLinkRegistry.LOGICAL_AND.\\n\\n\"}, {\"line\": 54, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: read_coef(user_index: icclim._core.legacy.user_index.model.UserIndexDict) -> float | None\\n\\n   Read the coefficient value from the user index dictionary.\\n\\n   :param user_index: The user index dictionary containing the coefficient value.\\n   :type user_index: UserIndexDict\\n\\n   :returns: The coefficient value if it exists in the user index dictionary, otherwise None.\\n   :rtype: float or None\\n\\n\"}, {\"line\": 65, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: read_date_event(user_index: icclim._core.legacy.user_index.model.UserIndexDict) -> bool\\n\\n   Read the 'date_event' key from the given UserIndexDict.\\n\\n   :param user_index: The dictionary containing user index information.\\n   :type user_index: UserIndexDict\\n\\n   :returns: The value associated with the 'date_event' key in the UserIndexDict,\\n             if missing returns False.\\n   :rtype: bool\\n\\n\"}, {\"line\": 77, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: read_thresholds(user_index: icclim._core.legacy.user_index.model.UserIndexDict, doy_window_width: int, reference_period: collections.abc.Sequence[datetime.datetime | str] | None, only_leap_years: bool, interpolation: icclim._core.model.quantile_interpolation.QuantileInterpolation) -> icclim._core.model.threshold.Threshold | None | list[icclim._core.model.threshold.Threshold]\\n\\n   Read the thresholds from the user index dictionary.\\n\\n   :param user_index: The user index dictionary containing the threshold information.\\n   :type user_index: UserIndexDict\\n   :param doy_window_width: The width of the day of year window for calculating the threshold.\\n   :type doy_window_width: int\\n   :param reference_period: The reference period for calculating the threshold.\\n   :type reference_period: Sequence[dt.datetime | str] | None\\n   :param only_leap_years: Whether to consider only leap years when calculating the threshold.\\n   :type only_leap_years: bool\\n   :param interpolation: The interpolation method to use for calculating the threshold.\\n   :type interpolation: QuantileInterpolation\\n\\n   :returns: The corresponding Threshold object(s) based on the threshold information in the\\n             user index dictionary.\\n   :rtype: Threshold or None or list[Threshold]\\n\\n   .. rubric:: Notes\\n\\n   This function reads the threshold information from the user index dictionary and\\n   maps it to the corresponding Threshold object(s).\\n   If the threshold is already a Threshold object, it is returned as is.\\n   If the threshold is a tuple or list, multiple Threshold objects are created based\\n   on the logical operation and link specified in the user index dictionary.\\n   If the threshold is a single value, a single Threshold object is created.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/model/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/model/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.legacy.user_index.model\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/model/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the UserIndexDict TypedDict.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/model/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: UserIndexDict\\n\\n\\n\\n\\n   User index dictionary.\\n\\n   This dictionary is used to describe how a user index should be setup to compute a\\n   custom climate index.\\n   The reccomended way to create a custom indices is now to use the\\n   generic indices API.\\n   See :ref:`generic_indices_recipes` for how to combine thresholds with generic\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.legacy.user_index.calc_operation\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the CalcOperationLike and CalcOperation classes.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: CalcOperation\\n\\n\\n\\n\\n   Represent a calculation operation for a user index.\\n\\n\"}, {\"line\": 23, \"source\": \"./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: CalcOperationRegistry\\n\\n\\n\\n\\n   Registry for CalcOperation instances.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/climate_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/climate_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.climate_variable\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/climate_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the ClimateVariable class and its related functions.\\n\\n   A climate variable is a structure that contains all the pre-processed input varaible to\\n   compute a climate index.\\n   A climate index may require one or more climate variables to be computed.\\n\\n\\n\"}, {\"line\": 19, \"source\": \"./doc/source/references/api/icclim/_core/climate_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: ClimateVariable\\n\\n\\n   ClimateVariable is a dataclass that represents a climate variable used to compute a climate index.\\n\\n   It groups together the input variable (studied_data), its associated metadata\\n   (standard_var) if any, the threshold it must be compared to.\\n\\n   .. attribute:: name\\n\\n      Name of the variable.\\n\\n      :type: str\\n\\n   .. attribute:: standard_var\\n\\n      CF metadata bounded to the standard variable used for this ClimateVariable.\\n\\n      :type: StandardVariable\\n\\n   .. attribute:: studied_data\\n\\n      The variable studied.\\n\\n      :type: DataArray\\n\\n   .. attribute:: threshold\\n\\n      thresholds for this variable\\n\\n      :type: Threshold | None\\n\\n   .. py:method:: build_indicator_metadata(src_freq: icclim._core.frequency.Frequency, must_run_bootstrap: bool, jinja_scope: dict[str, Any], jinja_env: jinja2.Environment) -> dict[str, str | dict]\\n\\n      Build the metadata for the indicator that will be computed with this variable.\\n\\n      :param src_freq: The frequency of the source data.\\n      :type src_freq: Frequency\\n      :param must_run_bootstrap: Whether the bootstrap method must be run.\\n      :type must_run_bootstrap: bool\\n      :param jinja_scope: The scope to use for jinja templating.\\n      :type jinja_scope: dict\\n      :param jinja_env: The environment to use for jinja templating.\\n      :type jinja_env: jinja2.Environment\\n\\n      :returns: The metadata for the indicator.\\n      :rtype: dict of str, str | dict\\n\\n\\n\"}, {\"line\": 69, \"source\": \"./doc/source/references/api/icclim/_core/climate_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: build_climate_vars(climate_vars_dict: dict[str, icclim._core.model.in_file_dictionary.InFileDictionary], ignore_Feb29th: bool, time_range: collections.abc.Sequence[datetime.datetime | str] | None, base_period: collections.abc.Sequence[str] | None, standard_index: icclim._core.model.standard_index.StandardIndex | None, is_compared_to_reference: bool) -> list[ClimateVariable]\\n\\n   Build a list of ClimateVariable from a dictionary of input files.\\n\\n   :param climate_vars_dict: The dictionary of input files.\\n   :type climate_vars_dict: dict of str, InFileDictionary\\n   :param ignore_Feb29th: Whether to ignore February 29th.\\n   :type ignore_Feb29th: bool\\n   :param time_range: The time range to consider.\\n   :type time_range: Sequence of datetime | str | None\\n   :param base_period:\\n                       The base period to consider, used to build a reference variable for indices such\\n                        as anomaly.\\n   :type base_period: Sequence of str | None\\n   :param standard_index: The standard index to compute.\\n   :type standard_index: StandardIndex | None\\n\\n   :rtype: list of ClimateVariable that will be used to compute the climate index.\\n\\n\"}, {\"line\": 89, \"source\": \"./doc/source/references/api/icclim/_core/climate_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: build_climate_var(climate_var_name: str, climate_var_data: icclim._core.model.in_file_dictionary.InFileDictionary | icclim._core.model.icclim_types.InFileBaseType, ignore_Feb29th: bool, time_range: collections.abc.Sequence[datetime.datetime | str] | None, standard_var: icclim._core.model.standard_variable.StandardVariable | None) -> ClimateVariable\\n\\n   Build a ClimateVariable object.\\n\\n   :param climate_var_name: The name of the climate variable.\\n   :type climate_var_name: str\\n   :param climate_var_data: The input data for the climate variable. It can be either a dictionary\\n                            or a file.\\n   :type climate_var_data: InFileDictionary | InFileBaseType\\n   :param ignore_Feb29th: Flag indicating whether to ignore February 29th in the time range.\\n   :type ignore_Feb29th: bool\\n   :param time_range: The time range to consider for the climate variable. It can be a sequence\\n                      of datetime objects or strings, or None to consider the entire time range.\\n   :type time_range: Sequence[datetime | str] | None\\n   :param standard_var: The standard variable to use for the climate variable. If None, the input\\n                        data will be used to guess the standard variable.\\n   :type standard_var: StandardVariable | None\\n\\n   :returns: The built ClimateVariable object.\\n   :rtype: ClimateVariable\\n\\n   .. rubric:: Notes\\n\\n   This function builds a ClimateVariable object based on the provided inputs.\\n   It reads the input data, determines the standard variable, builds the studied\\n   data, and sets the threshold and global metadata.\\n\\n   If the input data is a dictionary, it is assumed to have a 'study' key\\n   containing the study data and an optional 'thresholds' key containing the\\n   threshold data.\\n\\n   If the input data is a file, it is assumed to contain the study data.\\n\\n   The standard variable is used to determine the conversion unit for the\\n   threshold data.\\n\\n   The studied data is built based on the study data, time range, ignore_Feb29th\\n   flag, and standard variable.\\n\\n   If a threshold is provided in the dictionary, it is added to the ClimateVariable.\\n\\n   .. rubric:: Examples\\n\\n   >>> climate_var_name = \\\"tas\\\"\\n   >>> climate_var_data = {\\\"study\\\": \\\"/path/to/data.nc\\\", \\\"thresholds\\\": \\\">= 27 degC\\\"}\\n   >>> ignore_Feb29th = False\\n   >>> time_range = [\\\"2000-01-01\\\", \\\"2010-12-31\\\"]\\n   >>> standard_var = StandardVariableRegistry.TAS\\n   >>> climate_var = build_climate_var(\\n   ...     climate_var_name, climate_var_data, ignore_Feb29th, time_range, standard_var\\n   ... )\\n\\n\"}, {\"line\": 142, \"source\": \"./doc/source/references/api/icclim/_core/climate_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: must_run_bootstrap(da: xarray.core.dataarray.DataArray, threshold: icclim._core.model.threshold.Threshold | None) -> bool\\n\\n   Determine whether to run the bootstrap method.\\n\\n   :param da: The studied data.\\n   :type da: DataArray\\n   :param threshold: The threshold that contains the reference period.\\n   :type threshold: Threshold | None\\n\\n   :returns: Whether to run the bootstrap method.\\n   :rtype: bool\\n\\n   .. rubric:: Notes\\n\\n   This function is used to avoid bootstrapping if there is one single year\\n   overlapping or no year overlapping or all year overlapping between the studied\\n   data `da` and the reference period defined by the threshold.\\n\\n\"}, {\"line\": 161, \"source\": \"./doc/source/references/api/icclim/_core/climate_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _build_reference_variable(reference_period: collections.abc.Sequence[str] | None, in_files: dict[str, icclim._core.model.in_file_dictionary.InFileDictionary], standard_var: icclim._core.model.standard_variable.StandardVariable) -> ClimateVariable\\n\\n   Add a secondary variable for indices such as anomaly.\\n\\n   This kind of indices require exactly two variables, but the second variable can\\n   just be a subset of the first one.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the dataclasses, TypedDicts and basic registries of icclim.\\n\\n\\n\"}, {\"line\": 14, \"source\": \"./doc/source/references/api/icclim/_core/model/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   cf_calendar/index.rst\\n   global_metadata/index.rst\\n   icclim_types/index.rst\\n   in_file_dictionary/index.rst\\n   index_config/index.rst\\n   index_group/index.rst\\n   indicator/index.rst\\n   logical_link/index.rst\\n   netcdf_version/index.rst\\n   operator/index.rst\\n   quantile_interpolation/index.rst\\n   registry/index.rst\\n   standard_index/index.rst\\n   standard_variable/index.rst\\n   threshold/index.rst\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/index_group/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/index_group/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.index_group\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/index_group/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the IndexGroup class and the IndexGroupRegistry class.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/index_group/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: IndexGroup(name: str, values: list[IndexGroup] | None = None)\\n\\n\\n   Class representing a group of climate indices.\\n\\n   :param name: The name of the index group.\\n   :type name: str\\n   :param values: The list of index groups contained within this group. Defaults to None.\\n   :type values: list[IndexGroup] | None, optional\\n\\n   .. attribute:: name\\n\\n      The name of the index group.\\n\\n      :type: str\\n\\n   .. attribute:: values\\n\\n      The list of index groups contained within this group.\\n\\n      :type: list[IndexGroup]\\n\\n   .. py:method:: get_indices() -> list[Any]\\n\\n      Get the list of indices belonging to this group.\\n\\n      :returns: The list of indices belonging to this group.\\n      :rtype: list[Any]\\n\\n      .. rubric:: Notes\\n\\n      The list of indices is obtained by filtering the EcadIndexRegistry values.\\n      The others indices are not considered.\\n\\n\\n\"}, {\"line\": 51, \"source\": \"./doc/source/references/api/icclim/_core/model/index_group/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: IndexGroupRegistry\\n\\n\\n\\n\\n   Registry for IndexGroup instances.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/icclim_types/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/icclim_types/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.icclim_types\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/icclim_types/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Type hints for icclim.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.standard_variable\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Define the StandardVariable class and the StandardVariableRegistry class.\\n\\n   The StandardVariable class represents a standard variable used in climate data analysis.\\n   The StandardVariableRegistry class is a registry that stores instances of\\n   `StandardVariable`.\\n\\n   StandardVariable are mainly used to compute the metadata of the output of the generic\\n   indices.\\n\\n\\n\"}, {\"line\": 22, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: StandardVariable\\n\\n\\n\\n\\n   StandardVariable represents a typical variable used in climate data analysis.\\n\\n   :param short_name: The short name of the variable.\\n   :type short_name: str\\n   :param standard_name: The standard name of the variable.\\n   :type standard_name: str\\n   :param long_name: The long name of the variable.\\n   :type long_name: str\\n   :param aliases: A list of aliases for the variable.\\n   :type aliases: list[str]\\n   :param default_units: The default units of the variable.\\n   :type default_units: str\\n\\n   .. py:method:: get_metadata() -> dict[str, str]\\n\\n      Get the metadata of the StandardVariable object.\\n\\n\\n\"}, {\"line\": 46, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_variable/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: StandardVariableRegistry\\n\\n\\n\\n\\n   StandardVariableRegistry stores instances of StandardVariable such as PR, TAS.\\n\\n   .. py:method:: get_item_aliases(item: StandardVariable) -> list[str]\\n      :staticmethod:\\n\\n      Return a list of aliases for the given StandardVariable.\\n\\n      :param item: The StandardVariable object for which to retrieve the aliases.\\n      :type item: StandardVariable\\n\\n      :returns: A list of aliases for the given StandardVariable.\\n      :rtype: list[str]\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.cf_calendar\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the CfCalendar class and the CfCalendarRegistry class.\\n\\n   These classes are used to represent and manage the CF calendars used in the\\n   climate indices calculation.\\n\\n\\n\"}, {\"line\": 18, \"source\": \"./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: CfCalendar\\n\\n\\n   Represents a CF calendar.\\n\\n   :param aliases: All the possible aliases or poorly typed calendar names targeting the same\\n                   calendar.\\n   :type aliases: list[str]\\n   :param is_leap: It expects a DataArray argument of years such as `da.time.dt.year`.\\n                   Returns a mask of the input telling if the value is part of a leap year or not.\\n   :type is_leap: Callable\\n\\n   .. attribute:: aliases\\n\\n      All the possible aliases or poorly typed calendar names targeting the same\\n      calendar.\\n\\n      :type: list[str]\\n\\n   .. attribute:: is_leap\\n\\n      It expects a DataArray argument of years such as `da.time.dt.year`.\\n      Returns a mask of the input telling if the value is part of a leap year or not.\\n\\n      :type: Callable\\n\\n   .. py:property:: name\\n      :type: str\\n\\n      Returns the name of the calendar.\\n\\n      :returns: The name of the calendar.\\n      :rtype: str\\n\\n\"}, {\"line\": 53, \"source\": \"./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: CfCalendarRegistry\\n\\n\\n\\n\\n   Calendars known in CF plus some additional custom aliases for convenience.\\n\\n   :param aliases: All the possible aliases or poorly typed calendar names targeting the same\\n                   calendar.\\n   :type aliases: list[str]\\n   :param is_leap: It expects a DataArray argument of years such as `da.time.dt.year`.\\n                   Returns a mask of the input telling if the value is part of a leap year or not.\\n   :type is_leap: Callable\\n\\n   .. attribute:: _item_class\\n\\n      The class of the items in the registry.\\n\\n      :type: type\\n\\n   .. py:method:: get_item_aliases(item: CfCalendar) -> list[str]\\n      :staticmethod:\\n\\n      Get the aliases of a CfCalendar item.\\n\\n      :param item: The CfCalendar item.\\n      :type item: CfCalendar\\n\\n      :returns: The aliases of the CfCalendar item.\\n      :rtype: list[str]\\n\\n\\n\"}, {\"line\": 86, \"source\": \"./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _proleptic_gregorian_leap(years: xarray.DataArray) -> xarray.DataArray\\n\\n   Calculate if the years are part of a leap year in the proleptic Gregorian calendar.\\n\\n   :param years: The years to check.\\n   :type years: DataArray\\n\\n   :returns: A boolean array indicating if the years are part of a leap year.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 97, \"source\": \"./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _julian_leap(years: xarray.DataArray) -> xarray.DataArray\\n\\n   Calculate if the years are part of a leap year in the Julian calendar.\\n\\n   :param years: The years to check.\\n   :type years: DataArray\\n\\n   :returns: A boolean array indicating if the years are part of a leap year.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 108, \"source\": \"./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _standard_leap(years: xarray.DataArray) -> xarray.DataArray\\n\\n   Calculate if the years are part of a leap year in the standard Gregorian calendar.\\n\\n   :param years: The years to check.\\n   :type years: DataArray\\n\\n   :returns: A boolean array indicating if the years are part of a leap year.\\n   :rtype: DataArray\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/operator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/operator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.operator\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/operator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Module for the Operator class and OperatorRegistry.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/operator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: Operator\\n\\n\\n   Represents an operator used in computations.\\n\\n   :param short_name: The short name of the operator,\\n                      used when templating the output metadata.\\n   :type short_name: str\\n   :param long_name: The long name of the operator,\\n                     used when templating the output metadata.\\n   :type long_name: str\\n   :param standard_name: The standard name of the operator,\\n                         used when templating the output metadata.\\n   :type standard_name: str\\n   :param operand: The operand symbol of the operator.\\n   :type operand: str\\n   :param compute: The computation function of the operator.\\n   :type compute: Callable[[DataArray, DataArray | int | float], DataArray]\\n   :param aliases: The list of aliases for the operator.\\n   :type aliases: list[str]\\n\\n\"}, {\"line\": 37, \"source\": \"./doc/source/references/api/icclim/_core/model/operator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: OperatorRegistry\\n\\n\\n\\n\\n   Registry of operators.\\n\\n   Contains the predefined operators used to build ``Threshold``.\\n\\n   .. py:method:: get_item_aliases(op: Operator) -> list[str]\\n      :staticmethod:\\n\\n      Get the aliases of an operator.\\n\\n      :param op: The operator.\\n      :type op: Operator\\n\\n      :returns: The list of aliases for the operator.\\n      :rtype: list[str]\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.registry\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the Registry class, a fancy enum replacement.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: Registry\\n\\n\\n\\n\\n   Registry classes acts as fancy enums.\\n\\n   It allows to easily store and find constants of similar type.\\n   Registries are namespaces, so there is no need to instantiate it or any of\\n   its subclasses, every item is a class attribute.\\n\\n   .. rubric:: Notes\\n\\n   Registries are not meant to store large collections, they are just fancy lookup\\n   tables for items with aliases and no case sensitivity.\\n\\n   .. py:method:: lookup(query: T | str) -> T\\n      :classmethod:\\n\\n      Look up an item in the registry.\\n\\n      :param query: The item to look up. It can be either an instance of the item class or a\\n                    string.\\n      :type query: T or str\\n\\n      :returns: The found item.\\n      :rtype: T\\n\\n      :raises InvalidIcclimArgumentError: If the item is not found in the registry.\\n\\n      .. rubric:: Notes\\n\\n      This method performs a case-insensitive lookup.\\n      It first checks if the query is an instance of the item class, and if so,\\n      returns a deep copy of the query.\\n\\n\\n   .. py:method:: lookup_no_error(query: T | str) -> T | None\\n      :classmethod:\\n\\n      Also look up an item in the registry, but return None if not found.\\n\\n      :param query: The item to look up. It can be either an instance of the item class or a\\n                    string.\\n      :type query: T or str\\n\\n      :returns: The found item, or None if not found.\\n      :rtype: T or None\\n\\n\\n   .. py:method:: every_aliases() -> list[T]\\n      :classmethod:\\n\\n      Return a list of all aliases for items in the registry.\\n\\n      :returns: A list of all aliases for items in the registry.\\n      :rtype: list[T]\\n\\n\\n   .. py:method:: get_item_aliases(item: T) -> list[str]\\n      :staticmethod:\\n\\n      Get the aliases for the given item.\\n\\n      :param item: The item to get aliases for.\\n      :type item: T\\n\\n      :returns: A list of aliases for the item.\\n      :rtype: list[str]\\n\\n      .. rubric:: Notes\\n\\n      Should be overridden in subclasses.\\n\\n\\n   .. py:method:: catalog() -> dict[str, T]\\n      :classmethod:\\n\\n      Return a dictionary of all items in the registry.\\n\\n      :returns: A dictionary containing all items in the registry, where the keys are the\\n                item names and the values are the item instances.\\n      :rtype: dict[str, T]\\n\\n\\n   .. py:method:: values() -> list[T]\\n      :classmethod:\\n\\n      Return a list of all items in the registry.\\n\\n      :returns: A list containing all items in the registry.\\n      :rtype: list[T]\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.indicator\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Typing for generic indices.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: MissingMethodLike\\n\\n\\n\\n\\n   Workaround xclim missing type.\\n\\n   .. py:method:: execute(*args, **kwargs) -> xclim.core.missing.MissingBase\\n      :abstractmethod:\\n\\n      Execute the missing method.\\n\\n\\n   .. py:method:: validate(*args, **kwargs) -> bool\\n      :abstractmethod:\\n\\n      Validate the missing method.\\n\\n\\n\"}, {\"line\": 35, \"source\": \"./doc/source/references/api/icclim/_core/model/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: Indicator\\n\\n\\n\\n\\n   Generic indicator abstract class.\\n\\n   .. attribute:: name\\n\\n      The name of the indicator.\\n\\n      :type: str\\n\\n   .. attribute:: standard_name\\n\\n      The standard name of the indicator, ideally from the CF conventions.\\n\\n      :type: str\\n\\n   .. attribute:: long_name\\n\\n      The long name of the indicator.\\n\\n      :type: str\\n\\n   .. attribute:: cell_methods\\n\\n      The cell methods of the indicator.\\n\\n      :type: str\\n\\n   .. attribute:: qualifiers\\n\\n      The qualifiers of the indicator, used to classify indicators.\\n\\n      :type: tuple\\n\\n   .. attribute:: templated_properties\\n\\n      The properties that can be templated.\\n      Theses properties are used to fill the output metadata.\\n\\n      :type: tuple\\n\\n   .. py:method:: preprocess(*args, **kwargs) -> list[xarray.DataArray]\\n      :abstractmethod:\\n\\n      Preprocess the data.\\n\\n\\n   .. py:method:: postprocess(*args, **kwargs) -> xarray.DataArray\\n      :abstractmethod:\\n\\n      Postprocess the data.\\n\\n\\n   .. py:method:: clone() -> Indicator\\n\\n      Clone the indicator.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.quantile_interpolation\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the classes for quantile interpolation.\\n\\n   QuantileInterpolation class and the QuantileInterpolationRegistry class\\n   are defined here.\\n\\n\\n\"}, {\"line\": 18, \"source\": \"./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: QuantileInterpolation\\n\\n\\n   Class for performing quantile interpolation.\\n\\n   :param name: The name of the interpolation method.\\n   :type name: str\\n   :param alpha: The alpha parameter for the interpolation.\\n   :type alpha: float\\n   :param beta: The beta parameter for the interpolation.\\n   :type beta: float\\n\\n\"}, {\"line\": 31, \"source\": \"./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: QuantileInterpolationRegistry\\n\\n\\n\\n\\n   Registry of quantile interpolation methods.\\n\\n   Only 2 methods are available: LINEAR and MEDIAN_UNBIASED.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/logical_link/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/logical_link/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.logical_link\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/logical_link/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the LogicalLink class and registry.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/logical_link/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: LogicalLink\\n\\n\\n   Logical link class to combine multiple threshold.\\n\\n   This is meant to be used with the old user_indices API.\\n   It is now reccomended to use BoundedThreshold with generic indices instead.\\n   See :ref:`generic_indices_recipes` for how to combine thresholds with generic\\n   indices.\\n\\n\"}, {\"line\": 26, \"source\": \"./doc/source/references/api/icclim/_core/model/logical_link/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: LogicalLinkRegistry\\n\\n\\n\\n\\n   Registry for LogicalLink objects.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/index_config/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/index_config/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.index_config\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/index_config/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the IndexConfig class.\\n\\n   It holds the compiled configuration for the computation of climate indices.\\n\\n\\n\"}, {\"line\": 17, \"source\": \"./doc/source/references/api/icclim/_core/model/index_config/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: IndexConfig\\n\\n\\n   Configuration class for defining climate index parameters.\\n\\n   :param frequency: The time frequency of the output. Built from ``slice_mode``.\\n   :type frequency: Frequency\\n   :param climate_variables: The list of climate variables used in the index calculation.\\n   :type climate_variables: list[ClimateVariable]\\n   :param min_spell_length: The minimum spell length for the index calculation.\\n                            None if the index is not a spell index.\\n   :type min_spell_length: int | None\\n   :param rolling_window_width: The width of the rolling window for the index calculation.\\n                                None if the index is not a rolling index.\\n   :type rolling_window_width: int | None\\n   :param out_unit: The output unit for the index calculation.\\n                    Optional, used to override the default unit.\\n   :type out_unit: str | None\\n   :param callback: The callback function for progress updates during the index calculation.\\n                    Deprecated.\\n   :type callback: Callable[[int], None] | None\\n   :param netcdf_version: The version of the NetCDF file format to use for saving the index results.\\n                          Default is NetcdfVersion.NETCDF4.\\n   :type netcdf_version: NetcdfVersion\\n   :param save_thresholds: Flag indicating whether to save the threshold values used in the index\\n                           calculation.\\n   :type save_thresholds: bool\\n   :param interpolation: The interpolation method to use for calculating quantiles/percentiles.\\n   :type interpolation: QuantileInterpolation\\n   :param is_compared_to_reference: Flag indicating whether the index is compared to a reference period.\\n   :type is_compared_to_reference: bool\\n   :param reference_period: The reference period for the index calculation.\\n   :type reference_period: tuple[str, str] | None\\n   :param indicator_name: The name of the index.\\n   :type indicator_name: str\\n   :param logical_link: The logical link to use for combining multiple indices.\\n   :type logical_link: LogicalLink\\n   :param coef: The coefficient to apply to the index values.\\n   :type coef: float | None\\n   :param date_event: Flag indicating whether the index represents a date or an event.\\n   :type date_event: bool\\n   :param sampling_method: The sampling method to use for the index calculation.\\n                           In conjonction with the Frequency, it is used on specific indices such as the\\n                           anomaly (a.k.a diff_of_means) to determine if the reference period and the\\n                           studied period should be grouped by or resampled.\\n                           It can be either 'group_by', 'resample', or\\n                           'group_by_ref_and_resample_study'.\\n                           'group_by' will group the data by the specified frequency, for example every\\n                           data of every January together.\\n                           'resample' will resample the data to the specified frequency, for example every\\n                           days of each month independently together.\\n                           'group_by_ref_and_resample_study' will group the reference data by the specified\\n                           frequency and resample the study data to the same frequency.\\n                           This last method allows for example to compare each January, independently, of\\n                           the study period to every January of the reference period.\\n                           This is typically used to compare the each month of the studied period\\n                           to a normal (the reference) of many aggregated years.\\n   :type sampling_method: str\\n   :param rename: The new name for the output variable.\\n                  Optional, used to override the default index name.\\n   :type rename: str | None\\n   :param indicator: The indicator to be computed.\\n   :type indicator: Indicator\\n   :param reference: The reference value for the index calculation.\\n   :type reference: str\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/in_file_dictionary/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/in_file_dictionary/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.in_file_dictionary\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/in_file_dictionary/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contains the InFileDictionary class.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/in_file_dictionary/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: InFileDictionary\\n\\n\\n\\n\\n   Dictionary grouping in_files and var_name functionnalities.\\n\\n   .. attribute:: study\\n\\n      Study input file.\\n\\n      :type: InFileBaseType\\n\\n   .. attribute:: thresholds\\n\\n      Thresholds to apply to the study input file.\\n\\n      :type: NotRequired[Threshold | None]\\n\\n   .. rubric:: Examples\\n\\n   .. code-block:: python\\n\\n       threshold = build_threshold(operator=\\\">\\\", value=[\\\"per-1.nc\\\", \\\"per-2.nc\\\"])\\n       in_files = {\\n           \\\"tasmax\\\": {\\n               \\\"study\\\": \\\"tasmax-store.zarr\\\",\\n               \\\"threshold\\\": threshold,\\n           },\\n           \\\"pr\\\": \\\"pr.nc\\\",\\n           \\\"tasmin\\\": {\\\"study\\\": \\\"tasmin.nc\\\"},\\n       }\\n\\n   .. rubric:: Notes\\n\\n   It also allows to use a different input for thresholds such as percentiles.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_index/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_index/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.standard_index\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_index/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the StandardIndex data class.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/standard_index/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: StandardIndex\\n\\n\\n   Standard Index data class.\\n\\n   It is used to describe how a GenericIndicator should be setup to compute a climate\\n   index that has been defined in the literature (such as ECA&D's ATBD document).\\n\\n\\n   .. attribute:: short_name\\n\\n      The index name used in the output.\\n\\n      :type: str\\n\\n   .. attribute:: compute\\n\\n      The function to compute the index. It usually wraps a xclim functions.\\n\\n      :type: Callable\\n\\n   .. attribute:: group\\n\\n      The index group category.\\n\\n      :type: IndexGroup\\n\\n   .. attribute:: variables\\n\\n      The Cf variables needed to compute the index.\\n      The variable are individually described by a list of aliases.\\n\\n      :type: List[List[str]]\\n\\n   .. attribute:: qualifiers\\n\\n      ``optional`` List of configuration to compute the index.\\n      Used internally to generate modules for C3S.\\n\\n      :type: List[str] | None\\n\\n   .. attribute:: source\\n\\n      Where the index definition comes from.\\n\\n      :type: str | None\\n\\n   .. attribute:: definition\\n\\n      A formal definition of the index. It should describe what kind of output\\n      the user is expected to obtain.\\n\\n      :type: str | None\\n\\n   .. py:method:: clone() -> StandardIndex\\n\\n      Return a deep copy of the index.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.netcdf_version\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Module containing the NetCDF version model and its registry.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: NetcdfVersion\\n\\n\\n   Class representing a NetCDF version.\\n\\n   .. attribute:: name\\n\\n      The name of the NetCDF version.\\n\\n      :type: {'NETCDF4', 'NETCDF4_CLASSIC', 'NETCDF3_64BIT', 'NETCDF3_CLASSIC'}\\n\\n\"}, {\"line\": 27, \"source\": \"./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: NetcdfVersionRegistry\\n\\n\\n\\n\\n   Registry of NetCDF versions.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/global_metadata/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/global_metadata/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.global_metadata\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/global_metadata/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Global metadata model to be added to the output netCDF file.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/global_metadata/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: GlobalMetadata\\n\\n\\n\\n\\n   Global metadata model.\\n\\n   .. attribute:: history\\n\\n      The CF history attribute.\\n\\n      :type: str or None\\n\\n   .. attribute:: source\\n\\n      The source of the data.\\n\\n      :type: str or None\\n\\n   .. attribute:: time_encoding\\n\\n      The time encoding information to be read from ds.time.encoding.\\n\\n      :type: dict or None\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/model/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/model/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.model.threshold\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/model/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Threshold abstract class and ThresholdBuilderInput type.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/model/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: ThresholdBuilderInput\\n\\n\\n\\n\\n   Threshold building configuration.\\n\\n   Data transfert object mapping all possible configuration to build any threshold.\\n\\n\"}, {\"line\": 25, \"source\": \"./doc/source/references/api/icclim/_core/model/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: Threshold\\n\\n\\n\\n\\n   Abstract class for all thresholds.\\n\\n   See :ref:`generic_indices_recipes` for how to use custom thresholds.\\n\\n   .. py:method:: format_metadata(*, jinja_scope: dict[str, Any], jinja_env: jinja2.Environment, **kwargs) -> icclim._core.generic.threshold.threshold_templates.ThresholdMetadata\\n      :abstractmethod:\\n\\n      Get a dictionary of standardized threshold metadata.\\n\\n\\n   .. py:method:: compute(comparison_data: xarray.DataArray, override_op: Callable[[xarray.DataArray, xarray.DataArray], xarray.DataArray] | None = None, **kwargs) -> xarray.DataArray\\n      :abstractmethod:\\n\\n      Compute the exceedance of the threshold.\\n\\n      For example, if the threshold is 10 and the comparison_data is [5, 10, 15],\\n      with a \\\">\\\" operator, the exceedance will be [False, False, True].\\n      The operator can be overridden by `override_op`.\\n      This is needed when self.operator is REACH.\\n\\n      :param comparison_data: Data that must be compared to self threshold\\n      :type comparison_data: xr.DataArray\\n      :param override_op: Operator to override self.operator compute function.\\n                          Optional.\\n      :type override_op: Callable[[DataArray, DataArray], DataArray] | None\\n      :param kwargs: Keyword arguments passed to the concrete `compute` implementations.\\n                     This makes the `compute` interface contract unreliable.\\n                     So we accept to not respected LSP here.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/constants/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/constants/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.constants\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/constants/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Icclim's constants.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/frequency/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/frequency/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.frequency\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/frequency/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the Frequency class and the FrequencyRegistry class.\\n\\n   Frequency wraps the concept of pandas frequency in order to resample\\n   time series. ``slice_mode`` parameter of `icclim.index` is always converted to a\\n   `Frequency`.\\n\\n\\n\"}, {\"line\": 19, \"source\": \"./doc/source/references/api/icclim/_core/frequency/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: get_seasonal_time_updater(start_month: int, end_month: int, start_day: int = 1, end_day: int | None = None) -> Callable[[xarray.core.dataarray.DataArray], tuple[xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray]]\\n\\n   Seasonal time updater and time bounds creator method generator.\\n\\n   Returns a callable of DataArray which will rewrite the time dimension to\\n   the season composed of the given months. The data must have been computed on this\\n   season beforehand.\\n   It also create the corresponding time_bounds.\\n\\n   :param start_month: The season starting month, it must be between 1 and 12.\\n   :type start_month: int\\n   :param end_month: The season ending month, it must be between 1 and 12.\\n   :type end_month: int\\n   :param start_day: The season starting day, it must be between 1 and 31.\\n   :type start_day: int\\n   :param end_day: The season ending day, it must be between 1 and 31.\\n   :type end_day: int\\n\\n   :returns: **function** -- A function that will update the time dimension of a DataArray to the season\\n             composed of the given months and create the corresponding time_bounds.\\n   :rtype: Callable[[DataArray], tuple[DataArray, DataArray]]\\n\\n\"}, {\"line\": 42, \"source\": \"./doc/source/references/api/icclim/_core/frequency/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: get_time_bounds_updater(freq: str) -> Callable[[xarray.core.dataarray.DataArray], tuple[xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray]]\\n\\n   Return a function that adds time bounds to a given DataArray.\\n\\n   :param freq: The frequency at which the DataArray should be resampled.\\n   :type freq: str\\n\\n   :returns: A function that takes a DataArray as input and returns a tuple\\n             containing the modified DataArray and the time\\n             bounds as a separate DataArray.\\n   :rtype: Callable[[DataArray], tuple[DataArray, DataArray]]\\n\\n   .. rubric:: Notes\\n\\n   The returned function assumes that the input DataArray has already\\n   been resampled to the specified frequency.\\n\\n   The time axis values in the modified DataArray will be set to the\\n   middle of the calculated time bounds.\\n\\n\"}, {\"line\": 63, \"source\": \"./doc/source/references/api/icclim/_core/frequency/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: Frequency\\n\\n\\n   Time sampling frequency.\\n\\n   This acts as a wrapper around the pandas frequency string.\\n   ``icclim.index`` will always convert the ``slice_mode`` parameter to a\\n   ``Frequency``.\\n\\n   :param pandas_freq: The frequency string used by pandas to resample the time series.\\n   :type pandas_freq: str\\n   :param accepted_values: The list of aliases for the frequency.\\n   :type accepted_values: list[str]\\n   :param adjective: The adjective form of the frequency. Used when templating the output's metadata.\\n   :type adjective: str\\n   :param post_processing: The function to apply for post-processing the resampled data.\\n   :type post_processing: Callable[[DataArray], tuple[DataArray, DataArray]] | None\\n   :param units: The units of the frequency.\\n   :type units: str\\n   :param indexer: The indexer to use for grouping the data.\\n   :type indexer: Indexer | None\\n   :param long_name: The long name of the frequency.\\n   :type long_name: str\\n   :param group_by_key: The key to use for grouping the data.\\n   :type group_by_key: str | None\\n   :param delta: The time delta for the frequency.\\n   :type delta: np.timedelta64\\n\\n   :returns: The frequency object.\\n   :rtype: Frequency\\n\\n   .. rubric:: Notes\\n\\n   This class represents a time sampling frequency.\\n\\n   .. rubric:: Examples\\n\\n   >>> freq = Frequency(\\n   ...     pandas_freq=\\\"D\\\",\\n   ...     accepted_values=[\\\"daily\\\", \\\"day\\\", \\\"days\\\", \\\"d\\\"],\\n   ...     adjective=\\\"daily\\\",\\n   ...     indexer=None,\\n   ...     post_processing=get_time_bounds_updater(\\\"D\\\"),\\n   ...     units=\\\"days\\\",\\n   ...     long_name=\\\"day\\\",\\n   ...     group_by_key=\\\"time.dayofyear\\\",\\n   ...     delta=np.timedelta64(1, \\\"D\\\"),\\n   ... )\\n\\n   .. py:method:: build_frequency_kwargs() -> dict[str, Any]\\n\\n      Build kwargs with possible keys in {\\\"freq\\\", \\\"month\\\", \\\"date_bounds\\\"}.\\n\\n\\n\"}, {\"line\": 118, \"source\": \"./doc/source/references/api/icclim/_core/frequency/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: FrequencyRegistry\\n\\n\\n\\n\\n   Registry class for Frequency objects.\\n\\n   .. py:attribute:: NO_RESAMPLE\\n\\n      Does not resample\\n\\n   .. py:attribute:: HOUR\\n\\n      Resample to hourly values\\n\\n   .. py:attribute:: DAY\\n\\n      Resample to daily values\\n\\n   .. py:attribute:: MONTH\\n\\n      Resample to monthly values\\n\\n   .. py:attribute:: YEAR\\n\\n      Resample to yearly values.\\n\\n   .. py:attribute:: AMJJAS\\n\\n      Resample to summer half-year, from April to September included.\\n\\n   .. py:attribute:: ONDJFM\\n\\n      Resample to winter half-year, from October to March included.\\n\\n   .. py:attribute:: DJF\\n\\n      Resample to winter season, from December to February included.\\n\\n   .. py:attribute:: MAM\\n\\n      Resample to spring season, from March to May included.\\n\\n   .. py:attribute:: JJA\\n\\n      Resample to summer season, from June to Agust included.\\n\\n   .. py:attribute:: SON\\n\\n      Resample to fall season, from September to November included.\\n\\n   .. py:method:: lookup(query: icclim._core.model.icclim_types.FrequencyLike | Frequency) -> Frequency\\n      :classmethod:\\n\\n      Look up a Frequency object based on the query.\\n\\n      :param query: The query to look up the Frequency object. Typically a string.\\n      :type query: FrequencyLike or Frequency\\n\\n      :returns: The Frequency object that matches the query.\\n      :rtype: Frequency\\n\\n      :raises InvalidIcclimArgumentError: If the query is not a valid frequency.\\n\\n      .. rubric:: Notes\\n\\n      The query can be a Frequency object, a string representing a frequency,\\n      or a list/tuple representing a frequency.\\n\\n      If the query is a string, it will be converted to a Frequency object first by\\n      looking in the FrequencyRegistry then by assuming it's a pandas frequency and\\n      building a Frequency object from it.\\n\\n      If the query is a list/tuple, it needs a keyword as its first element and a list\\n      of months or a list of two date strings as its second element. The keyword can\\n      be either \\\"month\\\" or \\\"season\\\".\\n      In \\\"month\\\" case, the second element must be a list of months and the Frequency\\n      will filter the data by these months.\\n      In \\\"season\\\" case, the second element must be a list of months or a list of two\\n      date and the Frequency will resample the data to the season composed of these\\n      months.\\n\\n\\n   .. py:method:: get_item_aliases(item: Frequency) -> list[str]\\n      :staticmethod:\\n\\n      Get the aliases of a Frequency object.\\n\\n      :param item: The Frequency object.\\n      :type item: Frequency\\n\\n      :returns: The aliases of the Frequency object.\\n      :rtype: list[str]\\n\\n\\n\"}, {\"line\": 214, \"source\": \"./doc/source/references/api/icclim/_core/frequency/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _get_delta(pandas_freq: str) -> numpy.timedelta64\\n\\n   Build timedelta from a \\\"pandas frequency\\\" string.\\n\\n   A \\\"pandas frequency\\\" string may look like [\\\"2YS-DEC\\\", \\\"3W-TUE\\\", \\\"M\\\", ... ]\\n   The anchor, such as \\\"DEC\\\" in \\\"YS-DEC\\\", does not modify the delta.\\n\\n   :param pandas_freq:\\n   :type pandas_freq: str\\n   :param The frequency query.:\\n\\n   :returns: * *The timedelta corresponding to this frequency.*\\n             * *For example, \\\"2YS-DEC\\\" would return a 2 years delta.*\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.input_parsing\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Module to parse input data and make it usable for icclim.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: PercentileDataArray(data: Any = dtypes.NA, coords: collections.abc.Sequence[collections.abc.Sequence | pandas.Index | DataArray] | collections.abc.Mapping | None = None, dims: str | collections.abc.Iterable[collections.abc.Hashable] | None = None, name: collections.abc.Hashable | None = None, attrs: collections.abc.Mapping | None = None, indexes: collections.abc.Mapping[Any, xarray.core.indexes.Index] | None = None, fastpath: bool = False)\\n\\n\\n\\n\\n   Wrap xarray DataArray for percentiles values.\\n\\n   .. py:method:: is_compatible(source: xarray.DataArray) -> bool\\n      :classmethod:\\n\\n      Evaluate whether PecentileDataArray is conformant with expected fields.\\n\\n      A PercentileDataArray must have climatology_bounds attributes and either a\\n      quantile or percentiles coordinate, the window is not mandatory.\\n\\n\\n   .. py:method:: from_da(source: xarray.DataArray, climatology_bounds: list[str] | None = None) -> PercentileDataArray\\n      :classmethod:\\n\\n      Create a PercentileDataArray from a xarray.DataArray.\\n\\n      :param source: A DataArray with its content containing percentiles values.\\n                     It must also have a coordinate variable percentiles or quantile.\\n      :type source: xr.DataArray\\n      :param climatology_bounds: Optional. A List of size two which contains the period on which the\\n                                 percentiles were computed. See\\n                                 `xclim.core.calendar.build_climatology_bounds`\\n                                 to build this list from a DataArray.\\n      :type climatology_bounds: list[str]\\n\\n      :returns: The initial `source` DataArray but wrap by PercentileDataArray class.\\n                The data is unchanged and only climatology_bounds attributes is overridden\\n                if q new value is given in inputs.\\n      :rtype: PercentileDataArray\\n\\n\\n\"}, {\"line\": 52, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: guess_var_names(ds: xarray.core.dataset.Dataset, var_names: str | collections.abc.Sequence[str] | None, standard_index: icclim._core.model.standard_index.StandardIndex | None) -> list[collections.abc.Hashable]\\n\\n   Attempt to guess the variable names from the dataset and the standard index.\\n\\n   :param ds: The dataset to guess the variable names from.\\n   :type ds: Dataset\\n   :param var_names: The variable names to use. If None, the function will attempt to guess the\\n                     variable names.\\n   :type var_names: str | Sequence[str] | None\\n   :param standard_index: The standard index to use to guess the variable names.\\n   :type standard_index: StandardIndex | None\\n\\n   :returns: The list of guessed variable names.\\n   :rtype: list[Hashable]\\n\\n\"}, {\"line\": 68, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: read_dataset(in_files: icclim._core.model.icclim_types.InFileBaseType, standard_var: icclim._core.model.standard_variable.StandardVariable | None = None, var_name: str | collections.abc.Sequence[str] | None = None) -> xarray.core.dataset.Dataset\\n\\n   Read a dataset from input files.\\n\\n   :param in_files: The input files to read the dataset from. It can be a single file path,\\n                    a list of file paths, a glob pattern, a netCDF file, or a Zarr store.\\n   :type in_files: InFileBaseType\\n   :param standard_var: The standard variable to use for parsing the dataset, by default None.\\n   :type standard_var: StandardVariable | None, optional\\n   :param var_name: The variable name(s) to extract from the dataset, by default None.\\n   :type var_name: str | Sequence[str] | None, optional\\n\\n   :returns: The parsed dataset.\\n   :rtype: Dataset\\n\\n   :raises NotImplementedError: If the format of `in_files` is not recognized.\\n\\n   .. rubric:: Notes\\n\\n   This function supports reading datasets from various file formats, including\\n   netCDF and Zarr. It can handle single files, multiple files, and glob patterns.\\n   If `standard_var` is provided, it will use the specified standard variable for\\n   parsing the dataset. If `var_name` is provided, it will extract the specified\\n   variable(s) from the dataset.\\n\\n   .. rubric:: Examples\\n\\n   >>> files = [\\\"data1.nc\\\", \\\"data2.nc\\\"]\\n   >>> ds = read_dataset(files, standard_var=\\\"temperature\\\", var_name=\\\"temp\\\")\\n\\n\"}, {\"line\": 99, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: update_to_standard_coords(ds: xarray.core.dataset.Dataset) -> xarray.core.dataset.Dataset\\n\\n   Mutate input ds to use more icclim friendly coordinate names.\\n\\n\"}, {\"line\": 104, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: is_zarr_path(path: icclim._core.model.icclim_types.InFileBaseType) -> bool\\n\\n   Check if the input path is a Zarr store.\\n\\n\"}, {\"line\": 109, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: is_netcdf_path(path: icclim._core.model.icclim_types.InFileBaseType) -> bool\\n\\n   Check if the input path is a netCDF file.\\n\\n\"}, {\"line\": 114, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: is_glob_path(path: icclim._core.model.icclim_types.InFileBaseType) -> bool\\n\\n   Check if the input path is a glob pattern.\\n\\n\"}, {\"line\": 119, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: standardize_percentile_dim_name(per_da: xarray.core.dataarray.DataArray) -> xarray.core.dataarray.DataArray\\n\\n   Standardizes the name of the percentile dimension in the input DataArray.\\n\\n   :param per_da: The input DataArray containing percentile data.\\n   :type per_da: DataArray\\n\\n   :returns: The input DataArray with the percentile dimension standardized.\\n   :rtype: DataArray\\n\\n   :raises InvalidIcclimArgumentError: If the percentile data does not contain a recognizable percentiles dimension.\\n\\n   .. rubric:: Notes\\n\\n   This function standardizes the name of the percentile dimension in the input\\n   DataArray to \\\"percentiles\\\".\\n\\n   If the percentile dimension name contains the word \\\"quantile\\\", the values in the\\n   \\\"percentiles\\\" coordinate are multiplied by 100.\\n\\n\"}, {\"line\": 140, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: get_date_to_iso_format(in_date: str | datetime.datetime) -> str\\n\\n   Get a date in ISO format from a string or a datetime object.\\n\\n   :param in_date: A string representing a date or a datetime object.\\n   :type in_date: str | datetime\\n\\n   :returns: A string representing a date in ISO format.\\n   :rtype: str\\n\\n\"}, {\"line\": 151, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: read_clim_bounds(climatology_bounds: collections.abc.Sequence[str, str] | None, per_da: xarray.DataArray) -> list[str]\\n\\n   Read climatology bounds from input.\\n\\n   The climatology bounds represent the start and end dates of the climatology period.\\n\\n   :param climatology_bounds: The climatology bounds as a sequence of two strings representing the start and\\n                              end dates.\\n                              If None, the climatology bounds will be retrieved from the `climatology_bounds`\\n                              attribute of `per_da`.\\n   :type climatology_bounds: sequence of str or None\\n   :param per_da: The input data array.\\n   :type per_da: xr.DataArray\\n\\n   :returns: A list of climatology bounds converted to ISO format.\\n   :rtype: list of str\\n\\n   :raises InvalidIcclimArgumentError: If the length of `climatology_bounds` is not equal to 2.\\n\\n   .. rubric:: Notes\\n\\n   If `climatology_bounds` is None, the function will attempt to retrieve the\\n   climatology bounds from the `climatology_bounds` attribute of `per_da`.\\n\\n\"}, {\"line\": 176, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: build_input_dict(in_files: icclim._core.model.icclim_types.InFileLike, var_names: collections.abc.Sequence[str] | None, threshold: icclim._core.model.threshold.Threshold | collections.abc.Sequence[icclim._core.model.threshold.Threshold] | None, standard_index: icclim._core.model.standard_index.StandardIndex | None) -> dict[str, icclim._core.model.in_file_dictionary.InFileDictionary]\\n\\n   Build an input dictionary based on the provided input files and variables.\\n\\n   The input dictionary is used to map which input files correspond to which variables.\\n\\n   :param in_files: The input files. It can be a dictionary where the keys represent the variable\\n                    names and the values represent the file paths, or a single file path.\\n   :type in_files: InFileLike\\n   :param var_names: The variable names. If `in_files` is a dictionary, this parameter must be None.\\n                     Otherwise, it should be a sequence of variable names corresponding to the single\\n                     file path.\\n   :type var_names: Sequence[str] | None\\n   :param threshold: The threshold values. It can be a single threshold value, a sequence of\\n                     threshold values, or None.\\n   :type threshold: Threshold | Sequence[Threshold] | None\\n   :param standard_index: The standard index. It can be a standard index value or None.\\n   :type standard_index: StandardIndex | None\\n\\n   :returns: The built input dictionary.\\n   :rtype: dict[str, InFileDictionary]\\n\\n   :raises InvalidIcclimArgumentError: If `var_names` is not None when `in_files` is a dictionary.\\n\\n   .. rubric:: Notes\\n\\n   - If `in_files` is a dictionary, the dictionary keys are used as variable names.\\n   - If `in_files` is a dictionary and the dictionary values are also dictionaries,\\n     the input dictionary is returned as is.\\n   - If `in_files` is a dictionary and the dictionary values are file paths,\\n     the input dictionary is built using the file paths and variable names.\\n   - If `in_files` is a single file path and `var_names` is a single variable name,\\n     the input dictionary is built using the file path and variable name.\\n\\n\"}, {\"line\": 211, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: find_standard_vars(ds: xarray.core.dataset.Dataset) -> list[collections.abc.Hashable]\\n\\n   Find standard variables in a dataset.\\n\\n   :param ds: The input dataset.\\n   :type ds: Dataset\\n\\n   :returns: A list of standard variables found in the dataset.\\n   :rtype: list[Hashable]\\n\\n\"}, {\"line\": 222, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: guess_standard_variable(data: xarray.core.dataarray.DataArray) -> icclim._core.model.standard_variable.StandardVariable | None\\n\\n   Guesses the standard variable based on the metadata of `data`.\\n\\n   :param data: The input data.\\n   :type data: DataArray\\n\\n   :returns: The guessed standard variable, or None if no standard variable is found.\\n   :rtype: StandardVariable or None\\n\\n   .. rubric:: Notes\\n\\n   StandardVariableRegistry is used as a lookup table to find the standard variable\\n   using the dataarray name or standard name attribute.\\n\\n\"}, {\"line\": 238, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: is_precipitation_amount(source: xarray.DataArray) -> bool\\n\\n   Return True if the source is a precipitation amount.\\n\\n   :param source: A DataArray object.\\n   :type source: xr.DataArray\\n\\n   :returns: True if the source is a precipitation amount, False otherwise.\\n   :rtype: bool\\n\\n   .. rubric:: Notes\\n\\n   Using pint, the rate is a quantity with a dimensionality of [time]^-1.\\n\\n\"}, {\"line\": 253, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: build_studied_data(original_da: xarray.core.dataarray.DataArray, time_range: collections.abc.Sequence[datetime.datetime | str] | None, ignore_Feb29th: bool, default_units: str | None) -> xarray.core.dataarray.DataArray\\n\\n   Preprocesss the input data to select the period of interest.\\n\\n   :param original_da: The original data array.\\n   :type original_da: DataArray\\n   :param time_range: The time range to select from the data array. If None, the entire time range is\\n                      used.\\n   :type time_range: Sequence[datetime | str] | None\\n   :param ignore_Feb29th: Whether to ignore February 29th when processing the data.\\n   :type ignore_Feb29th: bool\\n   :param default_units: The default units to use for the data array if it is uniteless.\\n                         If None and the data array is uniteless, \\\"units\\\" attribute remains unset.\\n   :type default_units: str | None\\n\\n   :returns: The processed data array.\\n   :rtype: DataArray\\n\\n   :raises InvalidIcclimArgumentError: If the given `time_range` is out of the dataset time period.\\n\\n\"}, {\"line\": 274, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: get_name_of_first_var(ds: xarray.core.dataset.Dataset) -> str\\n\\n   Get the name of the first variable in the given Dataset.\\n\\n   :param ds: The input Dataset.\\n   :type ds: Dataset\\n\\n   :returns: The name of the first variable in the Dataset.\\n   :rtype: str\\n\\n   :raises IndexError: If the Dataset is empty.\\n\\n\"}, {\"line\": 287, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: is_dataset_path(query: icclim._core.model.icclim_types.InFileBaseType) -> bool\\n\\n   Check if the given query is a valid dataset path.\\n\\n   :param query: The query to check. It can be a single path or a list/tuple of paths.\\n   :type query: InFileBaseType\\n\\n   :returns: True if the query is a valid dataset path, False otherwise.\\n   :rtype: bool\\n\\n   .. rubric:: Notes\\n\\n   A valid dataset path can be either a NetCDF path, a Zarr path, a glob path, or a\\n   list/tuple of valid paths.\\n\\n\"}, {\"line\": 303, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: build_reference_da(original_da: xarray.core.dataarray.DataArray, base_period_time_range: collections.abc.Sequence[datetime.datetime | str] | None, only_leap_years: bool, percentile_min_value: pint.Quantity | None) -> xarray.core.dataarray.DataArray\\n\\n   Build a reference DataArray to be used for percentile doy computation.\\n\\n   :param original_da: The DataArray used as a base.\\n   :type original_da: DataArray\\n   :param base_period_time_range: The period to slice in the base DataArray.\\n   :type base_period_time_range: Sequence[datetime | str] | None\\n   :param only_leap_years: Flag to only use leap years (years with 366 days).\\n   :type only_leap_years: bool\\n   :param percentile_min_value: Optional, if set will replace every value from the base DataArray that are below\\n                                the `percentile_min_value` with np.nan.\\n   :type percentile_min_value: Quantity | None\\n\\n\"}, {\"line\": 318, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: get_dataarray_from_dataset(var_name: str | None, value: xarray.Dataset | str, standard_var: icclim._core.model.standard_variable.StandardVariable | None = None) -> xarray.DataArray\\n\\n   Extract a DataArray from a Dataset based on the provided variable name.\\n\\n   :param var_name: The name of the variable to extract from the Dataset. If None, the function\\n                    will try to guess the variable based on the Dataset's contents.\\n   :type var_name: str or None\\n   :param value: The Dataset object or the path to the Dataset file.\\n   :type value: xr.Dataset or str\\n   :param standard_var: The standard variable used to find a matching variable in the Dataset.\\n   :type standard_var: StandardVariable\\n\\n   :returns: The extracted DataArray.\\n   :rtype: xr.DataArray\\n\\n   :raises InvalidIcclimArgumentError: If the variable name cannot be guessed and `var_name` is None.\\n\\n   .. rubric:: Notes\\n\\n   This function can be used to extract a specific variable from a Dataset object\\n   or a Dataset file. If `var_name` is None, the function will try to guess the\\n   variable based on the Dataset's contents.\\n\\n\"}, {\"line\": 342, \"source\": \"./doc/source/references/api/icclim/_core/input_parsing/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _guess_dataset_var_names(standard_index: icclim._core.model.standard_index.StandardIndex, ds: xarray.core.dataset.Dataset) -> list[collections.abc.Hashable]\\n\\n   Try to guess the variable names.\\n\\n   The expected kind of variable of the index is used to guess the variable names.\"}, {\"line\": 3, \"source\": \"./doc/source/references/api/icclim/_core/generic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic\\n\\n\"}, {\"line\": 11, \"source\": \"./doc/source/references/api/icclim/_core/generic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   functions/index.rst\\n   generic_templates/index.rst\\n   indicator/index.rst\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/generic/generic_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/generic/generic_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic.generic_templates\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/generic_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Jinja templates for the metadata of generic indices.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/generic/generic_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: IndicatorMetadata\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/generic/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/generic/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic.indicator\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the GenericIndicator class.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/generic/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: GenericIndicator(name: str, process: Callable[Ellipsis, xarray.DataArray], definition: str, check_vars: Callable[[list[icclim._core.climate_variable.ClimateVariable], GenericIndicator], None] | None = None, sampling_methods: list[str] | None = None, missing: str = 'from_context', missing_options: dict | None = None, qualifiers: tuple = ())\\n\\n\\n\\n\\n   GenericIndicator are climate indicators wich are not specific to a particular domain.\\n\\n   They can be computed from any climate variable and are combined with `Threshold` objects\\n   to create personalized indicators.\\n\\n   :param name: The name of the indicator.\\n   :type name: str\\n   :param process: The function that processes the indicator.\\n   :type process: Callable[..., DataArray]\\n   :param definition: The definition of the indicator.\\n   :type definition: str\\n   :param check_vars: A function that checks if the variables meet the indicator requirements.\\n                      Defaults to None.\\n   :type check_vars: Callable[[list[ClimateVariable], GenericIndicator], None], optional\\n   :param sampling_methods: A list of sampling methods that can be used with the indicator.\\n                            Defaults to None.\\n   :type sampling_methods: list[str], optional\\n   :param missing: The method for handling missing values. Defaults to \\\"from_context\\\".\\n   :type missing: str, optional\\n   :param missing_options: Additional options for handling missing values. Defaults to None.\\n   :type missing_options: dict, optional\\n   :param qualifiers: Additional qualifiers for the indicator. Defaults to ().\\n   :type qualifiers: tuple, optional\\n\\n   .. attribute:: missing\\n\\n      The method for handling missing values.\\n\\n      :type: str\\n\\n   .. attribute:: missing_options\\n\\n      Additional options for handling missing values.\\n\\n      :type: dict | None\\n\\n   .. py:method:: preprocess(climate_vars: list[icclim._core.climate_variable.ClimateVariable], jinja_scope: dict[str, Any], output_frequency: icclim._core.frequency.Frequency, src_freq: icclim._core.frequency.Frequency, output_unit: str | None, coef: float | None, sampling_method: str) -> list[icclim._core.climate_variable.ClimateVariable]\\n\\n      Preprocesses the climate variables before computing the indicator.\\n\\n      :param climate_vars: The list of climate variables to be preprocessed.\\n      :type climate_vars: list[ClimateVariable]\\n      :param jinja_scope: The Jinja scope used for formatting the template.\\n      :type jinja_scope: dict[str, Any]\\n      :param output_frequency: The desired frequency of the output.\\n      :type output_frequency: Frequency\\n      :param src_freq: The source frequency of the climate variables.\\n      :type src_freq: Frequency\\n      :param output_unit: The desired output unit of the indicator. If None, no unit conversion is\\n                          performed.\\n      :type output_unit: str | None\\n      :param coef: The coefficient to multiply the climate variable data with. If None,\\n                   no multiplication is performed.\\n      :type coef: float | None\\n      :param sampling_method: The sampling method used for some specific indicators.\\n                              See `difference_of_means` for example.\\n      :type sampling_method: str\\n\\n      :returns: The preprocessed climate variables.\\n      :rtype: list[ClimateVariable]\\n\\n\\n   .. py:method:: postprocess(result: xarray.DataArray, climate_vars: list[icclim._core.climate_variable.ClimateVariable], output_freq: str, src_freq: str, indexer: dict, out_unit: str | None) -> xarray.DataArray\\n\\n      Postprocesses the result of the indicator computation.\\n\\n      :param result: The result of the indicator computation.\\n      :type result: DataArray\\n      :param climate_vars: The list of climate variables used for the computation.\\n      :type climate_vars: list[ClimateVariable]\\n      :param output_freq: The desired output frequency of the postprocessed result.\\n      :type output_freq: str\\n      :param src_freq: The source frequency of the input data.\\n      :type src_freq: str\\n      :param indexer: The indexer used to subset the input data.\\n      :type indexer: dict\\n      :param out_unit: The desired output unit of the postprocessed result.\\n                       If None, no unit conversion is performed.\\n      :type out_unit: str | None\\n\\n      :returns: The postprocessed result.\\n      :rtype: DataArray\\n\\n\\n\"}, {\"line\": 105, \"source\": \"./doc/source/references/api/icclim/_core/generic/indicator/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _check_cf(climate_vars: list[icclim._core.climate_variable.ClimateVariable]) -> None\\n\\n   Compare metadata attributes to CF-Convention standards.\\n\\n   Default cfchecks use the specifications in `xclim.core.utils.VARIABLES`,\\n   assuming the indicator's inputs are using the CMIP6/xclim variable names\\n   correctly.\\n   Variables absent from these default specs are silently ignored.\\n\\n   When subclassing this method, use functions decorated using\\n   `xclim.core.options.cfcheck`.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic.functions\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Implementations of the generic indices computation methods.\\n\\n   These functions are not meant to be called directly, they are used by the\\n   `GenericIndicatorRegistry` class to create the generic indices.\\n   Each function is a reducer that takes a list of `ClimateVariable` instances and returns\\n   a `DataArray` instance.\\n   The `ClimateVariable` instances are used to extract the data and the thresholds needed\\n   to compute the generic index.\\n   The `DataArray` instance is the result of the computation of the generic index.\\n\\n   .. note::\\n\\n      You can call the respective generic index from icclim module, for example:\\n      `icclim.count_occurrences(...)`.\\n\\n\\n\"}, {\"line\": 28, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: count_occurrences(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, logical_link: icclim._core.model.logical_link.LogicalLink, date_event: bool, to_percent: bool, **kwargs) -> xarray.DataArray\\n\\n   Count the occurrences of exceedances of the threshold(s).\\n\\n   :param climate_vars: The list of climate variables containing the data and the threshold(s).\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The time frequency of the output.\\n   :type resample_freq: Frequency\\n   :param logical_link: The logical link to apply to the exceedances if multiple thresholds are\\n                        provided.\\n   :type logical_link: LogicalLink\\n   :param date_event: Whether to return the date of the event.\\n   :type date_event: bool\\n   :param to_percent: Whether to return the result in percent.\\n   :type to_percent: bool\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: The count of occurrences of exceedances.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 50, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: max_consecutive_occurrence(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, logical_link: icclim._core.model.logical_link.LogicalLink, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\\n\\n   Calculate the maximum number of consecutive occurrences of exceedances for a given set of climate variables.\\n\\n   :param climate_vars: The list of climate variables containing the data and the threshold(s).\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The time frequency of the output.\\n   :type resample_freq: Frequency\\n   :param logical_link: The logical link to apply when merging the exceedances.\\n   :type logical_link: LogicalLink\\n   :param date_event: Whether to include the dates of the exceedances in the result.\\n   :type date_event: bool\\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\\n   :type source_freq_delta: timedelta\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: The maximum number of consecutive occurrences of exceedances.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 71, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: sum_of_spell_lengths(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, logical_link: icclim._core.model.logical_link.LogicalLink, min_spell_length: int, **kwargs) -> xarray.DataArray\\n\\n   Calculate the sum of the lengths of all spells in the data.\\n\\n   This function calculates the sum of the lengths of all spells in the data,\\n   where a spell is defined as a consecutive occurrence of exceedances.\\n\\n   :param climate_vars: The list of climate variables containing the data and the threshold(s).\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The time frequency of the output.\\n   :type resample_freq: Frequency\\n   :param logical_link: The logical link to apply when merging the exceedances.\\n   :type logical_link: LogicalLink\\n   :param min_spell_length: The minimum length of a spell to consider.\\n   :type min_spell_length: int\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: The sum of the lengths of all spells in the data.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 93, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: excess(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Compute the excess of a climate variable above a threshold using the 'reach' operator.\\n\\n   :param climate_vars: List of climate variables. Only the first variable is used.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The time frequency of the output.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: DataArray containing the computed excess values.\\n   :rtype: DataArray\\n\\n   :raises InvalidIcclimArgumentError: If the threshold operator is not 'reach'.\\n\\n   .. rubric:: Notes\\n\\n   The excess is computed by subtracting the threshold from the climate variable data.\\n   Only the values above the threshold are considered, and negative values are set to\\n   zero.\\n   The resulting excess values are then summed over the specified resample frequency.\\n\\n\"}, {\"line\": 117, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: deficit(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Compute the deficit of a climate variable below a threshold using the 'reach' operator.\\n\\n   :param climate_vars: List of climate variables. Only the first variable is used.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The time frequency of the output.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: DataArray containing the computed deficit values.\\n   :rtype: DataArray\\n\\n   .. rubric:: Notes\\n\\n   The deficit is computed by subtracting the climate variable data from the threshold.\\n   Only the values below the threshold are considered, and negative values are set to\\n   zero.\\n   The resulting deficit values are then summed over the specified resample frequency.\\n\\n\"}, {\"line\": 139, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: fraction_of_total(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, to_percent: bool, **kwargs) -> xarray.DataArray\\n\\n   Calculate the fraction of total for a given set of climate variables.\\n\\n   :param climate_vars: The list of climate variables containing the data and the threshold(s).\\n                        Only one variable is expected in the list.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The resampling frequency.\\n   :type resample_freq: Frequency\\n   :param to_percent: Flag indicating whether to convert the result to percentage.\\n   :type to_percent: bool\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: The fraction of total as a DataArray.\\n   :rtype: DataArray\\n\\n   .. rubric:: Notes\\n\\n   This function calculates the fraction of total for a given set of climate variables.\\n   The fraction of total is calculated by dividing the sum of values exceeding a\\n   threshold by the total sum of values.\\n\\n   If the `to_percent` flag is set to True, the result will be multiplied by 100 and\\n   the units will be set to \\\"%\\\". Otherwise, the units will be set to the value of\\n   PART_OF_A_WHOLE_UNIT, which is 1.\\n\\n\"}, {\"line\": 167, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: maximum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, date_event: bool, **kwargs) -> xarray.DataArray\\n\\n   Calculate the maximum value of the given climate variables.\\n\\n   :param climate_vars: List of climate variables to calculate the maximum value for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param date_event: Flag indicating whether the output should include the date of the events.\\n   :type date_event: bool\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: The maximum value of the climate variables.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 184, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: minimum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, date_event: bool, **kwargs) -> xarray.DataArray\\n\\n   Calculate the minimum value of the given climate variables.\\n\\n   :param climate_vars: List of climate variables to calculate the minimum value for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param date_event: Flag indicating whether the output should include the date of the events.\\n   :type date_event: bool\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: The minimum value of the climate variables.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 201, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: average(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Compute the average of the given climate variables.\\n\\n   :param climate_vars: List of climate variables to compute the average for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The computed average as a DataArray.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 215, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: generic_sum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Compute the sum of the given climate variables.\\n\\n   :param climate_vars: List of climate variables to compute the sum for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The computed sum as a DataArray.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 229, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: standard_deviation(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Compute the standard deviation of the given climate variables.\\n\\n   This function calculates the standard deviation of the provided climate variables.\\n   The standard deviation is a measure of the amount of variation or dispersion in the\\n   data.\\n   It quantifies the amount of variation or spread in the values of the climate\\n   variables.\\n\\n   :param climate_vars: List of climate variables to compute the standard deviation for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The computed standard deviation as a DataArray.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 249, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: max_of_rolling_sum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, rolling_window_width: int, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\\n\\n   Compute the maximum value of the rolling sum of the given climate variables.\\n\\n   The rolling sum is the sum of values over a specified rolling window width.\\n   The maximum value is the highest value obtained from the rolling sum.\\n\\n   :param climate_vars: List of climate variables to compute the maximum value of the rolling sum for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param rolling_window_width: The width of the rolling window, i.e., the number of values to include in each\\n                                rolling sum.\\n   :type rolling_window_width: int\\n   :param date_event: A flag indicating whether the date of the events should be included in the\\n                      output.\\n   :type date_event: bool\\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\\n                             For daily data this is 1 day, for monthly data this is 1 month, etc.\\n   :type source_freq_delta: timedelta\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The computed maximum value of the rolling sum as a DataArray.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 275, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: min_of_rolling_sum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, rolling_window_width: int, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\\n\\n   Compute the minimum value of the rolling sum of the given climate variables.\\n\\n   The rolling sum is the sum of values over a specified rolling window width.\\n   The minimum value is the lowest value obtained from the rolling sum.\\n\\n   :param climate_vars: List of climate variables to compute the minimum value of the rolling sum for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param rolling_window_width: The width of the rolling window, i.e., the number of values to include in each\\n                                rolling sum.\\n   :type rolling_window_width: int\\n   :param date_event: A flag indicating whether the date of the events should be included in the\\n                      output.\\n   :type date_event: bool\\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\\n                             For daily data this is 1 day, for monthly data this is 1 month, etc.\\n   :type source_freq_delta: timedelta\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The computed minimum value of the rolling sum as a DataArray.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 301, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: min_of_rolling_average(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, rolling_window_width: int, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\\n\\n   Compute the minimum value of the rolling average of the given climate variables.\\n\\n   The rolling average is the average of values over a specified rolling window width.\\n   The minimum value is the lowest value obtained from the rolling average.\\n\\n   :param climate_vars: List of climate variables to compute the minimum value of the rolling average\\n                        for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param rolling_window_width: The width of the rolling window, i.e., the number of values to include in each\\n                                rolling average.\\n   :type rolling_window_width: int\\n   :param date_event: A flag indicating whether the date of the events should be included in the\\n                      output.\\n   :type date_event: bool\\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\\n                             For daily data this is 1 day, for monthly data this is 1 month, etc.\\n   :type source_freq_delta: timedelta\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The computed minimum value of the rolling average as a DataArray.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 328, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: max_of_rolling_average(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, rolling_window_width: int, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\\n\\n   Compute the minimum value of the rolling average of the given climate variables.\\n\\n   The rolling average is the average of values over a specified rolling window width.\\n   The minimum value is the lowest value obtained from the rolling average.\\n\\n   :param climate_vars: List of climate variables to compute the minimum value of the rolling average\\n                        for.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param rolling_window_width: The width of the rolling window, i.e., the number of values to include in each\\n                                rolling average.\\n   :type rolling_window_width: int\\n   :param date_event: A flag indicating whether the date of the events should be included in the\\n                      output.\\n   :type date_event: bool\\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\\n                             For daily data this is 1 day, for monthly data this is 1 month, etc.\\n   :type source_freq_delta: timedelta\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The computed minimum value of the rolling average as a DataArray.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 355, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: mean_of_difference(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Calculate the mean of the difference between two climate variables.\\n\\n   This function calculates the mean of the difference between two climate variables\\n   for each time step, and then resamples the resulting data based on the specified\\n   frequency.\\n   The resulting data array will have the same units as the study variable.\\n\\n   :param climate_vars: The two climate variables necessary to compute the indicator.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: Resampling frequency of the output.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: The mean of the difference as a xarray.DataArray.\\n   :rtype: DataArray\\n\\n   .. rubric:: Notes\\n\\n   This is a generification of ECAD's DTR climate index.\\n\\n\"}, {\"line\": 379, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: difference_of_extremes(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Calculate the difference of extremes between two climate variables.\\n\\n   :param climate_vars: A list of climate variables.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: The frequency at which to resample the data.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The difference of extremes between the two climate variables.\\n   :rtype: DataArray\\n\\n   .. rubric:: Notes\\n\\n   This function calculates the difference of extremes between two climate variables.\\n   It first resamples the study variable to the specified frequency and take the\\n   maximum per resampled chunk.\\n   Then it resamples the reference variable to the same frequency and take the minimum\\n   per resampled chunk.\\n   Finally, for each chunk, it calculates the differences of theses maximum and\\n   minimum values.\\n   This is a generification of ECAD's ETR climate index.\\n\\n\"}, {\"line\": 404, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: mean_of_absolute_one_time_step_difference(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Mean of the absolute one-time-step difference between two climate variables.\\n\\n   This function calculates the mean of the absolute difference between two climate\\n   variables\\n   for each time step, and then resamples the resulting data based on the specified\\n   frequency.\\n   The resulting data array will have the same units as the study variable.\\n\\n   :param climate_vars: The two climate variables necessary to compute the indicator.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: Resampling frequency of the output.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n   :type \\\\*\\\\*kwargs: dict\\n\\n   :returns: The mean of the absolute one-time-step difference as a xarray.DataArray.\\n   :rtype: DataArray\\n\\n   .. rubric:: Notes\\n\\n   This is a generification of ECAD's vDTR climate index.\\n\\n\"}, {\"line\": 429, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: difference_of_means(climate_vars: list[icclim._core.climate_variable.ClimateVariable], to_percent: bool, resample_freq: icclim._core.frequency.Frequency, sampling_method: str, is_compared_to_reference: bool, **kwargs) -> xarray.DataArray\\n\\n   Calculate the difference of means between two climate variables.\\n\\n   :param climate_vars: A studied climate variable and a reference climate variable.\\n   :type climate_vars: list[ClimateVariable]\\n   :param to_percent: If True, the result will be converted to percentage.\\n   :type to_percent: bool\\n   :param resample_freq: Resampling frequency of the output.\\n   :type resample_freq: Frequency\\n   :param sampling_method: The method used for resampling. It can be either 'group_by', 'resample', or\\n                           'group_by_ref_and_resample_study'.\\n                           'group_by' will group the data by the specified frequency, for example every\\n                           data of every January together.\\n                           'resample' will resample the data to the specified frequency, for example every\\n                           days of each month independently together.\\n                           'group_by_ref_and_resample_study' will group the reference data by the specified\\n                           frequency and resample the study data to the same frequency.\\n                           This last method allows for example to compare each January, independently, of\\n                           the study period to every January of the reference period.\\n                           This is typically used to compare the each month of the studied period\\n                           to a normal (the reference) of many aggregated years.\\n   :type sampling_method: str\\n   :param is_compared_to_reference: If True, check if the sampling method is 'resample' and raise an error if it is.\\n                                    It does not make sense to resample the reference variable if it is already a\\n                                    subsample of the studied variable.\\n   :type is_compared_to_reference: bool\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The difference of means between the two climate variables.\\n   :rtype: DataArray\\n\\n   .. rubric:: Notes\\n\\n   This is a generification of the anomaly climate index.\\n\\n\"}, {\"line\": 466, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: percentile(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\\n\\n   Calculate the percentile of the given climate variable.\\n\\n   :param climate_vars: A single climate variable within a list.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: Resampling frequency of the output.\\n   :type resample_freq: Frequency\\n   :param \\\\*\\\\*kwargs: Ignored keyword arguments (for compatibility).\\n\\n   :returns: The calculated percentile as a DataArray.\\n   :rtype: DataArray\\n\\n   .. rubric:: Notes\\n\\n   This function calculates the percentile of the given climate variables\\n   by resampling the data based on the provided frequency and then\\n   calculating the corresponding quantile using the specified interpolation method.\\n\\n   The resulting DataArray contains the percentiles as the 'percentiles'\\n   coordinate variable.\\n\\n\"}, {\"line\": 489, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: get_couple_of_var(climate_vars: list[icclim._core.climate_variable.ClimateVariable], indicator: str) -> tuple[xarray.DataArray, xarray.DataArray]\\n\\n   Get exactly two climate variables to compute a climate indicator.\\n\\n   :param climate_vars: A list of climate variables.\\n   :type climate_vars: list[ClimateVariable]\\n   :param indicator: The name of the indicator to be computed.\\n   :type indicator: str\\n\\n   :returns: A tuple containing two DataArray objects representing the study variable and\\n             the reference variable.\\n   :rtype: tuple[DataArray, DataArray]\\n\\n   :raises InvalidIcclimArgumentError: If the number of climate variables is not equal to 2.\\n       If any of the two variable has a threshold.\\n\\n   .. rubric:: Notes\\n\\n   This function is used to extract a couple of climate variables needed for computing\\n   an indicator.\\n   The function checks the number of climate variables and raises an error\\n   if it is not equal to 2 or if thresholds are present.\\n\\n\"}, {\"line\": 513, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _run_simple_reducer(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, reducer_op: Callable[Ellipsis, xarray.DataArray], date_event: bool, must_convert_rate: bool = False) -> xarray.DataArray\\n\\n   Apply a simple reducer operation on climate variables.\\n\\n   :param climate_vars: List of climate variables to be processed.\\n   :type climate_vars: list[ClimateVariable]\\n   :param resample_freq: Frequency at which the data should be resampled.\\n   :type resample_freq: Frequency\\n   :param reducer_op: Reducer operation to be applied on the data.\\n   :type reducer_op: Callable[..., DataArray]\\n   :param date_event: Flag indicating whether the date when the event occurred should be added\\n                      as a coordinate variable.\\n                      Only works for `max` and `min` reducers.\\n                      Defaults to False.\\n   :type date_event: bool\\n   :param must_convert_rate: Flag indicating whether the data should be converted from rate to amount.\\n                             Defaults to False.\\n   :type must_convert_rate: bool, optional\\n\\n   :returns: Result of the reducer operation applied on the climate variables.\\n   :rtype: DataArray\\n\\n\"}, {\"line\": 536, \"source\": \"./doc/source/references/api/icclim/_core/generic/functions/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: get_single_var(climate_vars: list[icclim._core.climate_variable.ClimateVariable]) -> tuple[xarray.DataArray, icclim._core.model.threshold.Threshold | None]\\n\\n   Get the single variable and its threshold (if available).\\n\\n   :param climate_vars: A list of ClimateVariable objects.\\n   :type climate_vars: list[ClimateVariable]\\n\\n   :returns: A tuple containing the single variable's data array and its threshold\\n             (if available).\\n   :rtype: tuple[DataArray, Threshold | None]\"}, {\"line\": 3, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic.threshold\\n\\n\"}, {\"line\": 11, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   basic/index.rst\\n   bounded/index.rst\\n   percentile/index.rst\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/basic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/basic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic.threshold.basic\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/basic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   BasicThreshold module.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/basic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: BasicThreshold(operator: icclim._core.model.operator.Operator | str, value: icclim._core.model.threshold.ThresholdValueType, unit: str | None = None, initial_query: str | None = None, threshold_min_value: pint.Quantity | None = None, threshold_var_name: str | None = None, offset: pint.Quantity | None = None, **kwargs)\\n\\n\\n\\n\\n   Pint ready simple threshold (e.g. \\\"> 300 K\\\").\\n\\n   :param operator: The operator used for the threshold comparison.\\n   :type operator: Operator or str\\n   :param value: The threshold value(s) to compare against.\\n   :type value: ThresholdValueType\\n   :param unit: The unit of the threshold value(s).\\n   :type unit: str, optional\\n   :param initial_query: The initial query used to build the threshold.\\n   :type initial_query: str, optional\\n   :param threshold_min_value: The minimum value for the threshold.\\n   :type threshold_min_value: pint.Quantity, optional\\n   :param threshold_var_name: The name of the threshold variable.\\n   :type threshold_var_name: str, optional\\n   :param offset: The offset to be applied to the threshold value(s).\\n   :type offset: pint.Quantity, optional\\n\\n   .. rubric:: Notes\\n\\n   When built, `value` is always turned into a `xarray.DataArray`.\\n   The `unit` property has a setter that will attempt a unit conversion using\\n   units found in xclim's pint registry.\\n\\n   The actual unit can be overridden by modifying `value.attrs[\\\"units\\\"]` directly.\\n\\n   .. py:property:: unit\\n      :type: str | None\\n\\n      The unit of the threshold value(s).\\n\\n   .. py:method:: format_metadata(jinja_scope: dict[str, Any], jinja_env: jinja2.Environment, **kwargs) -> icclim._core.generic.threshold.threshold_templates.ThresholdMetadata\\n\\n      Generate the metadata for the threshold.\\n\\n      These metadata are used to fill the generic template.\\n\\n      :param jinja_scope: The jinja scope, it contains the variables to be used in the jinja template.\\n      :type jinja_scope: dict\\n      :param jinja_env: The jinja environment, it contains the jinja rendering engine.\\n      :type jinja_env: jinja2.Environment\\n      :param \\\\*\\\\*kwargs: Additional keyword arguments, ignored for compatibility with other\\n                         `format_metadata` methods.\\n\\n      :returns: The metadata for the threshold.\\n      :rtype: ThresholdMetadata\\n\\n\\n   .. py:method:: compute(comparison_data: xarray.DataArray, override_op: Callable[[xarray.DataArray, xarray.DataArray], xarray.DataArray] | None = None, **kwargs) -> xarray.DataArray\\n\\n      Compute the threshold exceedance value.\\n\\n      :param comparison_data: The data array to compare with the threshold value.\\n      :type comparison_data: xr.DataArray\\n      :param override_op: A custom override function to compute the threshold value.\\n                          If provided, this function will be used instead of the default operator.\\n      :type override_op: Callable[[DataArray, DataArray], DataArray] | None, optional\\n      :param \\\\*\\\\*kwargs: Additional keyword arguments.\\n\\n      :returns: The computed threshold value.\\n      :rtype: DataArray\\n\\n      .. rubric:: Notes\\n\\n      If `override_op` is not None, the `override_op` function will be used to\\n      compute the threshold exceedance using the `comparison_data` and `self.value`\\n      as inputs.\\n      If `override_op` is None, the default operator defined in `self.operator`\\n      will be used to compute the threshold exceedance.\"}, {\"line\": 3, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic.threshold.threshold_templates\\n\\n\"}, {\"line\": 12, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: ThresholdMetadata\\n\\n\\n\\n\\n   TypedDict of the threshold metadata.\\n\\n   Used to fill the threshold template.\\n\\n   .. attribute:: long_name\\n\\n      Long name of the threshold\\n\\n      :type: str\\n\\n   .. attribute:: short_name\\n\\n      Short name of the threshold\\n\\n      :type: str\\n\\n   .. attribute:: standard_name\\n\\n      Standard name of the threshold. Ressemble the CF convention standard names, but is not actually standard.\\n\\n      :type: str\\n\\n\"}, {\"line\": 40, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: ThresholdTemplateDict\\n\\n\"}, {\"line\": 43, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: PercentileTemplateConfig\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/percentile/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/percentile/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic.threshold.percentile\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/percentile/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Percentile based threshold module.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/percentile/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: PercentileThreshold(operator: str | icclim._core.model.operator.Operator, value: xarray.DataArray | float | collections.abc.Sequence[float], unit: str | None = None, doy_window_width: int = DEFAULT_DOY_WINDOW, only_leap_years: bool = False, interpolation: icclim._core.model.quantile_interpolation.QuantileInterpolation | str = QuantileInterpolationRegistry.MEDIAN_UNBIASED, reference_period: collections.abc.Sequence[datetime.datetime | str] | None = None, threshold_min_value: pint.Quantity | None = None, initial_query: str | None = None, threshold_var_name: str | None = None, **kwargs)\\n\\n\\n\\n\\n   Percentile based threshold (e.g. \\\"<= 10 doy_per\\\").\\n\\n   The percentiles to be computed are expected to be either:\\n\\n   * \\\"doy percentiles\\\" (unit: \\\"doy_per\\\"). They are usually used for temperatures\\n     indices such as the ECAD :ref:`tx90p <ecad_functions_api>`.\\n     These percentiles are computed per day of year (doy) and by aggregating\\n     values on the time axis ranged by ``reference_period``, using the\\n     ``doy_window_width`` parameter to control the time axis window of aggregation.\\n     The resulting `value` is a DataArray with a \\\"dayofyear\\\" dimension ranging from\\n     0 to 365 with one value per day of the year.\\n   * \\\"period percentiles\\\" (unit: \\\"period_per\\\"). They are usually used for liquide\\n     precipitation indices such as the ECAD :ref:`r75p <ecad_functions_api>`\\n     or even :ref:`r75ptot <ecad_functions_api>`.\\n     These percentiles are computed per grid cell on the period ranged by\\n     ``reference_period``.\\n     The resulting ``value`` is a DataArray with per grid cell values and no time axis.\\n\\n   ``is_ready`` becomes True when `prepare` method has been called, the actual\\n   percentiles are then computed and accessible in ``value`` property.\\n   Once ``is_ready`` is True, ``unit`` property can be set and will attempt a pint unit\\n   conversion similar to what is done on ``BasicThreshold``.\\n   Before that, setting unit has no effect.\\n\\n   .. py:property:: unit\\n      :type: str | None\\n\\n      The unit of the threshold.\\n\\n   .. py:property:: value\\n      :type: icclim._core.input_parsing.PercentileDataArray\\n\\n      The computed percentile threshold.\\n\\n      :raises RuntimeError: If the threshold is not ready (prepare has not been called).\\n\\n   .. py:method:: prepare(studied_data: xarray.DataArray) -> None\\n\\n      Prepare the data for calculating percentiles.\\n\\n      :param studied_data: The input data to be prepared.\\n      :type studied_data: DataArray\\n\\n      :raises NotImplementedError: If the percentile unit is unknown.\\n\\n      :rtype: None\\n\\n\\n   .. py:method:: format_metadata(*, jinja_scope: dict[str, Any], jinja_env: jinja2.Environment, src_freq: icclim._core.frequency.Frequency, must_run_bootstrap: bool = False, **kwargs) -> icclim._core.generic.threshold.threshold_templates.ThresholdMetadata\\n\\n      Generate the metadata for the threshold.\\n\\n      These metadata are used to fill the generic template.\\n\\n      :param jinja_scope: The jinja scope, it contains the variables to be used in the jinja template.\\n      :type jinja_scope: dict\\n      :param jinja_env: The jinja environment, it contains the jinja rendering engine.\\n      :type jinja_env: jinja2.Environment\\n      :param src_freq: The frequency of the source data.\\n      :type src_freq: Frequency\\n      :param must_run_bootstrap: Whether to run bootstrap, by default False.\\n      :type must_run_bootstrap: bool, optional\\n\\n      :returns: The metadata for the threshold.\\n      :rtype: ThresholdMetadata\\n\\n\\n   .. py:method:: compute(comparison_data: xarray.DataArray, override_op: Callable[[xarray.DataArray, xarray.DataArray], xarray.DataArray] | None = None, **kwargs) -> xarray.DataArray\\n\\n      Compute the percentile threshold.\\n\\n      :param comparison_data: The data array to compare with the threshold.\\n      :type comparison_data: xr.DataArray\\n      :param override_op: An optional override operator to use instead of the default operator.\\n      :type override_op: Callable[[DataArray, DataArray], DataArray] | None, optional\\n      :param \\\\*\\\\*kwargs: Additional keyword arguments.\\n                         The `freq` parameter is used to specify the frequency of the data.\\n                         The `bootstrap` parameter is used to specify whether to run bootstrap.\\n\\n      :returns: The computed percentile threshold.\\n      :rtype: DataArray\\n\\n      :raises RuntimeError: If the PercentileThreshold is not ready. You must first call `.prepare`\\n          with a `studied_data` parameter in order to prepare the threshold\\n          for computation.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/bounded/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/bounded/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim._core.generic.threshold.bounded\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/bounded/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   BoundedThreshold module.\\n\\n   A `BoundedThreshold` is a composite threshold that binds two other thresholds\\n   for example \\\"> 95 doy_per AND >= 30 deg_C\\\".\\n\\n\\n\"}, {\"line\": 18, \"source\": \"./doc/source/references/api/icclim/_core/generic/threshold/bounded/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: BoundedThreshold(thresholds: collections.abc.Sequence[icclim._core.model.threshold.Threshold | str | icclim._core.model.threshold.ThresholdBuilderInput], logical_link: icclim._core.model.logical_link.LogicalLink, initial_query: str | None, **kwargs)\\n\\n\\n\\n\\n   Threshold that binds two other thresholds (e.g. \\\"> 95 doy_per AND >= 30 deg_C\\\").\\n\\n   The logical link must be either \\\"and\\\" or \\\"or\\\".\\n\\n   .. py:property:: unit\\n      :type: str | None\\n\\n      The unit of the bounded threshold.\\n\\n      :returns: The unit of the threshold if both thresholds have the same unit,\\n                otherwise None.\\n      :rtype: str | None\\n\\n   .. py:method:: compute(comparison_data: xarray.DataArray, override_op: Callable[[xarray.DataArray, xarray.DataArray], xarray.DataArray] | None = None, **kwargs) -> xarray.DataArray\\n\\n      Compute the threshold exceedance value.\\n\\n      Uses the logical link to combine the result of both thresholds.\\n\\n      :param comparison_data: The data array to compare with the threshold value.\\n      :type comparison_data: xr.DataArray\\n      :param override_op: A custom override function to compute the threshold value.\\n                          If provided, this function will be used instead of the default operator.\\n      :type override_op: Callable[[DataArray, DataArray], DataArray] | None, optional\\n      :param \\\\*\\\\*kwargs: Additional keyword arguments.\\n\\n      :returns: The computed threshold value.\\n      :rtype: DataArray\\n\\n      .. rubric:: Notes\\n\\n      If `override_op` is not None, the `override_op` function will be used to\\n      compute the thresholds exceedances on both thresholds.\\n\\n\\n   .. py:method:: format_metadata(*, jinja_scope: dict[str, Any], jinja_env: jinja2.Environment, **kwargs) -> icclim._core.generic.threshold.threshold_templates.ThresholdMetadata\\n\\n      Generate the metadata for the bounded threshold.\\n\\n      These metadata are used to fill the generic template.\\n\\n      :param jinja_scope: The jinja scope, it contains the variables to be used in the jinja template.\\n      :type jinja_scope: dict\\n      :param jinja_env: The jinja environment, it contains the jinja rendering engine.\\n      :type jinja_env: jinja2.Environment\\n      :param \\\\*\\\\*kwargs: Additional keyword arguments, ignored for compatibility with other\\n                         `format_metadata` methods.\\n\\n      :returns: The metadata for the threshold.\\n      :rtype: ThresholdMetadata\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/main/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/main/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.main\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/main/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Main entry point of icclim.\\n\\n   This module expose icclim principal function, notably `index` which is use by the\\n   generated API.\\n   A convenience function `indices` is also exposed to compute multiple indices at once.\\n\\n\\n\"}, {\"line\": 19, \"source\": \"./doc/source/references/api/icclim/main/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: indices(index_group: collections.abc.Sequence[str] | str | icclim._core.model.index_group.IndexGroup | icclim._core.model.standard_index.StandardIndex, *, ignore_error: bool = False, **kwargs) -> xarray.core.dataset.Dataset\\n\\n   Compute multiple indices at the same time.\\n\\n   The input dataset(s) must include all the necessary variables.\\n   It can only be used with keyword arguments (kwargs).\\n\\n   :param index_group: Either the name of an IndexGroup or an instance of IndexGroup or a list\\n                       of index short names or the name(s) of standard variable(s) (such as 'tasmax').\\n                       The value \\\"all\\\" can also be used to compute every indices.\\n                       Note that the input given by ``in_files`` must include all the necessary\\n                       variables to compute the indices of this group.\\n   :type index_group: \\\"all\\\" | str | IndexGroup | list[str]\\n   :param ignore_error: When True, ignore indices that fails to compute. This is option is particularly\\n                        useful when used with `index_group='all'` to compute everything that can be\\n                        computed given the input.\\n   :type ignore_error: bool\\n   :param kwargs: ``icclim.index`` keyword arguments.\\n   :type kwargs: Dict\\n\\n   :returns: A Dataset with one data variable per index.\\n   :rtype: xr.Dataset\\n\\n   .. rubric:: Notes\\n\\n   If ``output_file`` is part of kwargs, the result is written in a single netCDF\\n   file, which will contain all the index results of this group.\\n\\n\"}, {\"line\": 48, \"source\": \"./doc/source/references/api/icclim/main/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: indice(*args, **kwargs) -> xarray.core.dataset.Dataset\\n\\n   Proxy for `icclim.index` function.\\n\\n   Deprecated: to be deleted in a future release.\\n\\n\"}, {\"line\": 55, \"source\": \"./doc/source/references/api/icclim/main/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: index(in_files: icclim._core.model.icclim_types.InFileLike, index_name: str | icclim._core.generic.indicator.GenericIndicator | icclim._core.model.standard_index.StandardIndex | None = None, var_name: str | collections.abc.Sequence[str] | None = None, slice_mode: icclim._core.model.icclim_types.FrequencyLike | icclim._core.frequency.Frequency = 'year', time_range: collections.abc.Sequence[datetime.datetime | str] | None = None, out_file: str | None = None, threshold: str | icclim._core.model.threshold.Threshold | collections.abc.Sequence[str | icclim._core.model.threshold.Threshold] | None = None, callback: Callable[[int], None] = log.callback, callback_percentage_start_value: int = 0, callback_percentage_total: int = 100, base_period_time_range: collections.abc.Sequence[datetime.datetime] | collections.abc.Sequence[str] | None = None, doy_window_width: int = 5, only_leap_years: bool = False, ignore_Feb29th: bool = False, interpolation: str | icclim._core.model.quantile_interpolation.QuantileInterpolation = 'median_unbiased', out_unit: str | None = None, netcdf_version: str | icclim._core.model.netcdf_version.NetcdfVersion = 'NETCDF4', user_index: icclim._core.legacy.user_index.model.UserIndexDict | None = None, save_thresholds: bool = False, logs_verbosity: icclim.logger.Verbosity | str = 'LOW', date_event: bool = False, min_spell_length: int | None = 6, rolling_window_width: int | None = 5, sampling_method: icclim._core.model.icclim_types.SamplingMethodLike = RESAMPLE_METHOD, *, window_width: int | None = None, save_percentile: bool | None = None, indice_name: str | None = None, user_indice: icclim._core.legacy.user_index.model.UserIndexDict | None = None, transfer_limit_Mbytes: float | None = None) -> xarray.core.dataset.Dataset\\n\\n   Compute climate index.\\n\\n   This is the main entry point for icclim.\\n\\n   :param in_files: Absolute path(s) to NetCDF dataset(s), including OPeNDAP URLs,\\n                    or path to zarr store, or xarray.Dataset or xarray.DataArray.\\n   :type in_files: str | list[str] | Dataset | DataArray | InputDictionary\\n   :param index_name: Climate index name.\\n                      For ECA&D index, case insensitive name used to lookup the index.\\n                      For user index, it's the name of the output variable.\\n   :type index_name: str | StandardIndex\\n   :param var_name: ``optional`` Target variable name to process corresponding to ``in_files``.\\n                    If None (default) on ECA&D index, the variable is guessed based on the\\n                    climate index wanted.\\n                    Mandatory for a user index.\\n   :type var_name: str | list[str] | None\\n   :param slice_mode: Type of temporal aggregation:\\n                      The possibles values are ``{\\\"year\\\", \\\"month\\\", \\\"DJF\\\", \\\"MAM\\\", \\\"JJA\\\", \\\"SON\\\",\\n                      \\\"ONDJFM\\\" or \\\"AMJJAS\\\", (\\\"season\\\", [1,2,3]), (\\\"month\\\", [1,2,3,])}``\\n                      (where season and month lists can be customized) or any valid pandas\\n                      frequency.\\n                      A season can also be defined between two exact dates:\\n                      ``(\\\"season\\\", (\\\"19 july\\\", \\\"14 august\\\"))``.\\n                      Default is \\\"year\\\".\\n                      See :ref:`slice_mode` for details.\\n   :type slice_mode: FrequencyLike | Frequency\\n   :param time_range: ``optional`` Temporal range: upper and lower bounds for temporal subsetting.\\n                      If ``None``, whole period of input files will be processed.\\n                      The dates can either be given as instance of datetime.datetime or as string\\n                      values. For strings, many format are accepted.\\n                      Default is ``None``.\\n   :type time_range: list[datetime.datetime ] | list[str]  | tuple[str, str] | None\\n   :param out_file: Output NetCDF file name (default: \\\"icclim_out.nc\\\" in the current directory).\\n                    Default is \\\"icclim_out.nc\\\".\\n                    If the input ``in_files`` is a ``Dataset``, ``out_file`` field is ignored.\\n                    Use the function returned value instead to retrieve the computed value.\\n                    If ``out_file`` already exists, icclim will overwrite it!\\n   :type out_file: str | None\\n   :param threshold: ``optional`` User defined threshold for certain indices.\\n                     Default depend on the index, see their individual definition.\\n                     When a list of threshold is provided, the index will be computed for each\\n                     thresholds.\\n   :type threshold: float | list[float] | None\\n   :param transfer_limit_Mbytes: Deprecated, does not have any effect.\\n   :type transfer_limit_Mbytes: float\\n   :param callback: ``optional`` Progress bar printing. If ``None``, progress bar will not be\\n                    printed.\\n   :type callback: Callable[[int], None]\\n   :param callback_percentage_start_value: ``optional`` Initial value of percentage of the progress bar (default: 0).\\n   :type callback_percentage_start_value: int\\n   :param callback_percentage_total: ``optional`` Total percentage value (default: 100).\\n   :type callback_percentage_total: int\\n   :param base_period_time_range: ``optional`` Temporal range of the reference period.\\n                                  The dates can either be given as instance of datetime.datetime or as string\\n                                  values.\\n                                  It is used either:\\n                                  #. to compute percentiles if threshold is filled.\\n                                  When missing, the studied period is used to compute percentiles.\\n                                  The study period is either the dataset filtered by `time_range` or the whole\\n                                  dataset if `time_range` is missing.\\n                                  For day of year percentiles (doy_per), on extreme percentiles the\\n                                  overlapping period between `base_period_time_range` and the study period is\\n                                  bootstrapped.\\n                                  #. to compute a reference period for indices such as difference_of_mean\\n                                  (a.k.a anomaly) if a single variable is given in input.\\n   :type base_period_time_range: list[datetime.datetime ] | list[str] | tuple[str, str] | None\\n   :param doy_window_width: ``optional`` Window width used to aggreagte day of year values when computing\\n                            day of year percentiles (doy_per)\\n                            Default: 5 (5 days).\\n   :type doy_window_width: int\\n   :param min_spell_length: ``optional`` Minimum spell duration to be taken into account when computing\\n                            the sum_of_spell_lengths.\\n   :type min_spell_length: int\\n   :param rolling_window_width: ``optional`` Window width of the rolling window for indicators such as\\n                                `{max_of_rolling_sum, max_of_rolling_average, min_of_rolling_sum, min_of_rolling_average}`\\n   :type rolling_window_width: int\\n   :param only_leap_years: ``optional`` Option for February 29th (default: False).\\n   :type only_leap_years: bool\\n   :param ignore_Feb29th: ``optional`` Ignoring or not February 29th (default: False).\\n   :type ignore_Feb29th: bool\\n   :param interpolation: ``optional`` Interpolation method to compute percentile values:\\n                         ``{\\\"linear\\\", \\\"median_unbiased\\\"}``\\n                         Default is \\\"median_unbiased\\\", a.k.a type 8 or method 8.\\n                         Ignored for non percentile based indices.\\n   :type interpolation: str | QuantileInterpolation | None\\n   :param out_unit: ``optional`` Output unit for certain indices: \\\"days\\\" or \\\"%\\\"\\n                    (default: \\\"days\\\").\\n   :type out_unit: str | None\\n   :param netcdf_version: ``optional`` NetCDF version to create (default: \\\"NETCDF3_CLASSIC\\\").\\n   :type netcdf_version: str | NetcdfVersion\\n   :param user_index: ``optional`` A dictionary with parameters for user defined index.\\n                      See :ref:`Custom indices`.\\n                      Ignored for ECA&D indices.\\n   :type user_index: UserIndexDict\\n   :param save_thresholds: ``optional`` True if the thresholds should be saved within the resulting\\n                           netcdf file (default: False).\\n   :type save_thresholds: bool\\n   :param date_event: When True the date of the event (such as when a maximum is reached) will be\\n                      stored in coordinates variables.\\n                      **warning** This option may significantly slow down computation.\\n   :type date_event: bool\\n   :param logs_verbosity: ``optional`` Configure how verbose icclim is.\\n                          Possible values: ``{\\\"LOW\\\", \\\"HIGH\\\", \\\"SILENT\\\"}`` (default: \\\"LOW\\\")\\n   :type logs_verbosity: str | Verbosity\\n   :param sampling_method: Choose whether the output sampling configured in `slice_mode` is a\\n                           `groupby` operation or a `resample` operation (as per xarray definitions).\\n                           Possible values:\\n                           ``{\\\"groupby\\\", \\\"resample\\\", \\\"groupby_ref_and_resample_study\\\"}``\\n                           (default: \\\"resample\\\")\\n                           `groupby_ref_and_resample_study` may only be used when computing the\\n                           `difference_of_means` (a.k.a the anomaly).\\n   :type sampling_method: str\\n   :param indice_name: DEPRECATED, use index_name instead.\\n   :type indice_name: str | None\\n   :param user_indice: DEPRECATED, use user_index instead.\\n   :type user_indice: dict | None\\n   :param window_width: DEPRECATED, use doy_window_width, min_spell_length or rolling_window_width\\n                        instead.\\n   :type window_width: int\\n   :param save_percentile: DEPRECATED, use save_thresholds instead.\\n   :type save_percentile: bool\\n\\n\"}, {\"line\": 180, \"source\": \"./doc/source/references/api/icclim/main/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _write_output_file(result_ds: xarray.Dataset, input_time_encoding: dict | None, netcdf_version: icclim._core.model.netcdf_version.NetcdfVersion, file_path: str) -> None\\n\\n   Write `result_ds` to a netCDF file on `out_file` path.\\n\\n\"}, {\"line\": 185, \"source\": \"./doc/source/references/api/icclim/main/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: _must_add_reference_var(climate_vars_dict: dict[str, icclim._core.model.in_file_dictionary.InFileDictionary], reference_period: collections.abc.Sequence[str] | None) -> bool\\n\\n   Check if the reference variable must be added to the input variables.\\n\\n   Return True whenever the input has no threshold and only one studied variable but\\n   there is a reference period.\\n   Example case: the anomaly of tx(1960-2100) by tx(1960-1990).\"}, {\"line\": 3, \"source\": \"./doc/source/references/api/icclim/ecad/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/ecad/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.ecad\\n\"}, {\"line\": 8, \"source\": \"./doc/source/references/api/icclim/ecad/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   European Climate Assesment & Dataset (ECAD) indices.\\n\\n   The ECAD indices public API, via `icclim.ecad` package, is generated from the\\n   `icclim.ecad.registry.EcadIndexRegistry` registry definitions.\\n   The parameters of the functions are specialized to each index but are all taken from\\n   `icclim.main.index` general function.\\n   In other words, the ECAD indices in `icclim.ecad` package are specializations\\n   of `icclim.main.index` for ECAD indices.\\n\\n\\n\"}, {\"line\": 23, \"source\": \"./doc/source/references/api/icclim/ecad/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   binding/index.rst\\n   registry/index.rst\\n\\n\"}, {\"line\": 35, \"source\": \"./doc/source/references/api/icclim/ecad/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"automodule\\\".\", \"full_message\": \"Unknown directive type \\\"automodule\\\".\\n\\n.. automodule:: icclim._generated._ecad\\n   :members:\\n\\n   .. autosummary::\\n    :nosignatures:\\n\\n    .. Documentation below is auto-generated with the extract-icclim-funs.py script\\n    .. Generated API comment:Begin\\n      tg\\n     tn\\n     tx\\n     dtr\\n     etr\\n     vdtr\\n     su\\n     tr\\n     wsdi\\n     tg90p\\n     tn90p\\n     tx90p\\n     txx\\n     tnx\\n     csu\\n     gd4\\n     fd\\n     cfd\\n     hd17\\n     id\\n     tg10p\\n     tn10p\\n     tx10p\\n     txn\\n     tnn\\n     csdi\\n     cdd\\n     prcptot\\n     rr1\\n     sdii\\n     cwd\\n     rr\\n     r10mm\\n     r20mm\\n     rx1day\\n     rx5day\\n     r75p\\n     r75ptot\\n     r95p\\n     r95ptot\\n     r99p\\n     r99ptot\\n     sd\\n     sd1\\n     sd5cm\\n     sd50cm\\n     cd\\n     cw\\n     wd\\n     ww\\n     fxx\\n     fg6bft\\n     fgcalm\\n     fg\\n     ddnorth\\n     ddeast\\n     ddsouth\\n     ddwest\\n     gsl\\n     spi6\\n     spi3\\n     pp\\n     ss\\n     rh\\n\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/ecad/binding/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/ecad/binding/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.ecad.binding\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/ecad/binding/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Proxy icclim indicators that redirect to xclim indicators.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/ecad/binding/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: GrowingSeasonLength\\n\\n\\n\\n\\n   Proxy for xclim.growing_season_length.\\n\\n   icclim indicator that redirect to xclim `growing_season_length` indicator.\\n\\n   .. py:method:: preprocess(*args, **kwargs) -> list[xarray.DataArray]\\n      :abstractmethod:\\n\\n      Not implemented as xclim indicator already handle pre/post processing.\\n\\n\\n   .. py:method:: postprocess(*args, **kwargs) -> xarray.DataArray\\n      :abstractmethod:\\n\\n      Not implemented as xclim indicator already handle pre/post processing.\\n\\n\\n\"}, {\"line\": 37, \"source\": \"./doc/source/references/api/icclim/ecad/binding/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: StandardizedPrecipitationIndex3\\n\\n\\n\\n\\n   Proxy for xclim.atmos.standardized_precipitation_index.\\n\\n   icclim indicator that redirect to xclim `standardized_precipitation_index`\\n   indicator, with 3 MS frequency preconfigured.\\n\\n   .. py:method:: preprocess(*args, **kwargs) -> list[xarray.DataArray]\\n      :abstractmethod:\\n\\n      Not implemented as xclim indicator already handle pre/post processing.\\n\\n\\n   .. py:method:: postprocess(*args, **kwargs) -> xarray.DataArray\\n      :abstractmethod:\\n\\n      Not implemented as xclim indicator already handle pre/post processing.\\n\\n\\n\"}, {\"line\": 60, \"source\": \"./doc/source/references/api/icclim/ecad/binding/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: StandardizedPrecipitationIndex6\\n\\n\\n\\n\\n   Proxy for xclim.atmos.standardized_precipitation_index.\\n\\n   icclim indicator that redirect to xclim `standardized_precipitation_index`\\n   indicator, with 6 MS configured.\\n\\n   .. py:method:: preprocess(*args, **kwargs) -> list[xarray.DataArray]\\n      :abstractmethod:\\n\\n      Not implemented as xclim indicator already handle pre/post processing.\\n\\n\\n   .. py:method:: postprocess(*args, **kwargs) -> xarray.DataArray\\n      :abstractmethod:\\n\\n      Not implemented as xclim indicator already handle pre/post processing.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/ecad/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/ecad/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.ecad.registry\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/ecad/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Module for the ECA&D indices.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/ecad/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: EcadIndexRegistry\\n\\n\\n\\n\\n   Registry for ECAD indices.\\n\\n   This class represents a registry for ECAD indices. It provides a collection of\\n   standard indices used for climate analysis.\\n\\n   .. py:method:: get_item_aliases(item: icclim._core.model.standard_index.StandardIndex) -> list[str]\\n      :staticmethod:\\n\\n      Get the aliases of an item.\\n\\n\\n   .. py:method:: to_list() -> list[str]\\n      :classmethod:\\n\\n      Get a printable list of all indices in the registry.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/exception/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/exception/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.exception\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/exception/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain icclim-specific exceptions.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/exception/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:exception\\\".\", \"full_message\": \"Unknown directive type \\\"py:exception\\\".\\n\\n.. py:exception:: InvalidIcclimArgumentError(msg: str, source_err: Exception | None = None)\\n\\n\\n\\n\\n   Exception raised for erroneous input arguments.\\n\\n   .. attribute:: msg\\n\\n      Error description.\\n\\n      :type: str\\n\\n   .. attribute:: source_err\\n\\n      The source of the error, if any.\\n\\n      :type: Exception or None, optional\\n\\n   .. method:: __str__()\\n\\n      Returns a string representation of the error message.\"}, {\"line\": 3, \"source\": \"./doc/source/references/api/icclim/dcsc/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/dcsc/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.dcsc\\n\"}, {\"line\": 8, \"source\": \"./doc/source/references/api/icclim/dcsc/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Direction de la Climatologie et des Services Climatiques (DCSC) indices.\\n\\n   Meteo France's Direction de la Climatologie et des Services Climatiques (DCSC)\\n   specialized indices.\\n\\n   The DCSC indices public API, via the `icclim.dcsc` package, is generated from the\\n   `icclim.dcsc.registry.DcscIndexRegistry` registry definitions.\\n   The parameters  of the functions are specialized to each index but are all taken from\\n   `icclim.main.index` general function.\\n   In other words, the DCSC indices in `icclim.dcsc` module are specializations of\\n   `icclim.main.index` for DCSC indices.\\n\\n\\n\"}, {\"line\": 26, \"source\": \"./doc/source/references/api/icclim/dcsc/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   registry/index.rst\\n\\n\"}, {\"line\": 36, \"source\": \"./doc/source/references/api/icclim/dcsc/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"automodule\\\".\", \"full_message\": \"Unknown directive type \\\"automodule\\\".\\n\\n.. automodule:: icclim._generated._dcsc\\n   :members:\\n\\n   .. autosummary::\\n    :nosignatures:\\n\\n    .. Documentation below is auto-generated with the extract-icclim-funs.py script\\n    .. Generated API comment:Begin\\n\\n     tav\\n     txav\\n     trav\\n     tx10\\n     tx90\\n     tn10\\n     tn90\\n     tnfd\\n     txfd\\n     sd\\n     tx35\\n     tr\\n     txnd\\n     tnht\\n     tnnd\\n     tncwd\\n     txhwd\\n     hdd\\n     cdd\\n     pav\\n     pint\\n     rr\\n     rr1mm\\n     pn20mm\\n     pxcdd\\n     pxcwd\\n     r99\\n     pfl90\\n     pq90\\n     pq99\\n     ffav\\n     ff98\\n\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/dcsc/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/dcsc/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.dcsc.registry\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/dcsc/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the registry of the DCSC (Meteo France) specific indices.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/dcsc/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: DcscIndexRegistry\\n\\n\\n\\n\\n   Registry of the DCSC (Meteo France) specific indices.\\n\\n   .. note:: The indices metadata of this module are in French.\\n\\n   .. py:method:: get_item_aliases(item: icclim._core.model.standard_index.StandardIndex) -> list[str]\\n      :staticmethod:\\n\\n      Duck-typed method to get the aliases of a StandardIndex item.\\n\\n      :param item: The StandardIndex item.\\n      :type item: StandardIndex\\n\\n      :returns: The aliases of the item.\\n      :rtype: list[str]\\n\\n      .. rubric:: Notes\\n\\n      Every StandardIndex registry should implement this method.\"}, {\"line\": 3, \"source\": \"./doc/source/references/api/icclim/generic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/generic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.generic\\n\"}, {\"line\": 8, \"source\": \"./doc/source/references/api/icclim/generic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Generic indices.\\n\\n   The generic indices public API, via `icclim.generic` package, is generated from the\\n   `icclim.generic.registry.GenericIndicatorRegistry` registry definitions.\\n   icclim's generic indices are a generalization of the climate indices found in\\n   ECAD and DCSC's registries.\\n   They can be computed on any dataset and make use of the `Threshold` interface\\n   to enable the creation of personalized indices.\\n   The parameters of the functions are specialized to each index but are all taken from\\n   `icclim.main.index` general function.\\n   In other words, the generic indices in `icclim.generic` package are specializations\\n   of `icclim.main.index` for ECAD indices.\\n\\n   .. rubric:: Examples\\n\\n   >>> from icclim.generic import count_occurrences\\n   >>> from icclim import build_threshold\\n   >>> thresh = build_threshold(\\\">= 25 \\u00b0C and <= 30 \\u00b0C\\\")\\n   >>> result = count_occurrences(\\\"tas.nc\\\", thresh).compute()\\n   >>> print(result.count_occurrences)\\n\\n\\n\"}, {\"line\": 35, \"source\": \"./doc/source/references/api/icclim/generic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   registry/index.rst\\n\\n\"}, {\"line\": 45, \"source\": \"./doc/source/references/api/icclim/generic/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"automodule\\\".\", \"full_message\": \"Unknown directive type \\\"automodule\\\".\\n\\n.. automodule:: icclim._generated._generic\\n   :members:\\n\\n   .. autosummary::\\n    :nosignatures:\\n\\n    .. Documentation below is auto-generated with the extract-icclim-funs.py script\\n    .. Generated API comment:Begin\\n\\n    count_occurrences\\n    max_consecutive_occurrence\\n    sum_of_spell_lengths\\n    excess\\n    deficit\\n    fraction_of_total\\n    maximum\\n    minimum\\n    average\\n    sum\\n    standard_deviation\\n    max_of_rolling_sum\\n    min_of_rolling_sum\\n    max_of_rolling_average\\n    min_of_rolling_average\\n    mean_of_difference\\n    difference_of_extremes\\n    mean_of_absolute_one_time_step_difference\\n    difference_of_means\\n    percentile\\n    custom_index\\n\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/generic/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/generic/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.generic.registry\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/generic/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Contain the registry of generic indicators.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/generic/registry/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: GenericIndicatorRegistry\\n\\n\\n\\n\\n   Registry of generic indicators.\"}, {\"line\": 3, \"source\": \"./doc/source/references/api/icclim/logger/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/logger/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.logger\\n\\n\"}, {\"line\": 12, \"source\": \"./doc/source/references/api/icclim/logger/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: VerbosityRegistry\\n\\n\\n\\n\\n   Registry classes acts as fancy enums.\\n\\n   It allows to easily store and find constants of similar type.\\n   Registries are namespaces, so there is no need to instantiate it or any of\\n   its subclasses, every item is a class attribute.\\n\\n   .. rubric:: Notes\\n\\n   Registries are not meant to store large collections, they are just fancy lookup\\n   tables for items with aliases and no case sensitivity.\\n\\n   .. py:method:: get_item_aliases(item: Verbosity) -> list[str]\\n      :staticmethod:\\n\\n      Get the aliases for the given item.\\n\\n      :param item: The item to get aliases for.\\n      :type item: T\\n\\n      :returns: A list of aliases for the item.\\n      :rtype: list[str]\\n\\n      .. rubric:: Notes\\n\\n      Should be overridden in subclasses.\\n\\n\\n\"}, {\"line\": 45, \"source\": \"./doc/source/references/api/icclim/logger/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:class\\\".\", \"full_message\": \"Unknown directive type \\\"py:class\\\".\\n\\n.. py:class:: IcclimLogger(verbosity: Verbosity)\\n\\n\\n   Singleton to display and control logs in icclim library.\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.threshold\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Threshold package.\\n\\n   This package contains the threshold definitions used in conjunction with generic indices\\n   to create personalized indices.\\n\\n\\n\"}, {\"line\": 17, \"source\": \"./doc/source/references/api/icclim/threshold/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :titlesonly:\\n   :maxdepth: 1\\n\\n   factory/index.rst\"}, {\"line\": 1, \"source\": \"./doc/source/references/api/icclim/threshold/factory/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"py:mod\\\".\", \"full_message\": \"Unknown interpreted text role \\\"py:mod\\\".\"}, {\"line\": 4, \"source\": \"./doc/source/references/api/icclim/threshold/factory/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:module\\\".\", \"full_message\": \"Unknown directive type \\\"py:module\\\".\\n\\n.. py:module:: icclim.threshold.factory\\n\"}, {\"line\": 6, \"source\": \"./doc/source/references/api/icclim/threshold/factory/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\", \"full_message\": \"Unknown directive type \\\"autoapi-nested-parse\\\".\\n\\n.. autoapi-nested-parse::\\n\\n   Factory to build a `Threshold` from a query or from its components.\\n\\n\\n\"}, {\"line\": 15, \"source\": \"./doc/source/references/api/icclim/threshold/factory/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"py:function\\\".\", \"full_message\": \"Unknown directive type \\\"py:function\\\".\\n\\n.. py:function:: build_threshold(query: str | None = None, *, operator: icclim._core.model.operator.Operator | str | None = None, value: icclim._core.model.threshold.ThresholdValueType = None, unit: str | None = None, threshold_min_value: str | float | pint.Quantity | None = None, thresholds: collections.abc.Sequence[icclim._core.model.threshold.Threshold | str] | None = None, logical_link: str | icclim._core.model.logical_link.LogicalLink | None = None, offset: str | float | pint.Quantity | None = None, **kwargs) -> icclim._core.generic.threshold.bounded.BoundedThreshold | icclim._core.generic.threshold.percentile.PercentileThreshold | icclim._core.generic.threshold.basic.BasicThreshold\\n\\n   Build a `Threshold`.\\n\\n   This function is a factory for `Threshold` instances.\\n   It can build a `BasicThreshold`, a `PercentileThreshold` or a `BoundedThreshold`.\\n   See :ref:`generic_indices_recipes` for how to combine thresholds with generic\\n   indices.\\n\\n   :param query: string query describing a threshold.\\n                 It must include: an operator, a threshold value and optionally a unit\\n                 such as \\\"> 10 degC\\\".\\n                 It acts as a shorthand for ``operator``, ``value`` and ``unit`` parameters for\\n                 simple threshold.\\n                 Don't use ``query`` when value is a DataArray, a Dataset or a path to a\\n                 netcdf/zarr storage, instead use ``operator``, ``value`` and ``unit``.\\n                 ``query`` supersede `operator`, `value` and `unit` parameters.\\n   :type query: str | None = None\\n   :param operator: keyword argument only.\\n                    The operator either as an instance of Operator or as a compatible string.\\n                    See :py:class:`OperatorRegistry` for the list of all operators.\\n                    When ``query`` is None and operator is None, the default ``Operator.REACH`` is\\n                    used.\\n   :type operator: Operator | str = None\\n   :param value: keyword argument only.\\n                 The threshold value(s), default to None.\\n                 It can be:\\n                 * a simple scalar threshold\\n                 * a percentile that will be computed per-grid cell (in combinaison with `unit`)\\n                 * per-grid cell thresholds defined by a DataArray, a Dataset or a string path to\\n                 a netcdf/zarr.\\n                 * a sequence of scalars, the indicator will then be computed for each value and\\n                 a specific dimension will be created (also work with percentiles).\\n   :type value: str | float | int | Dataset | DataArray | Sequence[float | int | str] | None\\n   :param unit: Keyword argument only.\\n                The threshold unit.\\n                When ``unit`` is None, if ``value`` is a dataset and a \\\"units\\\"\\n                can be read from its `attrs`, this unit will be used. If value is a scalar or\\n                a sequence of scalar, the exceedance will be computed by assuming threshold has\\n                the same unit as the studied value is it compared to.\\n                When unit is a string it must be a valid unit of our shared pint registry with\\n                xclim or a special percentile unit:\\n                * \\\"doy_per\\\" for day of year percentiles (in ECAD, used for temperature indices\\n                such as TX90p)\\n                * \\\"period_per\\\" for per period percentiles (in ECAD, used for rain indices such\\n                as R75p)\\n   :type unit: str | None = None\\n   :param threshold_min_value: A minimum value used to pre-filter computed threshold values.\\n                               This is particularly useful to compute a percentile threshold for rain where\\n                               dry days are usually ignored. In that case threshold_min_value would be set to\\n                               \\\"1 mm/day\\\".\\n                               If threshold_min_value is a number, ``unit`` is used to quantify\\n                               ``threshold_min_value``.\\n   :type threshold_min_value: str | float | pint.Quantity\\n   :param offset: Optional. An offset applied to the threshold. This is particularly useful when\\n                  the threshold is an existing dataset (netcdf file or zarr store) and the data\\n                  should be compared to this dataset + an offset\\n                  (e.g. to compute days when T > 5 degC above normal)\\n   :type offset: float | None\\n   :param kwargs: Additional arguments to build a PercentileThreshold.\\n                  See :py:class:`PercentileThreshold` constructor for the complete list\\n                  of possible arguments.\\n\\n   .. rubric:: Examples\\n\\n   .. code-block:: python\\n\\n       # -- Scalar threshold\\n       scalar_t = build_threshold(\\\">= 30 degC\\\")\\n       assert isinstance(scalar_t, BasicThreshold)\\n\\n       # -- Daily percentile threshold\\n       doy_t = build_threshold(\\\">= 30 doy_per\\\")\\n       assert isinstance(doy_t, PercentileThreshold)\\n\\n       # -- Per grid-cell threshold, with offset\\n       grided_t = build_threshold(\\n           operator=\\\">=\\\", value=\\\"path/to/tasmax_thresholds.nc\\\", unit=\\\"K\\\", offset=5\\n       )\\n       assert isinstance(grided_t, BasicThreshold)\\n\\n       # -- Daily percentile threshold, from a file\\n       tasmax = xarray.open_dataset(\\\"path/to/tasmax_thresholds.nc\\\").tasmax\\n       doys = xclim.core.calendar.percentile_doy(tasmax)\\n       doy_file_t = build_threshold(operator=\\\">=\\\", value=doys)\\n       assert isinstance(doy_file_t, PercentileThreshold)\\n\\n       # -- Bounded threshold\\n       bounded_t = build_threshold(\\\">= -20 degree AND <= 20 degree \\\")\\n       # equivalent to:\\n       x = build_threshold(\\\">= -20 degree\\\")\\n       y = build_threshold(\\\"<= 20 degree\\\")\\n       bounded_t2 = x & y\\n       assert bounded_t == bounded_t2\\n       # equivalent to:\\n       bounded_t3 = build_threshold(thresholds=[x, y], logical_link=\\\"AND\\\")\\n       assert bounded_t == bounded_t3\\n       assert isinstance(bounded_t, BoundedThreshold)\"}, {\"line\": 7, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 10, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 25, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 40, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 54, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 66, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 76, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 83, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 96, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 109, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 123, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 144, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 161, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 179, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 197, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 218, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 240, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 261, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 283, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 302, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 321, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 340, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 359, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 367, \"source\": \"./doc/source/how_to/recipes_generic.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 9, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 12, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 21, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 54, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 85, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 113, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 155, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 199, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 239, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 265, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 303, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 334, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 364, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 404, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 463, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 466, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 502, \"source\": \"./doc/source/how_to/recipes_custom.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 10, \"source\": \"./doc/source/how_to/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 10, \"source\": \"./doc/source/how_to/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 14, \"source\": \"./doc/source/how_to/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :maxdepth: 2\\n   :caption: How to\\n\\n   Chunk data and parallelize computation <dask>\\n   Run our jupyter notebooks <notebooks>\\n   Compute ECA&D indices <recipes_ecad>\\n   Compute Generic indices <recipes_generic>\\n   Use icclim through OCGIS <ocgis>\\n   Create customized indices (deprecated) <recipes_custom>\"}, {\"line\": 17, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 63, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 73, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 92, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 112, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 163, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 256, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 318, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 333, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 354, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 406, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 413, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 442, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 464, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 513, \"source\": \"./doc/source/how_to/dask.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 12, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 20, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 40, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 54, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 62, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 82, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 88, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 94, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 110, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 129, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 161, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 172, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 182, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 198, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 228, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 236, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 263, \"source\": \"./doc/source/how_to/ocgis.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 5, \"source\": \"./doc/source/how_to/recipes_ecad.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 14, \"source\": \"./doc/source/how_to/recipes_ecad.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 54, \"source\": \"./doc/source/how_to/recipes_ecad.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 98, \"source\": \"./doc/source/how_to/recipes_ecad.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 151, \"source\": \"./doc/source/how_to/recipes_ecad.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 220, \"source\": \"./doc/source/how_to/recipes_ecad.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 237, \"source\": \"./doc/source/how_to/recipes_ecad.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 24, \"source\": \"./doc/source/tutorials/installation.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 46, \"source\": \"./doc/source/tutorials/installation.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 52, \"source\": \"./doc/source/tutorials/installation.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 58, \"source\": \"./doc/source/tutorials/installation.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 64, \"source\": \"./doc/source/tutorials/installation.rst\", \"level\": 2, \"type\": \"WARNING\", \"message\": \"Cannot analyze code. Pygments package not found.\", \"full_message\": \"Cannot analyze code. Pygments package not found.\"}, {\"line\": 7, \"source\": \"./doc/source/tutorials/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 11, \"source\": \"./doc/source/tutorials/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :maxdepth: 1\\n   :caption: Contents:\\n\\n   installation\\n   notebooks/averaged_tas_anomaly\\n   notebooks/deltaT_deltaP_anomaly\\n   notebooks/tg90p_calculate__subset_and_plot\\n   notebooks/custom_freezing_tas\\n   notebooks/cold_spell_duration\\n   notebooks/su_summer_days__subset_and_plot\\n   notebooks/DCSC_txnn\"}, {\"line\": 22, \"source\": \"./doc/source/explanation/climate_indices.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"seealso\\\".\", \"full_message\": \"Unknown directive type \\\"seealso\\\".\\n\\n.. seealso::\\n\\n  - `Climate Variability and Predictability (CLIVAR) <https://www.clivar.org/clivar-panels/etccdi/indices-data/indices-data>`_\\n  - `Expert Team on Climate Change Detection and Indices (ETCCDI) <https://etccdi.pacificclimate.org/>`_\\n  - `European Climate Assessment & Dataset (ECA&D) <https://www.ecad.eu>`_\\n  - `ATBD ECA&D indices <https://knmi-ecad-assets-prd.s3.amazonaws.com/documents/atbd.pdf>`_\\n  - `Article about percentile-based indices <http://etccdi.pacificclimate.org/docs/Zhangetal05JumpPaper.pdf>`_\\n  - `Sample quantiles in statistical packages <https://www.amherst.edu/media/view/129116/original/Sample+Quantiles.pdf>`_\"}, {\"line\": 7, \"source\": \"./doc/source/explanation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 10, \"source\": \"./doc/source/explanation/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :maxdepth: 2\\n   :caption: Contents:\\n\\n   climate_indices\\n   xclim_and_icclim\\n   4.2.x_installation\"}]",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/70/log?consoleFull"
                                },
                                "level": "RECOMMENDED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": [
                                {
                                    "line": 27,
                                    "source": "./README.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 8,
                                    "source": "./.github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 9,
                                    "source": "./.github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 10,
                                    "source": "./.github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 11,
                                    "source": "./.github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 12,
                                    "source": "./.github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 13,
                                    "source": "./.github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 89,
                                    "source": "./.github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 31,
                                    "source": "./doc/source/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   tutorials/index\n   how_to/index\n   references/index\n   explanation/index\n   dev/index\n"
                                },
                                {
                                    "line": 51,
                                    "source": "./doc/source/dev/release_process.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 57,
                                    "source": "./doc/source/dev/release_process.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 10,
                                    "source": "./doc/source/dev/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   release_process\n   ci\n   contributing"
                                },
                                {
                                    "line": 8,
                                    "source": ".github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 9,
                                    "source": ".github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 10,
                                    "source": ".github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 11,
                                    "source": ".github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 12,
                                    "source": ".github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 13,
                                    "source": ".github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 89,
                                    "source": ".github/CONTRIBUTING.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 52,
                                    "source": "./doc/source/references/output_metadata.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 72,
                                    "source": "./doc/source/references/output_metadata.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 93,
                                    "source": "./doc/source/references/output_metadata.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 109,
                                    "source": "./doc/source/references/output_metadata.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 141,
                                    "source": "./doc/source/references/output_metadata.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 168,
                                    "source": "./doc/source/references/output_metadata.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 5,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"func\".",
                                    "full_message": "Unknown interpreted text role \"func\"."
                                },
                                {
                                    "line": 5,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 13,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 21,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autofunction\".",
                                    "full_message": "Unknown directive type \"autofunction\".\n\n.. autofunction:: icclim.index(**kwargs)\n   :noindex:\n"
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 45,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:func\".",
                                    "full_message": "Unknown interpreted text role \"py:func\"."
                                },
                                {
                                    "line": 45,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:class\".",
                                    "full_message": "Unknown interpreted text role \"py:class\"."
                                },
                                {
                                    "line": 51,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 58,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 65,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:class\".",
                                    "full_message": "Unknown interpreted text role \"py:class\"."
                                },
                                {
                                    "line": 74,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 81,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 144,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 161,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 171,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 205,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 211,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 225,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 259,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 259,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 259,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 265,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 265,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 297,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 369,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 397,
                                    "source": "./doc/source/references/icclim_index_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 12,
                                    "source": "./doc/source/references/custom_indices.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 121,
                                    "source": "./doc/source/references/custom_indices.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 170,
                                    "source": "./doc/source/references/custom_indices.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"func\".",
                                    "full_message": "Unknown interpreted text role \"func\"."
                                },
                                {
                                    "line": 177,
                                    "source": "./doc/source/references/custom_indices.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 14,
                                    "source": "./doc/source/references/ecad_functions_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 37,
                                    "source": "./doc/source/references/ecad_functions_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 7,
                                    "source": "./doc/source/references/generic_functions_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:class\".",
                                    "full_message": "Unknown interpreted text role \"py:class\"."
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/generic_functions_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/source/references/generic_functions_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 31,
                                    "source": "./doc/source/references/generic_functions_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 11,
                                    "source": "./doc/source/references/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 12,
                                    "source": "./doc/source/references/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 14,
                                    "source": "./doc/source/references/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :maxdepth: 3\n   :caption: References\n\n   icclim_index_api\n   ecad_functions_api\n   dcsc_functions_api\n   generic_functions_api\n   custom_indices\n   output_metadata\n   release_notes\n   api/index"
                                },
                                {
                                    "line": 13,
                                    "source": "./doc/source/references/dcsc_functions_api.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 27,
                                    "source": "./doc/source/references/dcsc_functions_api.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n\n   /references/api/icclim/index\n"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Python library for climate indices calculation.\n\n\n"
                                },
                                {
                                    "line": 14,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 3\n\n   _core/index.rst\n   dcsc/index.rst\n   ecad/index.rst\n   generic/index.rst\n   threshold/index.rst\n\n"
                                },
                                {
                                    "line": 27,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   exception/index.rst\n   main/index.rst\n   rechunk/index.rst\n\n"
                                },
                                {
                                    "line": 39,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: index(in_files: icclim._core.model.icclim_types.InFileLike, index_name: str | icclim._core.generic.indicator.GenericIndicator | icclim._core.model.standard_index.StandardIndex | None = None, var_name: str | collections.abc.Sequence[str] | None = None, slice_mode: icclim._core.model.icclim_types.FrequencyLike | icclim._core.frequency.Frequency = 'year', time_range: collections.abc.Sequence[datetime.datetime | str] | None = None, out_file: str | None = None, threshold: str | icclim._core.model.threshold.Threshold | collections.abc.Sequence[str | icclim._core.model.threshold.Threshold] | None = None, callback: Callable[[int], None] = log.callback, callback_percentage_start_value: int = 0, callback_percentage_total: int = 100, base_period_time_range: collections.abc.Sequence[datetime.datetime] | collections.abc.Sequence[str] | None = None, doy_window_width: int = 5, only_leap_years: bool = False, ignore_Feb29th: bool = False, interpolation: str | icclim._core.model.quantile_interpolation.QuantileInterpolation = 'median_unbiased', out_unit: str | None = None, netcdf_version: str | icclim._core.model.netcdf_version.NetcdfVersion = 'NETCDF4', user_index: icclim._core.legacy.user_index.model.UserIndexDict | None = None, save_thresholds: bool = False, logs_verbosity: icclim.logger.Verbosity | str = 'LOW', date_event: bool = False, min_spell_length: int | None = 6, rolling_window_width: int | None = 5, sampling_method: icclim._core.model.icclim_types.SamplingMethodLike = RESAMPLE_METHOD, *, window_width: int | None = None, save_percentile: bool | None = None, indice_name: str | None = None, user_indice: icclim._core.legacy.user_index.model.UserIndexDict | None = None, transfer_limit_Mbytes: float | None = None) -> xarray.core.dataset.Dataset\n\n   Compute climate index.\n\n   This is the main entry point for icclim.\n\n   :param in_files: Absolute path(s) to NetCDF dataset(s), including OPeNDAP URLs,\n                    or path to zarr store, or xarray.Dataset or xarray.DataArray.\n   :type in_files: str | list[str] | Dataset | DataArray | InputDictionary\n   :param index_name: Climate index name.\n                      For ECA&D index, case insensitive name used to lookup the index.\n                      For user index, it's the name of the output variable.\n   :type index_name: str | StandardIndex\n   :param var_name: ``optional`` Target variable name to process corresponding to ``in_files``.\n                    If None (default) on ECA&D index, the variable is guessed based on the\n                    climate index wanted.\n                    Mandatory for a user index.\n   :type var_name: str | list[str] | None\n   :param slice_mode: Type of temporal aggregation:\n                      The possibles values are ``{\"year\", \"month\", \"DJF\", \"MAM\", \"JJA\", \"SON\",\n                      \"ONDJFM\" or \"AMJJAS\", (\"season\", [1,2,3]), (\"month\", [1,2,3,])}``\n                      (where season and month lists can be customized) or any valid pandas\n                      frequency.\n                      A season can also be defined between two exact dates:\n                      ``(\"season\", (\"19 july\", \"14 august\"))``.\n                      Default is \"year\".\n                      See :ref:`slice_mode` for details.\n   :type slice_mode: FrequencyLike | Frequency\n   :param time_range: ``optional`` Temporal range: upper and lower bounds for temporal subsetting.\n                      If ``None``, whole period of input files will be processed.\n                      The dates can either be given as instance of datetime.datetime or as string\n                      values. For strings, many format are accepted.\n                      Default is ``None``.\n   :type time_range: list[datetime.datetime ] | list[str]  | tuple[str, str] | None\n   :param out_file: Output NetCDF file name (default: \"icclim_out.nc\" in the current directory).\n                    Default is \"icclim_out.nc\".\n                    If the input ``in_files`` is a ``Dataset``, ``out_file`` field is ignored.\n                    Use the function returned value instead to retrieve the computed value.\n                    If ``out_file`` already exists, icclim will overwrite it!\n   :type out_file: str | None\n   :param threshold: ``optional`` User defined threshold for certain indices.\n                     Default depend on the index, see their individual definition.\n                     When a list of threshold is provided, the index will be computed for each\n                     thresholds.\n   :type threshold: float | list[float] | None\n   :param transfer_limit_Mbytes: Deprecated, does not have any effect.\n   :type transfer_limit_Mbytes: float\n   :param callback: ``optional`` Progress bar printing. If ``None``, progress bar will not be\n                    printed.\n   :type callback: Callable[[int], None]\n   :param callback_percentage_start_value: ``optional`` Initial value of percentage of the progress bar (default: 0).\n   :type callback_percentage_start_value: int\n   :param callback_percentage_total: ``optional`` Total percentage value (default: 100).\n   :type callback_percentage_total: int\n   :param base_period_time_range: ``optional`` Temporal range of the reference period.\n                                  The dates can either be given as instance of datetime.datetime or as string\n                                  values.\n                                  It is used either:\n                                  #. to compute percentiles if threshold is filled.\n                                  When missing, the studied period is used to compute percentiles.\n                                  The study period is either the dataset filtered by `time_range` or the whole\n                                  dataset if `time_range` is missing.\n                                  For day of year percentiles (doy_per), on extreme percentiles the\n                                  overlapping period between `base_period_time_range` and the study period is\n                                  bootstrapped.\n                                  #. to compute a reference period for indices such as difference_of_mean\n                                  (a.k.a anomaly) if a single variable is given in input.\n   :type base_period_time_range: list[datetime.datetime ] | list[str] | tuple[str, str] | None\n   :param doy_window_width: ``optional`` Window width used to aggreagte day of year values when computing\n                            day of year percentiles (doy_per)\n                            Default: 5 (5 days).\n   :type doy_window_width: int\n   :param min_spell_length: ``optional`` Minimum spell duration to be taken into account when computing\n                            the sum_of_spell_lengths.\n   :type min_spell_length: int\n   :param rolling_window_width: ``optional`` Window width of the rolling window for indicators such as\n                                `{max_of_rolling_sum, max_of_rolling_average, min_of_rolling_sum, min_of_rolling_average}`\n   :type rolling_window_width: int\n   :param only_leap_years: ``optional`` Option for February 29th (default: False).\n   :type only_leap_years: bool\n   :param ignore_Feb29th: ``optional`` Ignoring or not February 29th (default: False).\n   :type ignore_Feb29th: bool\n   :param interpolation: ``optional`` Interpolation method to compute percentile values:\n                         ``{\"linear\", \"median_unbiased\"}``\n                         Default is \"median_unbiased\", a.k.a type 8 or method 8.\n                         Ignored for non percentile based indices.\n   :type interpolation: str | QuantileInterpolation | None\n   :param out_unit: ``optional`` Output unit for certain indices: \"days\" or \"%\"\n                    (default: \"days\").\n   :type out_unit: str | None\n   :param netcdf_version: ``optional`` NetCDF version to create (default: \"NETCDF3_CLASSIC\").\n   :type netcdf_version: str | NetcdfVersion\n   :param user_index: ``optional`` A dictionary with parameters for user defined index.\n                      See :ref:`Custom indices`.\n                      Ignored for ECA&D indices.\n   :type user_index: UserIndexDict\n   :param save_thresholds: ``optional`` True if the thresholds should be saved within the resulting\n                           netcdf file (default: False).\n   :type save_thresholds: bool\n   :param date_event: When True the date of the event (such as when a maximum is reached) will be\n                      stored in coordinates variables.\n                      **warning** This option may significantly slow down computation.\n   :type date_event: bool\n   :param logs_verbosity: ``optional`` Configure how verbose icclim is.\n                          Possible values: ``{\"LOW\", \"HIGH\", \"SILENT\"}`` (default: \"LOW\")\n   :type logs_verbosity: str | Verbosity\n   :param sampling_method: Choose whether the output sampling configured in `slice_mode` is a\n                           `groupby` operation or a `resample` operation (as per xarray definitions).\n                           Possible values:\n                           ``{\"groupby\", \"resample\", \"groupby_ref_and_resample_study\"}``\n                           (default: \"resample\")\n                           `groupby_ref_and_resample_study` may only be used when computing the\n                           `difference_of_means` (a.k.a the anomaly).\n   :type sampling_method: str\n   :param indice_name: DEPRECATED, use index_name instead.\n   :type indice_name: str | None\n   :param user_indice: DEPRECATED, use user_index instead.\n   :type user_indice: dict | None\n   :param window_width: DEPRECATED, use doy_window_width, min_spell_length or rolling_window_width\n                        instead.\n   :type window_width: int\n   :param save_percentile: DEPRECATED, use save_thresholds instead.\n   :type save_percentile: bool\n\n"
                                },
                                {
                                    "line": 164,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: indice(*args, **kwargs) -> xarray.core.dataset.Dataset\n\n   Proxy for `icclim.index` function.\n\n   Deprecated: to be deleted in a future release.\n\n"
                                },
                                {
                                    "line": 171,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: indices(index_group: collections.abc.Sequence[str] | str | icclim._core.model.index_group.IndexGroup | icclim._core.model.standard_index.StandardIndex, *, ignore_error: bool = False, **kwargs) -> xarray.core.dataset.Dataset\n\n   Compute multiple indices at the same time.\n\n   The input dataset(s) must include all the necessary variables.\n   It can only be used with keyword arguments (kwargs).\n\n   :param index_group: Either the name of an IndexGroup or an instance of IndexGroup or a list\n                       of index short names or the name(s) of standard variable(s) (such as 'tasmax').\n                       The value \"all\" can also be used to compute every indices.\n                       Note that the input given by ``in_files`` must include all the necessary\n                       variables to compute the indices of this group.\n   :type index_group: \"all\" | str | IndexGroup | list[str]\n   :param ignore_error: When True, ignore indices that fails to compute. This is option is particularly\n                        useful when used with `index_group='all'` to compute everything that can be\n                        computed given the input.\n   :type ignore_error: bool\n   :param kwargs: ``icclim.index`` keyword arguments.\n   :type kwargs: Dict\n\n   :returns: A Dataset with one data variable per index.\n   :rtype: xr.Dataset\n\n   .. rubric:: Notes\n\n   If ``output_file`` is part of kwargs, the result is written in a single netCDF\n   file, which will contain all the index results of this group.\n\n"
                                },
                                {
                                    "line": 200,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: create_optimized_zarr_store(in_files: str | list[str] | xarray.core.dataset.Dataset | xarray.core.dataarray.DataArray, var_names: str | list[str], target_zarr_store_name: str = 'icclim-target-store.zarr', keep_target_store: bool = False, chunking: dict[str, int] | None = None, filesystem: str | fsspec.AbstractFileSystem = LOCAL_FILE_SYSTEM) -> collections.abc.Generator[xarray.core.dataset.Dataset]\n\n   Context manager to create an zarr store given an input netcdf or xarray structure.\n\n   -- EXPERIMENTAL FEATURE --\n   API may changes without deprecation warning!\n\n   The execution may take a long time.\n\n   The result is rechunked according to `chunking` schema provided.\n   By default, when leaving `chunking` to None, the resulting zarr store is NOT chunked\n   on time dimension.\n   This kind of chunking will significantly speed up the bootstrapping of\n   percentiles for indices such as Tx90p, Tx10p, TN90p...\n   But such chunking will most likely result in suboptimal performances for other\n   indices.\n   Actually, when computing indices where no bootstrap is needed,\n   you should first try the computation without using `create_optimized_zarr_store`.\n   If there are performance issues, you may want to use `create_optimized_zarr_store`\n   with a dictionary of a better chunking schema than your current storage chunking.\n\n   By default, `keep_target_store` being False, the resulting zarr store is destroyed\n   when the context manager is exit.\n   To keep the zarr store for futur uses set `keep_target_store` to True.\n\n   The output is the resulting zarr store as a xarray Dataset.\n\n   :param in_files: Absolute path(s) to NetCDF dataset(s), including OPeNDAP URLs,\n                    or path to zarr store, or xarray.Dataset or xarray.DataArray.\n   :type in_files: str | list[str] | Dataset | DataArray\n   :param var_names: List of data variable to include in the target zarr store.\n                     All other data variable are dropped.\n                     The coordinate variable are untouched and are part of the target zarr store.\n   :type var_names: str | list[str]\n   :param target_zarr_store_name: Name of the target zarr store.\n                                  Used to avoid overriding an existing zarr store.\n   :type target_zarr_store_name: str\n   :param chunking: The target chunking schema.\n   :type chunking: dict\n   :param keep_target_store: Set to True to keep the target zarr store after the execution of the context\n                             manager.\n                             Set to False to remove the target zarr store once execution is finished.\n                             Default is False.\n   :type keep_target_store: bool\n   :param filesystem: A fsspec filesystem where the zarr store will be created.\n\n   :rtype: returns Dataset opened on the newly created target zarr store.\n\n   .. rubric:: Examples\n\n   .. code-block:: python\n\n       import icclim\n\n       with icclim.create_optimized_zarr_store(\n           in_files=\"tasmax.nc\",\n           var_names=\"tasmax\",\n           target_zarr_store_name=\"tasmax-store.zarr\",\n           chunking={\"time\": 42, \"lat\": 42, \"lon\": 42},\n       ) as tasmax_opti:\n           su_out = icclim.index(in_files=tasmax_opti, index_name=\"su\")\n\n"
                                },
                                {
                                    "line": 263,
                                    "source": "./doc/source/references/api/icclim/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: build_threshold(query: str | None = None, *, operator: icclim._core.model.operator.Operator | str | None = None, value: icclim._core.model.threshold.ThresholdValueType = None, unit: str | None = None, threshold_min_value: str | float | pint.Quantity | None = None, thresholds: collections.abc.Sequence[icclim._core.model.threshold.Threshold | str] | None = None, logical_link: str | icclim._core.model.logical_link.LogicalLink | None = None, offset: str | float | pint.Quantity | None = None, **kwargs) -> icclim._core.generic.threshold.bounded.BoundedThreshold | icclim._core.generic.threshold.percentile.PercentileThreshold | icclim._core.generic.threshold.basic.BasicThreshold\n\n   Build a `Threshold`.\n\n   This function is a factory for `Threshold` instances.\n   It can build a `BasicThreshold`, a `PercentileThreshold` or a `BoundedThreshold`.\n   See :ref:`generic_indices_recipes` for how to combine thresholds with generic\n   indices.\n\n   :param query: string query describing a threshold.\n                 It must include: an operator, a threshold value and optionally a unit\n                 such as \"> 10 degC\".\n                 It acts as a shorthand for ``operator``, ``value`` and ``unit`` parameters for\n                 simple threshold.\n                 Don't use ``query`` when value is a DataArray, a Dataset or a path to a\n                 netcdf/zarr storage, instead use ``operator``, ``value`` and ``unit``.\n                 ``query`` supersede `operator`, `value` and `unit` parameters.\n   :type query: str | None = None\n   :param operator: keyword argument only.\n                    The operator either as an instance of Operator or as a compatible string.\n                    See :py:class:`OperatorRegistry` for the list of all operators.\n                    When ``query`` is None and operator is None, the default ``Operator.REACH`` is\n                    used.\n   :type operator: Operator | str = None\n   :param value: keyword argument only.\n                 The threshold value(s), default to None.\n                 It can be:\n                 * a simple scalar threshold\n                 * a percentile that will be computed per-grid cell (in combinaison with `unit`)\n                 * per-grid cell thresholds defined by a DataArray, a Dataset or a string path to\n                 a netcdf/zarr.\n                 * a sequence of scalars, the indicator will then be computed for each value and\n                 a specific dimension will be created (also work with percentiles).\n   :type value: str | float | int | Dataset | DataArray | Sequence[float | int | str] | None\n   :param unit: Keyword argument only.\n                The threshold unit.\n                When ``unit`` is None, if ``value`` is a dataset and a \"units\"\n                can be read from its `attrs`, this unit will be used. If value is a scalar or\n                a sequence of scalar, the exceedance will be computed by assuming threshold has\n                the same unit as the studied value is it compared to.\n                When unit is a string it must be a valid unit of our shared pint registry with\n                xclim or a special percentile unit:\n                * \"doy_per\" for day of year percentiles (in ECAD, used for temperature indices\n                such as TX90p)\n                * \"period_per\" for per period percentiles (in ECAD, used for rain indices such\n                as R75p)\n   :type unit: str | None = None\n   :param threshold_min_value: A minimum value used to pre-filter computed threshold values.\n                               This is particularly useful to compute a percentile threshold for rain where\n                               dry days are usually ignored. In that case threshold_min_value would be set to\n                               \"1 mm/day\".\n                               If threshold_min_value is a number, ``unit`` is used to quantify\n                               ``threshold_min_value``.\n   :type threshold_min_value: str | float | pint.Quantity\n   :param offset: Optional. An offset applied to the threshold. This is particularly useful when\n                  the threshold is an existing dataset (netcdf file or zarr store) and the data\n                  should be compared to this dataset + an offset\n                  (e.g. to compute days when T > 5 degC above normal)\n   :type offset: float | None\n   :param kwargs: Additional arguments to build a PercentileThreshold.\n                  See :py:class:`PercentileThreshold` constructor for the complete list\n                  of possible arguments.\n\n   .. rubric:: Examples\n\n   .. code-block:: python\n\n       # -- Scalar threshold\n       scalar_t = build_threshold(\">= 30 degC\")\n       assert isinstance(scalar_t, BasicThreshold)\n\n       # -- Daily percentile threshold\n       doy_t = build_threshold(\">= 30 doy_per\")\n       assert isinstance(doy_t, PercentileThreshold)\n\n       # -- Per grid-cell threshold, with offset\n       grided_t = build_threshold(\n           operator=\">=\", value=\"path/to/tasmax_thresholds.nc\", unit=\"K\", offset=5\n       )\n       assert isinstance(grided_t, BasicThreshold)\n\n       # -- Daily percentile threshold, from a file\n       tasmax = xarray.open_dataset(\"path/to/tasmax_thresholds.nc\").tasmax\n       doys = xclim.core.calendar.percentile_doy(tasmax)\n       doy_file_t = build_threshold(operator=\">=\", value=doys)\n       assert isinstance(doy_file_t, PercentileThreshold)\n\n       # -- Bounded threshold\n       bounded_t = build_threshold(\">= -20 degree AND <= 20 degree \")\n       # equivalent to:\n       x = build_threshold(\">= -20 degree\")\n       y = build_threshold(\"<= 20 degree\")\n       bounded_t2 = x & y\n       assert bounded_t == bounded_t2\n       # equivalent to:\n       bounded_t3 = build_threshold(thresholds=[x, y], logical_link=\"AND\")\n       assert bounded_t == bounded_t3\n       assert isinstance(bounded_t, BoundedThreshold)"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/rechunk/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/rechunk/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.rechunk\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/rechunk/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the create_optimized_zarr_store context manager.\n\n   This context manager is used to create an \"optimized\" zarr store from a given input\n   dataset. The optimization is done by rechunking the input dataset according to a\n   given chunking schema.\n\n\n"
                                },
                                {
                                    "line": 19,
                                    "source": "./doc/source/references/api/icclim/rechunk/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: create_optimized_zarr_store(in_files: str | list[str] | xarray.core.dataset.Dataset | xarray.core.dataarray.DataArray, var_names: str | list[str], target_zarr_store_name: str = 'icclim-target-store.zarr', keep_target_store: bool = False, chunking: dict[str, int] | None = None, filesystem: str | fsspec.AbstractFileSystem = LOCAL_FILE_SYSTEM) -> collections.abc.Generator[xarray.core.dataset.Dataset]\n\n   Context manager to create an zarr store given an input netcdf or xarray structure.\n\n   -- EXPERIMENTAL FEATURE --\n   API may changes without deprecation warning!\n\n   The execution may take a long time.\n\n   The result is rechunked according to `chunking` schema provided.\n   By default, when leaving `chunking` to None, the resulting zarr store is NOT chunked\n   on time dimension.\n   This kind of chunking will significantly speed up the bootstrapping of\n   percentiles for indices such as Tx90p, Tx10p, TN90p...\n   But such chunking will most likely result in suboptimal performances for other\n   indices.\n   Actually, when computing indices where no bootstrap is needed,\n   you should first try the computation without using `create_optimized_zarr_store`.\n   If there are performance issues, you may want to use `create_optimized_zarr_store`\n   with a dictionary of a better chunking schema than your current storage chunking.\n\n   By default, `keep_target_store` being False, the resulting zarr store is destroyed\n   when the context manager is exit.\n   To keep the zarr store for futur uses set `keep_target_store` to True.\n\n   The output is the resulting zarr store as a xarray Dataset.\n\n   :param in_files: Absolute path(s) to NetCDF dataset(s), including OPeNDAP URLs,\n                    or path to zarr store, or xarray.Dataset or xarray.DataArray.\n   :type in_files: str | list[str] | Dataset | DataArray\n   :param var_names: List of data variable to include in the target zarr store.\n                     All other data variable are dropped.\n                     The coordinate variable are untouched and are part of the target zarr store.\n   :type var_names: str | list[str]\n   :param target_zarr_store_name: Name of the target zarr store.\n                                  Used to avoid overriding an existing zarr store.\n   :type target_zarr_store_name: str\n   :param chunking: The target chunking schema.\n   :type chunking: dict\n   :param keep_target_store: Set to True to keep the target zarr store after the execution of the context\n                             manager.\n                             Set to False to remove the target zarr store once execution is finished.\n                             Default is False.\n   :type keep_target_store: bool\n   :param filesystem: A fsspec filesystem where the zarr store will be created.\n\n   :rtype: returns Dataset opened on the newly created target zarr store.\n\n   .. rubric:: Examples\n\n   .. code-block:: python\n\n       import icclim\n\n       with icclim.create_optimized_zarr_store(\n           in_files=\"tasmax.nc\",\n           var_names=\"tasmax\",\n           target_zarr_store_name=\"tasmax-store.zarr\",\n           chunking={\"time\": 42, \"lat\": 42, \"lon\": 42},\n       ) as tasmax_opti:\n           su_out = icclim.index(in_files=tasmax_opti, index_name=\"su\")"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   icclim's internal core module.\n\n   The structure of this module may change without warnings.\n   Avoid importing from this module directly.\n\n\n"
                                },
                                {
                                    "line": 17,
                                    "source": "./doc/source/references/api/icclim/_core/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 3\n\n   model/index.rst\n\n"
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/source/references/api/icclim/_core/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   climate_variable/index.rst\n   constants/index.rst\n   frequency/index.rst\n   input_parsing/index.rst\n   utils/index.rst"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/utils/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/utils/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.utils\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/utils/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain utility functions for icclim.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/utils/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: read_date(in_date: str | datetime.datetime) -> datetime.datetime\n\n   Read a date from a string or return the date if it is already a datetime object.\n\n   :param in_date: A string representing a date or a datetime object.\n   :type in_date: str | datetime\n\n   :returns: A datetime object.\n   :rtype: datetime\n\n"
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/source/references/api/icclim/_core/utils/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: is_number_sequence(values: object) -> bool\n\n   Return True if values is a sequence of numbers."
                                },
                                {
                                    "line": 3,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.legacy\n\n"
                                },
                                {
                                    "line": 11,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 3\n\n   user_index/index.rst"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.legacy.user_index\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   User indices module for icclim.\n\n   User indices are a way of creating custom climate indices since icclim v4.\n   It allows to define a dictionary to describe the computation of a climate index.\n   Since icclim v6 it is reccomended to use generic indices instead, as they are more\n   flexible and have a better API.\n   See :ref:`generic_indices_recipes` for more information on generic indices.\n\n   User indices are not deprecated but are not recommended for new code.\n\n\n"
                                },
                                {
                                    "line": 22,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   calc_operation/index.rst\n   model/index.rst\n   parse/index.rst"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.legacy.user_index.parse\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the parsing operations to create a user indices.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: read_indicator(user_index: icclim._core.legacy.user_index.model.UserIndexDict) -> icclim._core.generic.indicator.GenericIndicator\n\n   Read the user index and return the corresponding generic indicator.\n\n   :param user_index: The user index dictionary containing the calculation operation and extreme mode.\n   :type user_index: UserIndexDict\n\n   :returns: The corresponding generic indicator based on the user index.\n   :rtype: GenericIndicator\n\n   :raises InvalidIcclimArgumentError: If the user index does not contain a calculation operation.\n       If the user index's calculation operation is unknown.\n   :raises NotImplementedError: If the calculation operation or extreme mode is not implemented.\n\n   .. rubric:: Notes\n\n   This function reads the user index dictionary and maps the calculation operation and\n   extreme mode to the corresponding generic indicator.\n   It raises errors if the required information is missing or if the operation is not\n   implemented.\n\n"
                                },
                                {
                                    "line": 37,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: read_logical_link(user_index: icclim._core.legacy.user_index.model.UserIndexDict) -> icclim._core.model.logical_link.LogicalLink\n\n   Read the logical link from the user index dictionary.\n\n   :param user_index: The user index dictionary containing the logical link information.\n   :type user_index: UserIndexDict\n\n   :returns: The corresponding LogicalLink based on the logical link information in the user\n             index dictionary.\n   :rtype: LogicalLink\n\n   .. rubric:: Notes\n\n   If the logical link is not specified in the user index dictionary, the default\n   logical link is LogicalLinkRegistry.LOGICAL_AND.\n\n"
                                },
                                {
                                    "line": 54,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: read_coef(user_index: icclim._core.legacy.user_index.model.UserIndexDict) -> float | None\n\n   Read the coefficient value from the user index dictionary.\n\n   :param user_index: The user index dictionary containing the coefficient value.\n   :type user_index: UserIndexDict\n\n   :returns: The coefficient value if it exists in the user index dictionary, otherwise None.\n   :rtype: float or None\n\n"
                                },
                                {
                                    "line": 65,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: read_date_event(user_index: icclim._core.legacy.user_index.model.UserIndexDict) -> bool\n\n   Read the 'date_event' key from the given UserIndexDict.\n\n   :param user_index: The dictionary containing user index information.\n   :type user_index: UserIndexDict\n\n   :returns: The value associated with the 'date_event' key in the UserIndexDict,\n             if missing returns False.\n   :rtype: bool\n\n"
                                },
                                {
                                    "line": 77,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/parse/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: read_thresholds(user_index: icclim._core.legacy.user_index.model.UserIndexDict, doy_window_width: int, reference_period: collections.abc.Sequence[datetime.datetime | str] | None, only_leap_years: bool, interpolation: icclim._core.model.quantile_interpolation.QuantileInterpolation) -> icclim._core.model.threshold.Threshold | None | list[icclim._core.model.threshold.Threshold]\n\n   Read the thresholds from the user index dictionary.\n\n   :param user_index: The user index dictionary containing the threshold information.\n   :type user_index: UserIndexDict\n   :param doy_window_width: The width of the day of year window for calculating the threshold.\n   :type doy_window_width: int\n   :param reference_period: The reference period for calculating the threshold.\n   :type reference_period: Sequence[dt.datetime | str] | None\n   :param only_leap_years: Whether to consider only leap years when calculating the threshold.\n   :type only_leap_years: bool\n   :param interpolation: The interpolation method to use for calculating the threshold.\n   :type interpolation: QuantileInterpolation\n\n   :returns: The corresponding Threshold object(s) based on the threshold information in the\n             user index dictionary.\n   :rtype: Threshold or None or list[Threshold]\n\n   .. rubric:: Notes\n\n   This function reads the threshold information from the user index dictionary and\n   maps it to the corresponding Threshold object(s).\n   If the threshold is already a Threshold object, it is returned as is.\n   If the threshold is a tuple or list, multiple Threshold objects are created based\n   on the logical operation and link specified in the user index dictionary.\n   If the threshold is a single value, a single Threshold object is created."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/model/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/model/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.legacy.user_index.model\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/model/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the UserIndexDict TypedDict.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/model/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: UserIndexDict\n\n\n\n\n   User index dictionary.\n\n   This dictionary is used to describe how a user index should be setup to compute a\n   custom climate index.\n   The reccomended way to create a custom indices is now to use the\n   generic indices API.\n   See :ref:`generic_indices_recipes` for how to combine thresholds with generic"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.legacy.user_index.calc_operation\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the CalcOperationLike and CalcOperation classes.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: CalcOperation\n\n\n\n\n   Represent a calculation operation for a user index.\n\n"
                                },
                                {
                                    "line": 23,
                                    "source": "./doc/source/references/api/icclim/_core/legacy/user_index/calc_operation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: CalcOperationRegistry\n\n\n\n\n   Registry for CalcOperation instances."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/climate_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/climate_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.climate_variable\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/climate_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the ClimateVariable class and its related functions.\n\n   A climate variable is a structure that contains all the pre-processed input varaible to\n   compute a climate index.\n   A climate index may require one or more climate variables to be computed.\n\n\n"
                                },
                                {
                                    "line": 19,
                                    "source": "./doc/source/references/api/icclim/_core/climate_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: ClimateVariable\n\n\n   ClimateVariable is a dataclass that represents a climate variable used to compute a climate index.\n\n   It groups together the input variable (studied_data), its associated metadata\n   (standard_var) if any, the threshold it must be compared to.\n\n   .. attribute:: name\n\n      Name of the variable.\n\n      :type: str\n\n   .. attribute:: standard_var\n\n      CF metadata bounded to the standard variable used for this ClimateVariable.\n\n      :type: StandardVariable\n\n   .. attribute:: studied_data\n\n      The variable studied.\n\n      :type: DataArray\n\n   .. attribute:: threshold\n\n      thresholds for this variable\n\n      :type: Threshold | None\n\n   .. py:method:: build_indicator_metadata(src_freq: icclim._core.frequency.Frequency, must_run_bootstrap: bool, jinja_scope: dict[str, Any], jinja_env: jinja2.Environment) -> dict[str, str | dict]\n\n      Build the metadata for the indicator that will be computed with this variable.\n\n      :param src_freq: The frequency of the source data.\n      :type src_freq: Frequency\n      :param must_run_bootstrap: Whether the bootstrap method must be run.\n      :type must_run_bootstrap: bool\n      :param jinja_scope: The scope to use for jinja templating.\n      :type jinja_scope: dict\n      :param jinja_env: The environment to use for jinja templating.\n      :type jinja_env: jinja2.Environment\n\n      :returns: The metadata for the indicator.\n      :rtype: dict of str, str | dict\n\n\n"
                                },
                                {
                                    "line": 69,
                                    "source": "./doc/source/references/api/icclim/_core/climate_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: build_climate_vars(climate_vars_dict: dict[str, icclim._core.model.in_file_dictionary.InFileDictionary], ignore_Feb29th: bool, time_range: collections.abc.Sequence[datetime.datetime | str] | None, base_period: collections.abc.Sequence[str] | None, standard_index: icclim._core.model.standard_index.StandardIndex | None, is_compared_to_reference: bool) -> list[ClimateVariable]\n\n   Build a list of ClimateVariable from a dictionary of input files.\n\n   :param climate_vars_dict: The dictionary of input files.\n   :type climate_vars_dict: dict of str, InFileDictionary\n   :param ignore_Feb29th: Whether to ignore February 29th.\n   :type ignore_Feb29th: bool\n   :param time_range: The time range to consider.\n   :type time_range: Sequence of datetime | str | None\n   :param base_period:\n                       The base period to consider, used to build a reference variable for indices such\n                        as anomaly.\n   :type base_period: Sequence of str | None\n   :param standard_index: The standard index to compute.\n   :type standard_index: StandardIndex | None\n\n   :rtype: list of ClimateVariable that will be used to compute the climate index.\n\n"
                                },
                                {
                                    "line": 89,
                                    "source": "./doc/source/references/api/icclim/_core/climate_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: build_climate_var(climate_var_name: str, climate_var_data: icclim._core.model.in_file_dictionary.InFileDictionary | icclim._core.model.icclim_types.InFileBaseType, ignore_Feb29th: bool, time_range: collections.abc.Sequence[datetime.datetime | str] | None, standard_var: icclim._core.model.standard_variable.StandardVariable | None) -> ClimateVariable\n\n   Build a ClimateVariable object.\n\n   :param climate_var_name: The name of the climate variable.\n   :type climate_var_name: str\n   :param climate_var_data: The input data for the climate variable. It can be either a dictionary\n                            or a file.\n   :type climate_var_data: InFileDictionary | InFileBaseType\n   :param ignore_Feb29th: Flag indicating whether to ignore February 29th in the time range.\n   :type ignore_Feb29th: bool\n   :param time_range: The time range to consider for the climate variable. It can be a sequence\n                      of datetime objects or strings, or None to consider the entire time range.\n   :type time_range: Sequence[datetime | str] | None\n   :param standard_var: The standard variable to use for the climate variable. If None, the input\n                        data will be used to guess the standard variable.\n   :type standard_var: StandardVariable | None\n\n   :returns: The built ClimateVariable object.\n   :rtype: ClimateVariable\n\n   .. rubric:: Notes\n\n   This function builds a ClimateVariable object based on the provided inputs.\n   It reads the input data, determines the standard variable, builds the studied\n   data, and sets the threshold and global metadata.\n\n   If the input data is a dictionary, it is assumed to have a 'study' key\n   containing the study data and an optional 'thresholds' key containing the\n   threshold data.\n\n   If the input data is a file, it is assumed to contain the study data.\n\n   The standard variable is used to determine the conversion unit for the\n   threshold data.\n\n   The studied data is built based on the study data, time range, ignore_Feb29th\n   flag, and standard variable.\n\n   If a threshold is provided in the dictionary, it is added to the ClimateVariable.\n\n   .. rubric:: Examples\n\n   >>> climate_var_name = \"tas\"\n   >>> climate_var_data = {\"study\": \"/path/to/data.nc\", \"thresholds\": \">= 27 degC\"}\n   >>> ignore_Feb29th = False\n   >>> time_range = [\"2000-01-01\", \"2010-12-31\"]\n   >>> standard_var = StandardVariableRegistry.TAS\n   >>> climate_var = build_climate_var(\n   ...     climate_var_name, climate_var_data, ignore_Feb29th, time_range, standard_var\n   ... )\n\n"
                                },
                                {
                                    "line": 142,
                                    "source": "./doc/source/references/api/icclim/_core/climate_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: must_run_bootstrap(da: xarray.core.dataarray.DataArray, threshold: icclim._core.model.threshold.Threshold | None) -> bool\n\n   Determine whether to run the bootstrap method.\n\n   :param da: The studied data.\n   :type da: DataArray\n   :param threshold: The threshold that contains the reference period.\n   :type threshold: Threshold | None\n\n   :returns: Whether to run the bootstrap method.\n   :rtype: bool\n\n   .. rubric:: Notes\n\n   This function is used to avoid bootstrapping if there is one single year\n   overlapping or no year overlapping or all year overlapping between the studied\n   data `da` and the reference period defined by the threshold.\n\n"
                                },
                                {
                                    "line": 161,
                                    "source": "./doc/source/references/api/icclim/_core/climate_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _build_reference_variable(reference_period: collections.abc.Sequence[str] | None, in_files: dict[str, icclim._core.model.in_file_dictionary.InFileDictionary], standard_var: icclim._core.model.standard_variable.StandardVariable) -> ClimateVariable\n\n   Add a secondary variable for indices such as anomaly.\n\n   This kind of indices require exactly two variables, but the second variable can\n   just be a subset of the first one."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the dataclasses, TypedDicts and basic registries of icclim.\n\n\n"
                                },
                                {
                                    "line": 14,
                                    "source": "./doc/source/references/api/icclim/_core/model/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   cf_calendar/index.rst\n   global_metadata/index.rst\n   icclim_types/index.rst\n   in_file_dictionary/index.rst\n   index_config/index.rst\n   index_group/index.rst\n   indicator/index.rst\n   logical_link/index.rst\n   netcdf_version/index.rst\n   operator/index.rst\n   quantile_interpolation/index.rst\n   registry/index.rst\n   standard_index/index.rst\n   standard_variable/index.rst\n   threshold/index.rst"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_group/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_group/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.index_group\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_group/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the IndexGroup class and the IndexGroupRegistry class.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_group/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: IndexGroup(name: str, values: list[IndexGroup] | None = None)\n\n\n   Class representing a group of climate indices.\n\n   :param name: The name of the index group.\n   :type name: str\n   :param values: The list of index groups contained within this group. Defaults to None.\n   :type values: list[IndexGroup] | None, optional\n\n   .. attribute:: name\n\n      The name of the index group.\n\n      :type: str\n\n   .. attribute:: values\n\n      The list of index groups contained within this group.\n\n      :type: list[IndexGroup]\n\n   .. py:method:: get_indices() -> list[Any]\n\n      Get the list of indices belonging to this group.\n\n      :returns: The list of indices belonging to this group.\n      :rtype: list[Any]\n\n      .. rubric:: Notes\n\n      The list of indices is obtained by filtering the EcadIndexRegistry values.\n      The others indices are not considered.\n\n\n"
                                },
                                {
                                    "line": 51,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_group/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: IndexGroupRegistry\n\n\n\n\n   Registry for IndexGroup instances."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/icclim_types/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/icclim_types/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.icclim_types\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/icclim_types/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Type hints for icclim."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.standard_variable\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Define the StandardVariable class and the StandardVariableRegistry class.\n\n   The StandardVariable class represents a standard variable used in climate data analysis.\n   The StandardVariableRegistry class is a registry that stores instances of\n   `StandardVariable`.\n\n   StandardVariable are mainly used to compute the metadata of the output of the generic\n   indices.\n\n\n"
                                },
                                {
                                    "line": 22,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: StandardVariable\n\n\n\n\n   StandardVariable represents a typical variable used in climate data analysis.\n\n   :param short_name: The short name of the variable.\n   :type short_name: str\n   :param standard_name: The standard name of the variable.\n   :type standard_name: str\n   :param long_name: The long name of the variable.\n   :type long_name: str\n   :param aliases: A list of aliases for the variable.\n   :type aliases: list[str]\n   :param default_units: The default units of the variable.\n   :type default_units: str\n\n   .. py:method:: get_metadata() -> dict[str, str]\n\n      Get the metadata of the StandardVariable object.\n\n\n"
                                },
                                {
                                    "line": 46,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_variable/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: StandardVariableRegistry\n\n\n\n\n   StandardVariableRegistry stores instances of StandardVariable such as PR, TAS.\n\n   .. py:method:: get_item_aliases(item: StandardVariable) -> list[str]\n      :staticmethod:\n\n      Return a list of aliases for the given StandardVariable.\n\n      :param item: The StandardVariable object for which to retrieve the aliases.\n      :type item: StandardVariable\n\n      :returns: A list of aliases for the given StandardVariable.\n      :rtype: list[str]"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.cf_calendar\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the CfCalendar class and the CfCalendarRegistry class.\n\n   These classes are used to represent and manage the CF calendars used in the\n   climate indices calculation.\n\n\n"
                                },
                                {
                                    "line": 18,
                                    "source": "./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: CfCalendar\n\n\n   Represents a CF calendar.\n\n   :param aliases: All the possible aliases or poorly typed calendar names targeting the same\n                   calendar.\n   :type aliases: list[str]\n   :param is_leap: It expects a DataArray argument of years such as `da.time.dt.year`.\n                   Returns a mask of the input telling if the value is part of a leap year or not.\n   :type is_leap: Callable\n\n   .. attribute:: aliases\n\n      All the possible aliases or poorly typed calendar names targeting the same\n      calendar.\n\n      :type: list[str]\n\n   .. attribute:: is_leap\n\n      It expects a DataArray argument of years such as `da.time.dt.year`.\n      Returns a mask of the input telling if the value is part of a leap year or not.\n\n      :type: Callable\n\n   .. py:property:: name\n      :type: str\n\n      Returns the name of the calendar.\n\n      :returns: The name of the calendar.\n      :rtype: str\n\n"
                                },
                                {
                                    "line": 53,
                                    "source": "./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: CfCalendarRegistry\n\n\n\n\n   Calendars known in CF plus some additional custom aliases for convenience.\n\n   :param aliases: All the possible aliases or poorly typed calendar names targeting the same\n                   calendar.\n   :type aliases: list[str]\n   :param is_leap: It expects a DataArray argument of years such as `da.time.dt.year`.\n                   Returns a mask of the input telling if the value is part of a leap year or not.\n   :type is_leap: Callable\n\n   .. attribute:: _item_class\n\n      The class of the items in the registry.\n\n      :type: type\n\n   .. py:method:: get_item_aliases(item: CfCalendar) -> list[str]\n      :staticmethod:\n\n      Get the aliases of a CfCalendar item.\n\n      :param item: The CfCalendar item.\n      :type item: CfCalendar\n\n      :returns: The aliases of the CfCalendar item.\n      :rtype: list[str]\n\n\n"
                                },
                                {
                                    "line": 86,
                                    "source": "./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _proleptic_gregorian_leap(years: xarray.DataArray) -> xarray.DataArray\n\n   Calculate if the years are part of a leap year in the proleptic Gregorian calendar.\n\n   :param years: The years to check.\n   :type years: DataArray\n\n   :returns: A boolean array indicating if the years are part of a leap year.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 97,
                                    "source": "./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _julian_leap(years: xarray.DataArray) -> xarray.DataArray\n\n   Calculate if the years are part of a leap year in the Julian calendar.\n\n   :param years: The years to check.\n   :type years: DataArray\n\n   :returns: A boolean array indicating if the years are part of a leap year.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 108,
                                    "source": "./doc/source/references/api/icclim/_core/model/cf_calendar/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _standard_leap(years: xarray.DataArray) -> xarray.DataArray\n\n   Calculate if the years are part of a leap year in the standard Gregorian calendar.\n\n   :param years: The years to check.\n   :type years: DataArray\n\n   :returns: A boolean array indicating if the years are part of a leap year.\n   :rtype: DataArray"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/operator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/operator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.operator\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/operator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Module for the Operator class and OperatorRegistry.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/operator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: Operator\n\n\n   Represents an operator used in computations.\n\n   :param short_name: The short name of the operator,\n                      used when templating the output metadata.\n   :type short_name: str\n   :param long_name: The long name of the operator,\n                     used when templating the output metadata.\n   :type long_name: str\n   :param standard_name: The standard name of the operator,\n                         used when templating the output metadata.\n   :type standard_name: str\n   :param operand: The operand symbol of the operator.\n   :type operand: str\n   :param compute: The computation function of the operator.\n   :type compute: Callable[[DataArray, DataArray | int | float], DataArray]\n   :param aliases: The list of aliases for the operator.\n   :type aliases: list[str]\n\n"
                                },
                                {
                                    "line": 37,
                                    "source": "./doc/source/references/api/icclim/_core/model/operator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: OperatorRegistry\n\n\n\n\n   Registry of operators.\n\n   Contains the predefined operators used to build ``Threshold``.\n\n   .. py:method:: get_item_aliases(op: Operator) -> list[str]\n      :staticmethod:\n\n      Get the aliases of an operator.\n\n      :param op: The operator.\n      :type op: Operator\n\n      :returns: The list of aliases for the operator.\n      :rtype: list[str]"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.registry\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the Registry class, a fancy enum replacement.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: Registry\n\n\n\n\n   Registry classes acts as fancy enums.\n\n   It allows to easily store and find constants of similar type.\n   Registries are namespaces, so there is no need to instantiate it or any of\n   its subclasses, every item is a class attribute.\n\n   .. rubric:: Notes\n\n   Registries are not meant to store large collections, they are just fancy lookup\n   tables for items with aliases and no case sensitivity.\n\n   .. py:method:: lookup(query: T | str) -> T\n      :classmethod:\n\n      Look up an item in the registry.\n\n      :param query: The item to look up. It can be either an instance of the item class or a\n                    string.\n      :type query: T or str\n\n      :returns: The found item.\n      :rtype: T\n\n      :raises InvalidIcclimArgumentError: If the item is not found in the registry.\n\n      .. rubric:: Notes\n\n      This method performs a case-insensitive lookup.\n      It first checks if the query is an instance of the item class, and if so,\n      returns a deep copy of the query.\n\n\n   .. py:method:: lookup_no_error(query: T | str) -> T | None\n      :classmethod:\n\n      Also look up an item in the registry, but return None if not found.\n\n      :param query: The item to look up. It can be either an instance of the item class or a\n                    string.\n      :type query: T or str\n\n      :returns: The found item, or None if not found.\n      :rtype: T or None\n\n\n   .. py:method:: every_aliases() -> list[T]\n      :classmethod:\n\n      Return a list of all aliases for items in the registry.\n\n      :returns: A list of all aliases for items in the registry.\n      :rtype: list[T]\n\n\n   .. py:method:: get_item_aliases(item: T) -> list[str]\n      :staticmethod:\n\n      Get the aliases for the given item.\n\n      :param item: The item to get aliases for.\n      :type item: T\n\n      :returns: A list of aliases for the item.\n      :rtype: list[str]\n\n      .. rubric:: Notes\n\n      Should be overridden in subclasses.\n\n\n   .. py:method:: catalog() -> dict[str, T]\n      :classmethod:\n\n      Return a dictionary of all items in the registry.\n\n      :returns: A dictionary containing all items in the registry, where the keys are the\n                item names and the values are the item instances.\n      :rtype: dict[str, T]\n\n\n   .. py:method:: values() -> list[T]\n      :classmethod:\n\n      Return a list of all items in the registry.\n\n      :returns: A list containing all items in the registry.\n      :rtype: list[T]"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.indicator\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Typing for generic indices.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: MissingMethodLike\n\n\n\n\n   Workaround xclim missing type.\n\n   .. py:method:: execute(*args, **kwargs) -> xclim.core.missing.MissingBase\n      :abstractmethod:\n\n      Execute the missing method.\n\n\n   .. py:method:: validate(*args, **kwargs) -> bool\n      :abstractmethod:\n\n      Validate the missing method.\n\n\n"
                                },
                                {
                                    "line": 35,
                                    "source": "./doc/source/references/api/icclim/_core/model/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: Indicator\n\n\n\n\n   Generic indicator abstract class.\n\n   .. attribute:: name\n\n      The name of the indicator.\n\n      :type: str\n\n   .. attribute:: standard_name\n\n      The standard name of the indicator, ideally from the CF conventions.\n\n      :type: str\n\n   .. attribute:: long_name\n\n      The long name of the indicator.\n\n      :type: str\n\n   .. attribute:: cell_methods\n\n      The cell methods of the indicator.\n\n      :type: str\n\n   .. attribute:: qualifiers\n\n      The qualifiers of the indicator, used to classify indicators.\n\n      :type: tuple\n\n   .. attribute:: templated_properties\n\n      The properties that can be templated.\n      Theses properties are used to fill the output metadata.\n\n      :type: tuple\n\n   .. py:method:: preprocess(*args, **kwargs) -> list[xarray.DataArray]\n      :abstractmethod:\n\n      Preprocess the data.\n\n\n   .. py:method:: postprocess(*args, **kwargs) -> xarray.DataArray\n      :abstractmethod:\n\n      Postprocess the data.\n\n\n   .. py:method:: clone() -> Indicator\n\n      Clone the indicator."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.quantile_interpolation\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the classes for quantile interpolation.\n\n   QuantileInterpolation class and the QuantileInterpolationRegistry class\n   are defined here.\n\n\n"
                                },
                                {
                                    "line": 18,
                                    "source": "./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: QuantileInterpolation\n\n\n   Class for performing quantile interpolation.\n\n   :param name: The name of the interpolation method.\n   :type name: str\n   :param alpha: The alpha parameter for the interpolation.\n   :type alpha: float\n   :param beta: The beta parameter for the interpolation.\n   :type beta: float\n\n"
                                },
                                {
                                    "line": 31,
                                    "source": "./doc/source/references/api/icclim/_core/model/quantile_interpolation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: QuantileInterpolationRegistry\n\n\n\n\n   Registry of quantile interpolation methods.\n\n   Only 2 methods are available: LINEAR and MEDIAN_UNBIASED."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/logical_link/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/logical_link/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.logical_link\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/logical_link/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the LogicalLink class and registry.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/logical_link/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: LogicalLink\n\n\n   Logical link class to combine multiple threshold.\n\n   This is meant to be used with the old user_indices API.\n   It is now reccomended to use BoundedThreshold with generic indices instead.\n   See :ref:`generic_indices_recipes` for how to combine thresholds with generic\n   indices.\n\n"
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/source/references/api/icclim/_core/model/logical_link/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: LogicalLinkRegistry\n\n\n\n\n   Registry for LogicalLink objects."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_config/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_config/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.index_config\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_config/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the IndexConfig class.\n\n   It holds the compiled configuration for the computation of climate indices.\n\n\n"
                                },
                                {
                                    "line": 17,
                                    "source": "./doc/source/references/api/icclim/_core/model/index_config/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: IndexConfig\n\n\n   Configuration class for defining climate index parameters.\n\n   :param frequency: The time frequency of the output. Built from ``slice_mode``.\n   :type frequency: Frequency\n   :param climate_variables: The list of climate variables used in the index calculation.\n   :type climate_variables: list[ClimateVariable]\n   :param min_spell_length: The minimum spell length for the index calculation.\n                            None if the index is not a spell index.\n   :type min_spell_length: int | None\n   :param rolling_window_width: The width of the rolling window for the index calculation.\n                                None if the index is not a rolling index.\n   :type rolling_window_width: int | None\n   :param out_unit: The output unit for the index calculation.\n                    Optional, used to override the default unit.\n   :type out_unit: str | None\n   :param callback: The callback function for progress updates during the index calculation.\n                    Deprecated.\n   :type callback: Callable[[int], None] | None\n   :param netcdf_version: The version of the NetCDF file format to use for saving the index results.\n                          Default is NetcdfVersion.NETCDF4.\n   :type netcdf_version: NetcdfVersion\n   :param save_thresholds: Flag indicating whether to save the threshold values used in the index\n                           calculation.\n   :type save_thresholds: bool\n   :param interpolation: The interpolation method to use for calculating quantiles/percentiles.\n   :type interpolation: QuantileInterpolation\n   :param is_compared_to_reference: Flag indicating whether the index is compared to a reference period.\n   :type is_compared_to_reference: bool\n   :param reference_period: The reference period for the index calculation.\n   :type reference_period: tuple[str, str] | None\n   :param indicator_name: The name of the index.\n   :type indicator_name: str\n   :param logical_link: The logical link to use for combining multiple indices.\n   :type logical_link: LogicalLink\n   :param coef: The coefficient to apply to the index values.\n   :type coef: float | None\n   :param date_event: Flag indicating whether the index represents a date or an event.\n   :type date_event: bool\n   :param sampling_method: The sampling method to use for the index calculation.\n                           In conjonction with the Frequency, it is used on specific indices such as the\n                           anomaly (a.k.a diff_of_means) to determine if the reference period and the\n                           studied period should be grouped by or resampled.\n                           It can be either 'group_by', 'resample', or\n                           'group_by_ref_and_resample_study'.\n                           'group_by' will group the data by the specified frequency, for example every\n                           data of every January together.\n                           'resample' will resample the data to the specified frequency, for example every\n                           days of each month independently together.\n                           'group_by_ref_and_resample_study' will group the reference data by the specified\n                           frequency and resample the study data to the same frequency.\n                           This last method allows for example to compare each January, independently, of\n                           the study period to every January of the reference period.\n                           This is typically used to compare the each month of the studied period\n                           to a normal (the reference) of many aggregated years.\n   :type sampling_method: str\n   :param rename: The new name for the output variable.\n                  Optional, used to override the default index name.\n   :type rename: str | None\n   :param indicator: The indicator to be computed.\n   :type indicator: Indicator\n   :param reference: The reference value for the index calculation.\n   :type reference: str"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/in_file_dictionary/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/in_file_dictionary/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.in_file_dictionary\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/in_file_dictionary/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contains the InFileDictionary class.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/in_file_dictionary/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: InFileDictionary\n\n\n\n\n   Dictionary grouping in_files and var_name functionnalities.\n\n   .. attribute:: study\n\n      Study input file.\n\n      :type: InFileBaseType\n\n   .. attribute:: thresholds\n\n      Thresholds to apply to the study input file.\n\n      :type: NotRequired[Threshold | None]\n\n   .. rubric:: Examples\n\n   .. code-block:: python\n\n       threshold = build_threshold(operator=\">\", value=[\"per-1.nc\", \"per-2.nc\"])\n       in_files = {\n           \"tasmax\": {\n               \"study\": \"tasmax-store.zarr\",\n               \"threshold\": threshold,\n           },\n           \"pr\": \"pr.nc\",\n           \"tasmin\": {\"study\": \"tasmin.nc\"},\n       }\n\n   .. rubric:: Notes\n\n   It also allows to use a different input for thresholds such as percentiles."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_index/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_index/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.standard_index\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_index/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the StandardIndex data class.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/standard_index/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: StandardIndex\n\n\n   Standard Index data class.\n\n   It is used to describe how a GenericIndicator should be setup to compute a climate\n   index that has been defined in the literature (such as ECA&D's ATBD document).\n\n\n   .. attribute:: short_name\n\n      The index name used in the output.\n\n      :type: str\n\n   .. attribute:: compute\n\n      The function to compute the index. It usually wraps a xclim functions.\n\n      :type: Callable\n\n   .. attribute:: group\n\n      The index group category.\n\n      :type: IndexGroup\n\n   .. attribute:: variables\n\n      The Cf variables needed to compute the index.\n      The variable are individually described by a list of aliases.\n\n      :type: List[List[str]]\n\n   .. attribute:: qualifiers\n\n      ``optional`` List of configuration to compute the index.\n      Used internally to generate modules for C3S.\n\n      :type: List[str] | None\n\n   .. attribute:: source\n\n      Where the index definition comes from.\n\n      :type: str | None\n\n   .. attribute:: definition\n\n      A formal definition of the index. It should describe what kind of output\n      the user is expected to obtain.\n\n      :type: str | None\n\n   .. py:method:: clone() -> StandardIndex\n\n      Return a deep copy of the index."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.netcdf_version\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Module containing the NetCDF version model and its registry.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: NetcdfVersion\n\n\n   Class representing a NetCDF version.\n\n   .. attribute:: name\n\n      The name of the NetCDF version.\n\n      :type: {'NETCDF4', 'NETCDF4_CLASSIC', 'NETCDF3_64BIT', 'NETCDF3_CLASSIC'}\n\n"
                                },
                                {
                                    "line": 27,
                                    "source": "./doc/source/references/api/icclim/_core/model/netcdf_version/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: NetcdfVersionRegistry\n\n\n\n\n   Registry of NetCDF versions."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/global_metadata/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/global_metadata/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.global_metadata\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/global_metadata/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Global metadata model to be added to the output netCDF file.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/global_metadata/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: GlobalMetadata\n\n\n\n\n   Global metadata model.\n\n   .. attribute:: history\n\n      The CF history attribute.\n\n      :type: str or None\n\n   .. attribute:: source\n\n      The source of the data.\n\n      :type: str or None\n\n   .. attribute:: time_encoding\n\n      The time encoding information to be read from ds.time.encoding.\n\n      :type: dict or None"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/model/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/model/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.model.threshold\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/model/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Threshold abstract class and ThresholdBuilderInput type.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/model/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: ThresholdBuilderInput\n\n\n\n\n   Threshold building configuration.\n\n   Data transfert object mapping all possible configuration to build any threshold.\n\n"
                                },
                                {
                                    "line": 25,
                                    "source": "./doc/source/references/api/icclim/_core/model/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: Threshold\n\n\n\n\n   Abstract class for all thresholds.\n\n   See :ref:`generic_indices_recipes` for how to use custom thresholds.\n\n   .. py:method:: format_metadata(*, jinja_scope: dict[str, Any], jinja_env: jinja2.Environment, **kwargs) -> icclim._core.generic.threshold.threshold_templates.ThresholdMetadata\n      :abstractmethod:\n\n      Get a dictionary of standardized threshold metadata.\n\n\n   .. py:method:: compute(comparison_data: xarray.DataArray, override_op: Callable[[xarray.DataArray, xarray.DataArray], xarray.DataArray] | None = None, **kwargs) -> xarray.DataArray\n      :abstractmethod:\n\n      Compute the exceedance of the threshold.\n\n      For example, if the threshold is 10 and the comparison_data is [5, 10, 15],\n      with a \">\" operator, the exceedance will be [False, False, True].\n      The operator can be overridden by `override_op`.\n      This is needed when self.operator is REACH.\n\n      :param comparison_data: Data that must be compared to self threshold\n      :type comparison_data: xr.DataArray\n      :param override_op: Operator to override self.operator compute function.\n                          Optional.\n      :type override_op: Callable[[DataArray, DataArray], DataArray] | None\n      :param kwargs: Keyword arguments passed to the concrete `compute` implementations.\n                     This makes the `compute` interface contract unreliable.\n                     So we accept to not respected LSP here."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/constants/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/constants/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.constants\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/constants/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Icclim's constants."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/frequency/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/frequency/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.frequency\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/frequency/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the Frequency class and the FrequencyRegistry class.\n\n   Frequency wraps the concept of pandas frequency in order to resample\n   time series. ``slice_mode`` parameter of `icclim.index` is always converted to a\n   `Frequency`.\n\n\n"
                                },
                                {
                                    "line": 19,
                                    "source": "./doc/source/references/api/icclim/_core/frequency/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: get_seasonal_time_updater(start_month: int, end_month: int, start_day: int = 1, end_day: int | None = None) -> Callable[[xarray.core.dataarray.DataArray], tuple[xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray]]\n\n   Seasonal time updater and time bounds creator method generator.\n\n   Returns a callable of DataArray which will rewrite the time dimension to\n   the season composed of the given months. The data must have been computed on this\n   season beforehand.\n   It also create the corresponding time_bounds.\n\n   :param start_month: The season starting month, it must be between 1 and 12.\n   :type start_month: int\n   :param end_month: The season ending month, it must be between 1 and 12.\n   :type end_month: int\n   :param start_day: The season starting day, it must be between 1 and 31.\n   :type start_day: int\n   :param end_day: The season ending day, it must be between 1 and 31.\n   :type end_day: int\n\n   :returns: **function** -- A function that will update the time dimension of a DataArray to the season\n             composed of the given months and create the corresponding time_bounds.\n   :rtype: Callable[[DataArray], tuple[DataArray, DataArray]]\n\n"
                                },
                                {
                                    "line": 42,
                                    "source": "./doc/source/references/api/icclim/_core/frequency/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: get_time_bounds_updater(freq: str) -> Callable[[xarray.core.dataarray.DataArray], tuple[xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray]]\n\n   Return a function that adds time bounds to a given DataArray.\n\n   :param freq: The frequency at which the DataArray should be resampled.\n   :type freq: str\n\n   :returns: A function that takes a DataArray as input and returns a tuple\n             containing the modified DataArray and the time\n             bounds as a separate DataArray.\n   :rtype: Callable[[DataArray], tuple[DataArray, DataArray]]\n\n   .. rubric:: Notes\n\n   The returned function assumes that the input DataArray has already\n   been resampled to the specified frequency.\n\n   The time axis values in the modified DataArray will be set to the\n   middle of the calculated time bounds.\n\n"
                                },
                                {
                                    "line": 63,
                                    "source": "./doc/source/references/api/icclim/_core/frequency/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: Frequency\n\n\n   Time sampling frequency.\n\n   This acts as a wrapper around the pandas frequency string.\n   ``icclim.index`` will always convert the ``slice_mode`` parameter to a\n   ``Frequency``.\n\n   :param pandas_freq: The frequency string used by pandas to resample the time series.\n   :type pandas_freq: str\n   :param accepted_values: The list of aliases for the frequency.\n   :type accepted_values: list[str]\n   :param adjective: The adjective form of the frequency. Used when templating the output's metadata.\n   :type adjective: str\n   :param post_processing: The function to apply for post-processing the resampled data.\n   :type post_processing: Callable[[DataArray], tuple[DataArray, DataArray]] | None\n   :param units: The units of the frequency.\n   :type units: str\n   :param indexer: The indexer to use for grouping the data.\n   :type indexer: Indexer | None\n   :param long_name: The long name of the frequency.\n   :type long_name: str\n   :param group_by_key: The key to use for grouping the data.\n   :type group_by_key: str | None\n   :param delta: The time delta for the frequency.\n   :type delta: np.timedelta64\n\n   :returns: The frequency object.\n   :rtype: Frequency\n\n   .. rubric:: Notes\n\n   This class represents a time sampling frequency.\n\n   .. rubric:: Examples\n\n   >>> freq = Frequency(\n   ...     pandas_freq=\"D\",\n   ...     accepted_values=[\"daily\", \"day\", \"days\", \"d\"],\n   ...     adjective=\"daily\",\n   ...     indexer=None,\n   ...     post_processing=get_time_bounds_updater(\"D\"),\n   ...     units=\"days\",\n   ...     long_name=\"day\",\n   ...     group_by_key=\"time.dayofyear\",\n   ...     delta=np.timedelta64(1, \"D\"),\n   ... )\n\n   .. py:method:: build_frequency_kwargs() -> dict[str, Any]\n\n      Build kwargs with possible keys in {\"freq\", \"month\", \"date_bounds\"}.\n\n\n"
                                },
                                {
                                    "line": 118,
                                    "source": "./doc/source/references/api/icclim/_core/frequency/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: FrequencyRegistry\n\n\n\n\n   Registry class for Frequency objects.\n\n   .. py:attribute:: NO_RESAMPLE\n\n      Does not resample\n\n   .. py:attribute:: HOUR\n\n      Resample to hourly values\n\n   .. py:attribute:: DAY\n\n      Resample to daily values\n\n   .. py:attribute:: MONTH\n\n      Resample to monthly values\n\n   .. py:attribute:: YEAR\n\n      Resample to yearly values.\n\n   .. py:attribute:: AMJJAS\n\n      Resample to summer half-year, from April to September included.\n\n   .. py:attribute:: ONDJFM\n\n      Resample to winter half-year, from October to March included.\n\n   .. py:attribute:: DJF\n\n      Resample to winter season, from December to February included.\n\n   .. py:attribute:: MAM\n\n      Resample to spring season, from March to May included.\n\n   .. py:attribute:: JJA\n\n      Resample to summer season, from June to Agust included.\n\n   .. py:attribute:: SON\n\n      Resample to fall season, from September to November included.\n\n   .. py:method:: lookup(query: icclim._core.model.icclim_types.FrequencyLike | Frequency) -> Frequency\n      :classmethod:\n\n      Look up a Frequency object based on the query.\n\n      :param query: The query to look up the Frequency object. Typically a string.\n      :type query: FrequencyLike or Frequency\n\n      :returns: The Frequency object that matches the query.\n      :rtype: Frequency\n\n      :raises InvalidIcclimArgumentError: If the query is not a valid frequency.\n\n      .. rubric:: Notes\n\n      The query can be a Frequency object, a string representing a frequency,\n      or a list/tuple representing a frequency.\n\n      If the query is a string, it will be converted to a Frequency object first by\n      looking in the FrequencyRegistry then by assuming it's a pandas frequency and\n      building a Frequency object from it.\n\n      If the query is a list/tuple, it needs a keyword as its first element and a list\n      of months or a list of two date strings as its second element. The keyword can\n      be either \"month\" or \"season\".\n      In \"month\" case, the second element must be a list of months and the Frequency\n      will filter the data by these months.\n      In \"season\" case, the second element must be a list of months or a list of two\n      date and the Frequency will resample the data to the season composed of these\n      months.\n\n\n   .. py:method:: get_item_aliases(item: Frequency) -> list[str]\n      :staticmethod:\n\n      Get the aliases of a Frequency object.\n\n      :param item: The Frequency object.\n      :type item: Frequency\n\n      :returns: The aliases of the Frequency object.\n      :rtype: list[str]\n\n\n"
                                },
                                {
                                    "line": 214,
                                    "source": "./doc/source/references/api/icclim/_core/frequency/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _get_delta(pandas_freq: str) -> numpy.timedelta64\n\n   Build timedelta from a \"pandas frequency\" string.\n\n   A \"pandas frequency\" string may look like [\"2YS-DEC\", \"3W-TUE\", \"M\", ... ]\n   The anchor, such as \"DEC\" in \"YS-DEC\", does not modify the delta.\n\n   :param pandas_freq:\n   :type pandas_freq: str\n   :param The frequency query.:\n\n   :returns: * *The timedelta corresponding to this frequency.*\n             * *For example, \"2YS-DEC\" would return a 2 years delta.*"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.input_parsing\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Module to parse input data and make it usable for icclim.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: PercentileDataArray(data: Any = dtypes.NA, coords: collections.abc.Sequence[collections.abc.Sequence | pandas.Index | DataArray] | collections.abc.Mapping | None = None, dims: str | collections.abc.Iterable[collections.abc.Hashable] | None = None, name: collections.abc.Hashable | None = None, attrs: collections.abc.Mapping | None = None, indexes: collections.abc.Mapping[Any, xarray.core.indexes.Index] | None = None, fastpath: bool = False)\n\n\n\n\n   Wrap xarray DataArray for percentiles values.\n\n   .. py:method:: is_compatible(source: xarray.DataArray) -> bool\n      :classmethod:\n\n      Evaluate whether PecentileDataArray is conformant with expected fields.\n\n      A PercentileDataArray must have climatology_bounds attributes and either a\n      quantile or percentiles coordinate, the window is not mandatory.\n\n\n   .. py:method:: from_da(source: xarray.DataArray, climatology_bounds: list[str] | None = None) -> PercentileDataArray\n      :classmethod:\n\n      Create a PercentileDataArray from a xarray.DataArray.\n\n      :param source: A DataArray with its content containing percentiles values.\n                     It must also have a coordinate variable percentiles or quantile.\n      :type source: xr.DataArray\n      :param climatology_bounds: Optional. A List of size two which contains the period on which the\n                                 percentiles were computed. See\n                                 `xclim.core.calendar.build_climatology_bounds`\n                                 to build this list from a DataArray.\n      :type climatology_bounds: list[str]\n\n      :returns: The initial `source` DataArray but wrap by PercentileDataArray class.\n                The data is unchanged and only climatology_bounds attributes is overridden\n                if q new value is given in inputs.\n      :rtype: PercentileDataArray\n\n\n"
                                },
                                {
                                    "line": 52,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: guess_var_names(ds: xarray.core.dataset.Dataset, var_names: str | collections.abc.Sequence[str] | None, standard_index: icclim._core.model.standard_index.StandardIndex | None) -> list[collections.abc.Hashable]\n\n   Attempt to guess the variable names from the dataset and the standard index.\n\n   :param ds: The dataset to guess the variable names from.\n   :type ds: Dataset\n   :param var_names: The variable names to use. If None, the function will attempt to guess the\n                     variable names.\n   :type var_names: str | Sequence[str] | None\n   :param standard_index: The standard index to use to guess the variable names.\n   :type standard_index: StandardIndex | None\n\n   :returns: The list of guessed variable names.\n   :rtype: list[Hashable]\n\n"
                                },
                                {
                                    "line": 68,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: read_dataset(in_files: icclim._core.model.icclim_types.InFileBaseType, standard_var: icclim._core.model.standard_variable.StandardVariable | None = None, var_name: str | collections.abc.Sequence[str] | None = None) -> xarray.core.dataset.Dataset\n\n   Read a dataset from input files.\n\n   :param in_files: The input files to read the dataset from. It can be a single file path,\n                    a list of file paths, a glob pattern, a netCDF file, or a Zarr store.\n   :type in_files: InFileBaseType\n   :param standard_var: The standard variable to use for parsing the dataset, by default None.\n   :type standard_var: StandardVariable | None, optional\n   :param var_name: The variable name(s) to extract from the dataset, by default None.\n   :type var_name: str | Sequence[str] | None, optional\n\n   :returns: The parsed dataset.\n   :rtype: Dataset\n\n   :raises NotImplementedError: If the format of `in_files` is not recognized.\n\n   .. rubric:: Notes\n\n   This function supports reading datasets from various file formats, including\n   netCDF and Zarr. It can handle single files, multiple files, and glob patterns.\n   If `standard_var` is provided, it will use the specified standard variable for\n   parsing the dataset. If `var_name` is provided, it will extract the specified\n   variable(s) from the dataset.\n\n   .. rubric:: Examples\n\n   >>> files = [\"data1.nc\", \"data2.nc\"]\n   >>> ds = read_dataset(files, standard_var=\"temperature\", var_name=\"temp\")\n\n"
                                },
                                {
                                    "line": 99,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: update_to_standard_coords(ds: xarray.core.dataset.Dataset) -> xarray.core.dataset.Dataset\n\n   Mutate input ds to use more icclim friendly coordinate names.\n\n"
                                },
                                {
                                    "line": 104,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: is_zarr_path(path: icclim._core.model.icclim_types.InFileBaseType) -> bool\n\n   Check if the input path is a Zarr store.\n\n"
                                },
                                {
                                    "line": 109,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: is_netcdf_path(path: icclim._core.model.icclim_types.InFileBaseType) -> bool\n\n   Check if the input path is a netCDF file.\n\n"
                                },
                                {
                                    "line": 114,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: is_glob_path(path: icclim._core.model.icclim_types.InFileBaseType) -> bool\n\n   Check if the input path is a glob pattern.\n\n"
                                },
                                {
                                    "line": 119,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: standardize_percentile_dim_name(per_da: xarray.core.dataarray.DataArray) -> xarray.core.dataarray.DataArray\n\n   Standardizes the name of the percentile dimension in the input DataArray.\n\n   :param per_da: The input DataArray containing percentile data.\n   :type per_da: DataArray\n\n   :returns: The input DataArray with the percentile dimension standardized.\n   :rtype: DataArray\n\n   :raises InvalidIcclimArgumentError: If the percentile data does not contain a recognizable percentiles dimension.\n\n   .. rubric:: Notes\n\n   This function standardizes the name of the percentile dimension in the input\n   DataArray to \"percentiles\".\n\n   If the percentile dimension name contains the word \"quantile\", the values in the\n   \"percentiles\" coordinate are multiplied by 100.\n\n"
                                },
                                {
                                    "line": 140,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: get_date_to_iso_format(in_date: str | datetime.datetime) -> str\n\n   Get a date in ISO format from a string or a datetime object.\n\n   :param in_date: A string representing a date or a datetime object.\n   :type in_date: str | datetime\n\n   :returns: A string representing a date in ISO format.\n   :rtype: str\n\n"
                                },
                                {
                                    "line": 151,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: read_clim_bounds(climatology_bounds: collections.abc.Sequence[str, str] | None, per_da: xarray.DataArray) -> list[str]\n\n   Read climatology bounds from input.\n\n   The climatology bounds represent the start and end dates of the climatology period.\n\n   :param climatology_bounds: The climatology bounds as a sequence of two strings representing the start and\n                              end dates.\n                              If None, the climatology bounds will be retrieved from the `climatology_bounds`\n                              attribute of `per_da`.\n   :type climatology_bounds: sequence of str or None\n   :param per_da: The input data array.\n   :type per_da: xr.DataArray\n\n   :returns: A list of climatology bounds converted to ISO format.\n   :rtype: list of str\n\n   :raises InvalidIcclimArgumentError: If the length of `climatology_bounds` is not equal to 2.\n\n   .. rubric:: Notes\n\n   If `climatology_bounds` is None, the function will attempt to retrieve the\n   climatology bounds from the `climatology_bounds` attribute of `per_da`.\n\n"
                                },
                                {
                                    "line": 176,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: build_input_dict(in_files: icclim._core.model.icclim_types.InFileLike, var_names: collections.abc.Sequence[str] | None, threshold: icclim._core.model.threshold.Threshold | collections.abc.Sequence[icclim._core.model.threshold.Threshold] | None, standard_index: icclim._core.model.standard_index.StandardIndex | None) -> dict[str, icclim._core.model.in_file_dictionary.InFileDictionary]\n\n   Build an input dictionary based on the provided input files and variables.\n\n   The input dictionary is used to map which input files correspond to which variables.\n\n   :param in_files: The input files. It can be a dictionary where the keys represent the variable\n                    names and the values represent the file paths, or a single file path.\n   :type in_files: InFileLike\n   :param var_names: The variable names. If `in_files` is a dictionary, this parameter must be None.\n                     Otherwise, it should be a sequence of variable names corresponding to the single\n                     file path.\n   :type var_names: Sequence[str] | None\n   :param threshold: The threshold values. It can be a single threshold value, a sequence of\n                     threshold values, or None.\n   :type threshold: Threshold | Sequence[Threshold] | None\n   :param standard_index: The standard index. It can be a standard index value or None.\n   :type standard_index: StandardIndex | None\n\n   :returns: The built input dictionary.\n   :rtype: dict[str, InFileDictionary]\n\n   :raises InvalidIcclimArgumentError: If `var_names` is not None when `in_files` is a dictionary.\n\n   .. rubric:: Notes\n\n   - If `in_files` is a dictionary, the dictionary keys are used as variable names.\n   - If `in_files` is a dictionary and the dictionary values are also dictionaries,\n     the input dictionary is returned as is.\n   - If `in_files` is a dictionary and the dictionary values are file paths,\n     the input dictionary is built using the file paths and variable names.\n   - If `in_files` is a single file path and `var_names` is a single variable name,\n     the input dictionary is built using the file path and variable name.\n\n"
                                },
                                {
                                    "line": 211,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: find_standard_vars(ds: xarray.core.dataset.Dataset) -> list[collections.abc.Hashable]\n\n   Find standard variables in a dataset.\n\n   :param ds: The input dataset.\n   :type ds: Dataset\n\n   :returns: A list of standard variables found in the dataset.\n   :rtype: list[Hashable]\n\n"
                                },
                                {
                                    "line": 222,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: guess_standard_variable(data: xarray.core.dataarray.DataArray) -> icclim._core.model.standard_variable.StandardVariable | None\n\n   Guesses the standard variable based on the metadata of `data`.\n\n   :param data: The input data.\n   :type data: DataArray\n\n   :returns: The guessed standard variable, or None if no standard variable is found.\n   :rtype: StandardVariable or None\n\n   .. rubric:: Notes\n\n   StandardVariableRegistry is used as a lookup table to find the standard variable\n   using the dataarray name or standard name attribute.\n\n"
                                },
                                {
                                    "line": 238,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: is_precipitation_amount(source: xarray.DataArray) -> bool\n\n   Return True if the source is a precipitation amount.\n\n   :param source: A DataArray object.\n   :type source: xr.DataArray\n\n   :returns: True if the source is a precipitation amount, False otherwise.\n   :rtype: bool\n\n   .. rubric:: Notes\n\n   Using pint, the rate is a quantity with a dimensionality of [time]^-1.\n\n"
                                },
                                {
                                    "line": 253,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: build_studied_data(original_da: xarray.core.dataarray.DataArray, time_range: collections.abc.Sequence[datetime.datetime | str] | None, ignore_Feb29th: bool, default_units: str | None) -> xarray.core.dataarray.DataArray\n\n   Preprocesss the input data to select the period of interest.\n\n   :param original_da: The original data array.\n   :type original_da: DataArray\n   :param time_range: The time range to select from the data array. If None, the entire time range is\n                      used.\n   :type time_range: Sequence[datetime | str] | None\n   :param ignore_Feb29th: Whether to ignore February 29th when processing the data.\n   :type ignore_Feb29th: bool\n   :param default_units: The default units to use for the data array if it is uniteless.\n                         If None and the data array is uniteless, \"units\" attribute remains unset.\n   :type default_units: str | None\n\n   :returns: The processed data array.\n   :rtype: DataArray\n\n   :raises InvalidIcclimArgumentError: If the given `time_range` is out of the dataset time period.\n\n"
                                },
                                {
                                    "line": 274,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: get_name_of_first_var(ds: xarray.core.dataset.Dataset) -> str\n\n   Get the name of the first variable in the given Dataset.\n\n   :param ds: The input Dataset.\n   :type ds: Dataset\n\n   :returns: The name of the first variable in the Dataset.\n   :rtype: str\n\n   :raises IndexError: If the Dataset is empty.\n\n"
                                },
                                {
                                    "line": 287,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: is_dataset_path(query: icclim._core.model.icclim_types.InFileBaseType) -> bool\n\n   Check if the given query is a valid dataset path.\n\n   :param query: The query to check. It can be a single path or a list/tuple of paths.\n   :type query: InFileBaseType\n\n   :returns: True if the query is a valid dataset path, False otherwise.\n   :rtype: bool\n\n   .. rubric:: Notes\n\n   A valid dataset path can be either a NetCDF path, a Zarr path, a glob path, or a\n   list/tuple of valid paths.\n\n"
                                },
                                {
                                    "line": 303,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: build_reference_da(original_da: xarray.core.dataarray.DataArray, base_period_time_range: collections.abc.Sequence[datetime.datetime | str] | None, only_leap_years: bool, percentile_min_value: pint.Quantity | None) -> xarray.core.dataarray.DataArray\n\n   Build a reference DataArray to be used for percentile doy computation.\n\n   :param original_da: The DataArray used as a base.\n   :type original_da: DataArray\n   :param base_period_time_range: The period to slice in the base DataArray.\n   :type base_period_time_range: Sequence[datetime | str] | None\n   :param only_leap_years: Flag to only use leap years (years with 366 days).\n   :type only_leap_years: bool\n   :param percentile_min_value: Optional, if set will replace every value from the base DataArray that are below\n                                the `percentile_min_value` with np.nan.\n   :type percentile_min_value: Quantity | None\n\n"
                                },
                                {
                                    "line": 318,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: get_dataarray_from_dataset(var_name: str | None, value: xarray.Dataset | str, standard_var: icclim._core.model.standard_variable.StandardVariable | None = None) -> xarray.DataArray\n\n   Extract a DataArray from a Dataset based on the provided variable name.\n\n   :param var_name: The name of the variable to extract from the Dataset. If None, the function\n                    will try to guess the variable based on the Dataset's contents.\n   :type var_name: str or None\n   :param value: The Dataset object or the path to the Dataset file.\n   :type value: xr.Dataset or str\n   :param standard_var: The standard variable used to find a matching variable in the Dataset.\n   :type standard_var: StandardVariable\n\n   :returns: The extracted DataArray.\n   :rtype: xr.DataArray\n\n   :raises InvalidIcclimArgumentError: If the variable name cannot be guessed and `var_name` is None.\n\n   .. rubric:: Notes\n\n   This function can be used to extract a specific variable from a Dataset object\n   or a Dataset file. If `var_name` is None, the function will try to guess the\n   variable based on the Dataset's contents.\n\n"
                                },
                                {
                                    "line": 342,
                                    "source": "./doc/source/references/api/icclim/_core/input_parsing/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _guess_dataset_var_names(standard_index: icclim._core.model.standard_index.StandardIndex, ds: xarray.core.dataset.Dataset) -> list[collections.abc.Hashable]\n\n   Try to guess the variable names.\n\n   The expected kind of variable of the index is used to guess the variable names."
                                },
                                {
                                    "line": 3,
                                    "source": "./doc/source/references/api/icclim/_core/generic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic\n\n"
                                },
                                {
                                    "line": 11,
                                    "source": "./doc/source/references/api/icclim/_core/generic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   functions/index.rst\n   generic_templates/index.rst\n   indicator/index.rst"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/generic/generic_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/generic/generic_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic.generic_templates\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/generic_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Jinja templates for the metadata of generic indices.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/generic/generic_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: IndicatorMetadata"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/generic/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/generic/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic.indicator\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the GenericIndicator class.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/generic/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: GenericIndicator(name: str, process: Callable[Ellipsis, xarray.DataArray], definition: str, check_vars: Callable[[list[icclim._core.climate_variable.ClimateVariable], GenericIndicator], None] | None = None, sampling_methods: list[str] | None = None, missing: str = 'from_context', missing_options: dict | None = None, qualifiers: tuple = ())\n\n\n\n\n   GenericIndicator are climate indicators wich are not specific to a particular domain.\n\n   They can be computed from any climate variable and are combined with `Threshold` objects\n   to create personalized indicators.\n\n   :param name: The name of the indicator.\n   :type name: str\n   :param process: The function that processes the indicator.\n   :type process: Callable[..., DataArray]\n   :param definition: The definition of the indicator.\n   :type definition: str\n   :param check_vars: A function that checks if the variables meet the indicator requirements.\n                      Defaults to None.\n   :type check_vars: Callable[[list[ClimateVariable], GenericIndicator], None], optional\n   :param sampling_methods: A list of sampling methods that can be used with the indicator.\n                            Defaults to None.\n   :type sampling_methods: list[str], optional\n   :param missing: The method for handling missing values. Defaults to \"from_context\".\n   :type missing: str, optional\n   :param missing_options: Additional options for handling missing values. Defaults to None.\n   :type missing_options: dict, optional\n   :param qualifiers: Additional qualifiers for the indicator. Defaults to ().\n   :type qualifiers: tuple, optional\n\n   .. attribute:: missing\n\n      The method for handling missing values.\n\n      :type: str\n\n   .. attribute:: missing_options\n\n      Additional options for handling missing values.\n\n      :type: dict | None\n\n   .. py:method:: preprocess(climate_vars: list[icclim._core.climate_variable.ClimateVariable], jinja_scope: dict[str, Any], output_frequency: icclim._core.frequency.Frequency, src_freq: icclim._core.frequency.Frequency, output_unit: str | None, coef: float | None, sampling_method: str) -> list[icclim._core.climate_variable.ClimateVariable]\n\n      Preprocesses the climate variables before computing the indicator.\n\n      :param climate_vars: The list of climate variables to be preprocessed.\n      :type climate_vars: list[ClimateVariable]\n      :param jinja_scope: The Jinja scope used for formatting the template.\n      :type jinja_scope: dict[str, Any]\n      :param output_frequency: The desired frequency of the output.\n      :type output_frequency: Frequency\n      :param src_freq: The source frequency of the climate variables.\n      :type src_freq: Frequency\n      :param output_unit: The desired output unit of the indicator. If None, no unit conversion is\n                          performed.\n      :type output_unit: str | None\n      :param coef: The coefficient to multiply the climate variable data with. If None,\n                   no multiplication is performed.\n      :type coef: float | None\n      :param sampling_method: The sampling method used for some specific indicators.\n                              See `difference_of_means` for example.\n      :type sampling_method: str\n\n      :returns: The preprocessed climate variables.\n      :rtype: list[ClimateVariable]\n\n\n   .. py:method:: postprocess(result: xarray.DataArray, climate_vars: list[icclim._core.climate_variable.ClimateVariable], output_freq: str, src_freq: str, indexer: dict, out_unit: str | None) -> xarray.DataArray\n\n      Postprocesses the result of the indicator computation.\n\n      :param result: The result of the indicator computation.\n      :type result: DataArray\n      :param climate_vars: The list of climate variables used for the computation.\n      :type climate_vars: list[ClimateVariable]\n      :param output_freq: The desired output frequency of the postprocessed result.\n      :type output_freq: str\n      :param src_freq: The source frequency of the input data.\n      :type src_freq: str\n      :param indexer: The indexer used to subset the input data.\n      :type indexer: dict\n      :param out_unit: The desired output unit of the postprocessed result.\n                       If None, no unit conversion is performed.\n      :type out_unit: str | None\n\n      :returns: The postprocessed result.\n      :rtype: DataArray\n\n\n"
                                },
                                {
                                    "line": 105,
                                    "source": "./doc/source/references/api/icclim/_core/generic/indicator/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _check_cf(climate_vars: list[icclim._core.climate_variable.ClimateVariable]) -> None\n\n   Compare metadata attributes to CF-Convention standards.\n\n   Default cfchecks use the specifications in `xclim.core.utils.VARIABLES`,\n   assuming the indicator's inputs are using the CMIP6/xclim variable names\n   correctly.\n   Variables absent from these default specs are silently ignored.\n\n   When subclassing this method, use functions decorated using\n   `xclim.core.options.cfcheck`."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic.functions\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Implementations of the generic indices computation methods.\n\n   These functions are not meant to be called directly, they are used by the\n   `GenericIndicatorRegistry` class to create the generic indices.\n   Each function is a reducer that takes a list of `ClimateVariable` instances and returns\n   a `DataArray` instance.\n   The `ClimateVariable` instances are used to extract the data and the thresholds needed\n   to compute the generic index.\n   The `DataArray` instance is the result of the computation of the generic index.\n\n   .. note::\n\n      You can call the respective generic index from icclim module, for example:\n      `icclim.count_occurrences(...)`.\n\n\n"
                                },
                                {
                                    "line": 28,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: count_occurrences(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, logical_link: icclim._core.model.logical_link.LogicalLink, date_event: bool, to_percent: bool, **kwargs) -> xarray.DataArray\n\n   Count the occurrences of exceedances of the threshold(s).\n\n   :param climate_vars: The list of climate variables containing the data and the threshold(s).\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The time frequency of the output.\n   :type resample_freq: Frequency\n   :param logical_link: The logical link to apply to the exceedances if multiple thresholds are\n                        provided.\n   :type logical_link: LogicalLink\n   :param date_event: Whether to return the date of the event.\n   :type date_event: bool\n   :param to_percent: Whether to return the result in percent.\n   :type to_percent: bool\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: The count of occurrences of exceedances.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 50,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: max_consecutive_occurrence(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, logical_link: icclim._core.model.logical_link.LogicalLink, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\n\n   Calculate the maximum number of consecutive occurrences of exceedances for a given set of climate variables.\n\n   :param climate_vars: The list of climate variables containing the data and the threshold(s).\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The time frequency of the output.\n   :type resample_freq: Frequency\n   :param logical_link: The logical link to apply when merging the exceedances.\n   :type logical_link: LogicalLink\n   :param date_event: Whether to include the dates of the exceedances in the result.\n   :type date_event: bool\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\n   :type source_freq_delta: timedelta\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: The maximum number of consecutive occurrences of exceedances.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 71,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: sum_of_spell_lengths(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, logical_link: icclim._core.model.logical_link.LogicalLink, min_spell_length: int, **kwargs) -> xarray.DataArray\n\n   Calculate the sum of the lengths of all spells in the data.\n\n   This function calculates the sum of the lengths of all spells in the data,\n   where a spell is defined as a consecutive occurrence of exceedances.\n\n   :param climate_vars: The list of climate variables containing the data and the threshold(s).\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The time frequency of the output.\n   :type resample_freq: Frequency\n   :param logical_link: The logical link to apply when merging the exceedances.\n   :type logical_link: LogicalLink\n   :param min_spell_length: The minimum length of a spell to consider.\n   :type min_spell_length: int\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: The sum of the lengths of all spells in the data.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 93,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: excess(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Compute the excess of a climate variable above a threshold using the 'reach' operator.\n\n   :param climate_vars: List of climate variables. Only the first variable is used.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The time frequency of the output.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: DataArray containing the computed excess values.\n   :rtype: DataArray\n\n   :raises InvalidIcclimArgumentError: If the threshold operator is not 'reach'.\n\n   .. rubric:: Notes\n\n   The excess is computed by subtracting the threshold from the climate variable data.\n   Only the values above the threshold are considered, and negative values are set to\n   zero.\n   The resulting excess values are then summed over the specified resample frequency.\n\n"
                                },
                                {
                                    "line": 117,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: deficit(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Compute the deficit of a climate variable below a threshold using the 'reach' operator.\n\n   :param climate_vars: List of climate variables. Only the first variable is used.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The time frequency of the output.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: DataArray containing the computed deficit values.\n   :rtype: DataArray\n\n   .. rubric:: Notes\n\n   The deficit is computed by subtracting the climate variable data from the threshold.\n   Only the values below the threshold are considered, and negative values are set to\n   zero.\n   The resulting deficit values are then summed over the specified resample frequency.\n\n"
                                },
                                {
                                    "line": 139,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: fraction_of_total(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, to_percent: bool, **kwargs) -> xarray.DataArray\n\n   Calculate the fraction of total for a given set of climate variables.\n\n   :param climate_vars: The list of climate variables containing the data and the threshold(s).\n                        Only one variable is expected in the list.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The resampling frequency.\n   :type resample_freq: Frequency\n   :param to_percent: Flag indicating whether to convert the result to percentage.\n   :type to_percent: bool\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: The fraction of total as a DataArray.\n   :rtype: DataArray\n\n   .. rubric:: Notes\n\n   This function calculates the fraction of total for a given set of climate variables.\n   The fraction of total is calculated by dividing the sum of values exceeding a\n   threshold by the total sum of values.\n\n   If the `to_percent` flag is set to True, the result will be multiplied by 100 and\n   the units will be set to \"%\". Otherwise, the units will be set to the value of\n   PART_OF_A_WHOLE_UNIT, which is 1.\n\n"
                                },
                                {
                                    "line": 167,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: maximum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, date_event: bool, **kwargs) -> xarray.DataArray\n\n   Calculate the maximum value of the given climate variables.\n\n   :param climate_vars: List of climate variables to calculate the maximum value for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param date_event: Flag indicating whether the output should include the date of the events.\n   :type date_event: bool\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: The maximum value of the climate variables.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 184,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: minimum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, date_event: bool, **kwargs) -> xarray.DataArray\n\n   Calculate the minimum value of the given climate variables.\n\n   :param climate_vars: List of climate variables to calculate the minimum value for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param date_event: Flag indicating whether the output should include the date of the events.\n   :type date_event: bool\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: The minimum value of the climate variables.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 201,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: average(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Compute the average of the given climate variables.\n\n   :param climate_vars: List of climate variables to compute the average for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The computed average as a DataArray.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 215,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: generic_sum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Compute the sum of the given climate variables.\n\n   :param climate_vars: List of climate variables to compute the sum for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The computed sum as a DataArray.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 229,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: standard_deviation(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Compute the standard deviation of the given climate variables.\n\n   This function calculates the standard deviation of the provided climate variables.\n   The standard deviation is a measure of the amount of variation or dispersion in the\n   data.\n   It quantifies the amount of variation or spread in the values of the climate\n   variables.\n\n   :param climate_vars: List of climate variables to compute the standard deviation for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The computed standard deviation as a DataArray.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 249,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: max_of_rolling_sum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, rolling_window_width: int, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\n\n   Compute the maximum value of the rolling sum of the given climate variables.\n\n   The rolling sum is the sum of values over a specified rolling window width.\n   The maximum value is the highest value obtained from the rolling sum.\n\n   :param climate_vars: List of climate variables to compute the maximum value of the rolling sum for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param rolling_window_width: The width of the rolling window, i.e., the number of values to include in each\n                                rolling sum.\n   :type rolling_window_width: int\n   :param date_event: A flag indicating whether the date of the events should be included in the\n                      output.\n   :type date_event: bool\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\n                             For daily data this is 1 day, for monthly data this is 1 month, etc.\n   :type source_freq_delta: timedelta\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The computed maximum value of the rolling sum as a DataArray.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 275,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: min_of_rolling_sum(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, rolling_window_width: int, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\n\n   Compute the minimum value of the rolling sum of the given climate variables.\n\n   The rolling sum is the sum of values over a specified rolling window width.\n   The minimum value is the lowest value obtained from the rolling sum.\n\n   :param climate_vars: List of climate variables to compute the minimum value of the rolling sum for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param rolling_window_width: The width of the rolling window, i.e., the number of values to include in each\n                                rolling sum.\n   :type rolling_window_width: int\n   :param date_event: A flag indicating whether the date of the events should be included in the\n                      output.\n   :type date_event: bool\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\n                             For daily data this is 1 day, for monthly data this is 1 month, etc.\n   :type source_freq_delta: timedelta\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The computed minimum value of the rolling sum as a DataArray.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 301,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: min_of_rolling_average(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, rolling_window_width: int, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\n\n   Compute the minimum value of the rolling average of the given climate variables.\n\n   The rolling average is the average of values over a specified rolling window width.\n   The minimum value is the lowest value obtained from the rolling average.\n\n   :param climate_vars: List of climate variables to compute the minimum value of the rolling average\n                        for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param rolling_window_width: The width of the rolling window, i.e., the number of values to include in each\n                                rolling average.\n   :type rolling_window_width: int\n   :param date_event: A flag indicating whether the date of the events should be included in the\n                      output.\n   :type date_event: bool\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\n                             For daily data this is 1 day, for monthly data this is 1 month, etc.\n   :type source_freq_delta: timedelta\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The computed minimum value of the rolling average as a DataArray.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 328,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: max_of_rolling_average(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, rolling_window_width: int, date_event: bool, source_freq_delta: datetime.timedelta, **kwargs) -> xarray.DataArray\n\n   Compute the minimum value of the rolling average of the given climate variables.\n\n   The rolling average is the average of values over a specified rolling window width.\n   The minimum value is the lowest value obtained from the rolling average.\n\n   :param climate_vars: List of climate variables to compute the minimum value of the rolling average\n                        for.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param rolling_window_width: The width of the rolling window, i.e., the number of values to include in each\n                                rolling average.\n   :type rolling_window_width: int\n   :param date_event: A flag indicating whether the date of the events should be included in the\n                      output.\n   :type date_event: bool\n   :param source_freq_delta: The time difference between consecutive data points in the source data.\n                             For daily data this is 1 day, for monthly data this is 1 month, etc.\n   :type source_freq_delta: timedelta\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The computed minimum value of the rolling average as a DataArray.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 355,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: mean_of_difference(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Calculate the mean of the difference between two climate variables.\n\n   This function calculates the mean of the difference between two climate variables\n   for each time step, and then resamples the resulting data based on the specified\n   frequency.\n   The resulting data array will have the same units as the study variable.\n\n   :param climate_vars: The two climate variables necessary to compute the indicator.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: Resampling frequency of the output.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: The mean of the difference as a xarray.DataArray.\n   :rtype: DataArray\n\n   .. rubric:: Notes\n\n   This is a generification of ECAD's DTR climate index.\n\n"
                                },
                                {
                                    "line": 379,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: difference_of_extremes(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Calculate the difference of extremes between two climate variables.\n\n   :param climate_vars: A list of climate variables.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: The frequency at which to resample the data.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The difference of extremes between the two climate variables.\n   :rtype: DataArray\n\n   .. rubric:: Notes\n\n   This function calculates the difference of extremes between two climate variables.\n   It first resamples the study variable to the specified frequency and take the\n   maximum per resampled chunk.\n   Then it resamples the reference variable to the same frequency and take the minimum\n   per resampled chunk.\n   Finally, for each chunk, it calculates the differences of theses maximum and\n   minimum values.\n   This is a generification of ECAD's ETR climate index.\n\n"
                                },
                                {
                                    "line": 404,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: mean_of_absolute_one_time_step_difference(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Mean of the absolute one-time-step difference between two climate variables.\n\n   This function calculates the mean of the absolute difference between two climate\n   variables\n   for each time step, and then resamples the resulting data based on the specified\n   frequency.\n   The resulting data array will have the same units as the study variable.\n\n   :param climate_vars: The two climate variables necessary to compute the indicator.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: Resampling frequency of the output.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n   :type \\*\\*kwargs: dict\n\n   :returns: The mean of the absolute one-time-step difference as a xarray.DataArray.\n   :rtype: DataArray\n\n   .. rubric:: Notes\n\n   This is a generification of ECAD's vDTR climate index.\n\n"
                                },
                                {
                                    "line": 429,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: difference_of_means(climate_vars: list[icclim._core.climate_variable.ClimateVariable], to_percent: bool, resample_freq: icclim._core.frequency.Frequency, sampling_method: str, is_compared_to_reference: bool, **kwargs) -> xarray.DataArray\n\n   Calculate the difference of means between two climate variables.\n\n   :param climate_vars: A studied climate variable and a reference climate variable.\n   :type climate_vars: list[ClimateVariable]\n   :param to_percent: If True, the result will be converted to percentage.\n   :type to_percent: bool\n   :param resample_freq: Resampling frequency of the output.\n   :type resample_freq: Frequency\n   :param sampling_method: The method used for resampling. It can be either 'group_by', 'resample', or\n                           'group_by_ref_and_resample_study'.\n                           'group_by' will group the data by the specified frequency, for example every\n                           data of every January together.\n                           'resample' will resample the data to the specified frequency, for example every\n                           days of each month independently together.\n                           'group_by_ref_and_resample_study' will group the reference data by the specified\n                           frequency and resample the study data to the same frequency.\n                           This last method allows for example to compare each January, independently, of\n                           the study period to every January of the reference period.\n                           This is typically used to compare the each month of the studied period\n                           to a normal (the reference) of many aggregated years.\n   :type sampling_method: str\n   :param is_compared_to_reference: If True, check if the sampling method is 'resample' and raise an error if it is.\n                                    It does not make sense to resample the reference variable if it is already a\n                                    subsample of the studied variable.\n   :type is_compared_to_reference: bool\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The difference of means between the two climate variables.\n   :rtype: DataArray\n\n   .. rubric:: Notes\n\n   This is a generification of the anomaly climate index.\n\n"
                                },
                                {
                                    "line": 466,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: percentile(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, **kwargs) -> xarray.DataArray\n\n   Calculate the percentile of the given climate variable.\n\n   :param climate_vars: A single climate variable within a list.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: Resampling frequency of the output.\n   :type resample_freq: Frequency\n   :param \\*\\*kwargs: Ignored keyword arguments (for compatibility).\n\n   :returns: The calculated percentile as a DataArray.\n   :rtype: DataArray\n\n   .. rubric:: Notes\n\n   This function calculates the percentile of the given climate variables\n   by resampling the data based on the provided frequency and then\n   calculating the corresponding quantile using the specified interpolation method.\n\n   The resulting DataArray contains the percentiles as the 'percentiles'\n   coordinate variable.\n\n"
                                },
                                {
                                    "line": 489,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: get_couple_of_var(climate_vars: list[icclim._core.climate_variable.ClimateVariable], indicator: str) -> tuple[xarray.DataArray, xarray.DataArray]\n\n   Get exactly two climate variables to compute a climate indicator.\n\n   :param climate_vars: A list of climate variables.\n   :type climate_vars: list[ClimateVariable]\n   :param indicator: The name of the indicator to be computed.\n   :type indicator: str\n\n   :returns: A tuple containing two DataArray objects representing the study variable and\n             the reference variable.\n   :rtype: tuple[DataArray, DataArray]\n\n   :raises InvalidIcclimArgumentError: If the number of climate variables is not equal to 2.\n       If any of the two variable has a threshold.\n\n   .. rubric:: Notes\n\n   This function is used to extract a couple of climate variables needed for computing\n   an indicator.\n   The function checks the number of climate variables and raises an error\n   if it is not equal to 2 or if thresholds are present.\n\n"
                                },
                                {
                                    "line": 513,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _run_simple_reducer(climate_vars: list[icclim._core.climate_variable.ClimateVariable], resample_freq: icclim._core.frequency.Frequency, reducer_op: Callable[Ellipsis, xarray.DataArray], date_event: bool, must_convert_rate: bool = False) -> xarray.DataArray\n\n   Apply a simple reducer operation on climate variables.\n\n   :param climate_vars: List of climate variables to be processed.\n   :type climate_vars: list[ClimateVariable]\n   :param resample_freq: Frequency at which the data should be resampled.\n   :type resample_freq: Frequency\n   :param reducer_op: Reducer operation to be applied on the data.\n   :type reducer_op: Callable[..., DataArray]\n   :param date_event: Flag indicating whether the date when the event occurred should be added\n                      as a coordinate variable.\n                      Only works for `max` and `min` reducers.\n                      Defaults to False.\n   :type date_event: bool\n   :param must_convert_rate: Flag indicating whether the data should be converted from rate to amount.\n                             Defaults to False.\n   :type must_convert_rate: bool, optional\n\n   :returns: Result of the reducer operation applied on the climate variables.\n   :rtype: DataArray\n\n"
                                },
                                {
                                    "line": 536,
                                    "source": "./doc/source/references/api/icclim/_core/generic/functions/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: get_single_var(climate_vars: list[icclim._core.climate_variable.ClimateVariable]) -> tuple[xarray.DataArray, icclim._core.model.threshold.Threshold | None]\n\n   Get the single variable and its threshold (if available).\n\n   :param climate_vars: A list of ClimateVariable objects.\n   :type climate_vars: list[ClimateVariable]\n\n   :returns: A tuple containing the single variable's data array and its threshold\n             (if available).\n   :rtype: tuple[DataArray, Threshold | None]"
                                },
                                {
                                    "line": 3,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic.threshold\n\n"
                                },
                                {
                                    "line": 11,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   basic/index.rst\n   bounded/index.rst\n   percentile/index.rst"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/basic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/basic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic.threshold.basic\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/basic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   BasicThreshold module.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/basic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: BasicThreshold(operator: icclim._core.model.operator.Operator | str, value: icclim._core.model.threshold.ThresholdValueType, unit: str | None = None, initial_query: str | None = None, threshold_min_value: pint.Quantity | None = None, threshold_var_name: str | None = None, offset: pint.Quantity | None = None, **kwargs)\n\n\n\n\n   Pint ready simple threshold (e.g. \"> 300 K\").\n\n   :param operator: The operator used for the threshold comparison.\n   :type operator: Operator or str\n   :param value: The threshold value(s) to compare against.\n   :type value: ThresholdValueType\n   :param unit: The unit of the threshold value(s).\n   :type unit: str, optional\n   :param initial_query: The initial query used to build the threshold.\n   :type initial_query: str, optional\n   :param threshold_min_value: The minimum value for the threshold.\n   :type threshold_min_value: pint.Quantity, optional\n   :param threshold_var_name: The name of the threshold variable.\n   :type threshold_var_name: str, optional\n   :param offset: The offset to be applied to the threshold value(s).\n   :type offset: pint.Quantity, optional\n\n   .. rubric:: Notes\n\n   When built, `value` is always turned into a `xarray.DataArray`.\n   The `unit` property has a setter that will attempt a unit conversion using\n   units found in xclim's pint registry.\n\n   The actual unit can be overridden by modifying `value.attrs[\"units\"]` directly.\n\n   .. py:property:: unit\n      :type: str | None\n\n      The unit of the threshold value(s).\n\n   .. py:method:: format_metadata(jinja_scope: dict[str, Any], jinja_env: jinja2.Environment, **kwargs) -> icclim._core.generic.threshold.threshold_templates.ThresholdMetadata\n\n      Generate the metadata for the threshold.\n\n      These metadata are used to fill the generic template.\n\n      :param jinja_scope: The jinja scope, it contains the variables to be used in the jinja template.\n      :type jinja_scope: dict\n      :param jinja_env: The jinja environment, it contains the jinja rendering engine.\n      :type jinja_env: jinja2.Environment\n      :param \\*\\*kwargs: Additional keyword arguments, ignored for compatibility with other\n                         `format_metadata` methods.\n\n      :returns: The metadata for the threshold.\n      :rtype: ThresholdMetadata\n\n\n   .. py:method:: compute(comparison_data: xarray.DataArray, override_op: Callable[[xarray.DataArray, xarray.DataArray], xarray.DataArray] | None = None, **kwargs) -> xarray.DataArray\n\n      Compute the threshold exceedance value.\n\n      :param comparison_data: The data array to compare with the threshold value.\n      :type comparison_data: xr.DataArray\n      :param override_op: A custom override function to compute the threshold value.\n                          If provided, this function will be used instead of the default operator.\n      :type override_op: Callable[[DataArray, DataArray], DataArray] | None, optional\n      :param \\*\\*kwargs: Additional keyword arguments.\n\n      :returns: The computed threshold value.\n      :rtype: DataArray\n\n      .. rubric:: Notes\n\n      If `override_op` is not None, the `override_op` function will be used to\n      compute the threshold exceedance using the `comparison_data` and `self.value`\n      as inputs.\n      If `override_op` is None, the default operator defined in `self.operator`\n      will be used to compute the threshold exceedance."
                                },
                                {
                                    "line": 3,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic.threshold.threshold_templates\n\n"
                                },
                                {
                                    "line": 12,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: ThresholdMetadata\n\n\n\n\n   TypedDict of the threshold metadata.\n\n   Used to fill the threshold template.\n\n   .. attribute:: long_name\n\n      Long name of the threshold\n\n      :type: str\n\n   .. attribute:: short_name\n\n      Short name of the threshold\n\n      :type: str\n\n   .. attribute:: standard_name\n\n      Standard name of the threshold. Ressemble the CF convention standard names, but is not actually standard.\n\n      :type: str\n\n"
                                },
                                {
                                    "line": 40,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: ThresholdTemplateDict\n\n"
                                },
                                {
                                    "line": 43,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/threshold_templates/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: PercentileTemplateConfig"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/percentile/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/percentile/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic.threshold.percentile\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/percentile/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Percentile based threshold module.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/percentile/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: PercentileThreshold(operator: str | icclim._core.model.operator.Operator, value: xarray.DataArray | float | collections.abc.Sequence[float], unit: str | None = None, doy_window_width: int = DEFAULT_DOY_WINDOW, only_leap_years: bool = False, interpolation: icclim._core.model.quantile_interpolation.QuantileInterpolation | str = QuantileInterpolationRegistry.MEDIAN_UNBIASED, reference_period: collections.abc.Sequence[datetime.datetime | str] | None = None, threshold_min_value: pint.Quantity | None = None, initial_query: str | None = None, threshold_var_name: str | None = None, **kwargs)\n\n\n\n\n   Percentile based threshold (e.g. \"<= 10 doy_per\").\n\n   The percentiles to be computed are expected to be either:\n\n   * \"doy percentiles\" (unit: \"doy_per\"). They are usually used for temperatures\n     indices such as the ECAD :ref:`tx90p <ecad_functions_api>`.\n     These percentiles are computed per day of year (doy) and by aggregating\n     values on the time axis ranged by ``reference_period``, using the\n     ``doy_window_width`` parameter to control the time axis window of aggregation.\n     The resulting `value` is a DataArray with a \"dayofyear\" dimension ranging from\n     0 to 365 with one value per day of the year.\n   * \"period percentiles\" (unit: \"period_per\"). They are usually used for liquide\n     precipitation indices such as the ECAD :ref:`r75p <ecad_functions_api>`\n     or even :ref:`r75ptot <ecad_functions_api>`.\n     These percentiles are computed per grid cell on the period ranged by\n     ``reference_period``.\n     The resulting ``value`` is a DataArray with per grid cell values and no time axis.\n\n   ``is_ready`` becomes True when `prepare` method has been called, the actual\n   percentiles are then computed and accessible in ``value`` property.\n   Once ``is_ready`` is True, ``unit`` property can be set and will attempt a pint unit\n   conversion similar to what is done on ``BasicThreshold``.\n   Before that, setting unit has no effect.\n\n   .. py:property:: unit\n      :type: str | None\n\n      The unit of the threshold.\n\n   .. py:property:: value\n      :type: icclim._core.input_parsing.PercentileDataArray\n\n      The computed percentile threshold.\n\n      :raises RuntimeError: If the threshold is not ready (prepare has not been called).\n\n   .. py:method:: prepare(studied_data: xarray.DataArray) -> None\n\n      Prepare the data for calculating percentiles.\n\n      :param studied_data: The input data to be prepared.\n      :type studied_data: DataArray\n\n      :raises NotImplementedError: If the percentile unit is unknown.\n\n      :rtype: None\n\n\n   .. py:method:: format_metadata(*, jinja_scope: dict[str, Any], jinja_env: jinja2.Environment, src_freq: icclim._core.frequency.Frequency, must_run_bootstrap: bool = False, **kwargs) -> icclim._core.generic.threshold.threshold_templates.ThresholdMetadata\n\n      Generate the metadata for the threshold.\n\n      These metadata are used to fill the generic template.\n\n      :param jinja_scope: The jinja scope, it contains the variables to be used in the jinja template.\n      :type jinja_scope: dict\n      :param jinja_env: The jinja environment, it contains the jinja rendering engine.\n      :type jinja_env: jinja2.Environment\n      :param src_freq: The frequency of the source data.\n      :type src_freq: Frequency\n      :param must_run_bootstrap: Whether to run bootstrap, by default False.\n      :type must_run_bootstrap: bool, optional\n\n      :returns: The metadata for the threshold.\n      :rtype: ThresholdMetadata\n\n\n   .. py:method:: compute(comparison_data: xarray.DataArray, override_op: Callable[[xarray.DataArray, xarray.DataArray], xarray.DataArray] | None = None, **kwargs) -> xarray.DataArray\n\n      Compute the percentile threshold.\n\n      :param comparison_data: The data array to compare with the threshold.\n      :type comparison_data: xr.DataArray\n      :param override_op: An optional override operator to use instead of the default operator.\n      :type override_op: Callable[[DataArray, DataArray], DataArray] | None, optional\n      :param \\*\\*kwargs: Additional keyword arguments.\n                         The `freq` parameter is used to specify the frequency of the data.\n                         The `bootstrap` parameter is used to specify whether to run bootstrap.\n\n      :returns: The computed percentile threshold.\n      :rtype: DataArray\n\n      :raises RuntimeError: If the PercentileThreshold is not ready. You must first call `.prepare`\n          with a `studied_data` parameter in order to prepare the threshold\n          for computation."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/bounded/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/bounded/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim._core.generic.threshold.bounded\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/bounded/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   BoundedThreshold module.\n\n   A `BoundedThreshold` is a composite threshold that binds two other thresholds\n   for example \"> 95 doy_per AND >= 30 deg_C\".\n\n\n"
                                },
                                {
                                    "line": 18,
                                    "source": "./doc/source/references/api/icclim/_core/generic/threshold/bounded/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: BoundedThreshold(thresholds: collections.abc.Sequence[icclim._core.model.threshold.Threshold | str | icclim._core.model.threshold.ThresholdBuilderInput], logical_link: icclim._core.model.logical_link.LogicalLink, initial_query: str | None, **kwargs)\n\n\n\n\n   Threshold that binds two other thresholds (e.g. \"> 95 doy_per AND >= 30 deg_C\").\n\n   The logical link must be either \"and\" or \"or\".\n\n   .. py:property:: unit\n      :type: str | None\n\n      The unit of the bounded threshold.\n\n      :returns: The unit of the threshold if both thresholds have the same unit,\n                otherwise None.\n      :rtype: str | None\n\n   .. py:method:: compute(comparison_data: xarray.DataArray, override_op: Callable[[xarray.DataArray, xarray.DataArray], xarray.DataArray] | None = None, **kwargs) -> xarray.DataArray\n\n      Compute the threshold exceedance value.\n\n      Uses the logical link to combine the result of both thresholds.\n\n      :param comparison_data: The data array to compare with the threshold value.\n      :type comparison_data: xr.DataArray\n      :param override_op: A custom override function to compute the threshold value.\n                          If provided, this function will be used instead of the default operator.\n      :type override_op: Callable[[DataArray, DataArray], DataArray] | None, optional\n      :param \\*\\*kwargs: Additional keyword arguments.\n\n      :returns: The computed threshold value.\n      :rtype: DataArray\n\n      .. rubric:: Notes\n\n      If `override_op` is not None, the `override_op` function will be used to\n      compute the thresholds exceedances on both thresholds.\n\n\n   .. py:method:: format_metadata(*, jinja_scope: dict[str, Any], jinja_env: jinja2.Environment, **kwargs) -> icclim._core.generic.threshold.threshold_templates.ThresholdMetadata\n\n      Generate the metadata for the bounded threshold.\n\n      These metadata are used to fill the generic template.\n\n      :param jinja_scope: The jinja scope, it contains the variables to be used in the jinja template.\n      :type jinja_scope: dict\n      :param jinja_env: The jinja environment, it contains the jinja rendering engine.\n      :type jinja_env: jinja2.Environment\n      :param \\*\\*kwargs: Additional keyword arguments, ignored for compatibility with other\n                         `format_metadata` methods.\n\n      :returns: The metadata for the threshold.\n      :rtype: ThresholdMetadata"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/main/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/main/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.main\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/main/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Main entry point of icclim.\n\n   This module expose icclim principal function, notably `index` which is use by the\n   generated API.\n   A convenience function `indices` is also exposed to compute multiple indices at once.\n\n\n"
                                },
                                {
                                    "line": 19,
                                    "source": "./doc/source/references/api/icclim/main/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: indices(index_group: collections.abc.Sequence[str] | str | icclim._core.model.index_group.IndexGroup | icclim._core.model.standard_index.StandardIndex, *, ignore_error: bool = False, **kwargs) -> xarray.core.dataset.Dataset\n\n   Compute multiple indices at the same time.\n\n   The input dataset(s) must include all the necessary variables.\n   It can only be used with keyword arguments (kwargs).\n\n   :param index_group: Either the name of an IndexGroup or an instance of IndexGroup or a list\n                       of index short names or the name(s) of standard variable(s) (such as 'tasmax').\n                       The value \"all\" can also be used to compute every indices.\n                       Note that the input given by ``in_files`` must include all the necessary\n                       variables to compute the indices of this group.\n   :type index_group: \"all\" | str | IndexGroup | list[str]\n   :param ignore_error: When True, ignore indices that fails to compute. This is option is particularly\n                        useful when used with `index_group='all'` to compute everything that can be\n                        computed given the input.\n   :type ignore_error: bool\n   :param kwargs: ``icclim.index`` keyword arguments.\n   :type kwargs: Dict\n\n   :returns: A Dataset with one data variable per index.\n   :rtype: xr.Dataset\n\n   .. rubric:: Notes\n\n   If ``output_file`` is part of kwargs, the result is written in a single netCDF\n   file, which will contain all the index results of this group.\n\n"
                                },
                                {
                                    "line": 48,
                                    "source": "./doc/source/references/api/icclim/main/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: indice(*args, **kwargs) -> xarray.core.dataset.Dataset\n\n   Proxy for `icclim.index` function.\n\n   Deprecated: to be deleted in a future release.\n\n"
                                },
                                {
                                    "line": 55,
                                    "source": "./doc/source/references/api/icclim/main/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: index(in_files: icclim._core.model.icclim_types.InFileLike, index_name: str | icclim._core.generic.indicator.GenericIndicator | icclim._core.model.standard_index.StandardIndex | None = None, var_name: str | collections.abc.Sequence[str] | None = None, slice_mode: icclim._core.model.icclim_types.FrequencyLike | icclim._core.frequency.Frequency = 'year', time_range: collections.abc.Sequence[datetime.datetime | str] | None = None, out_file: str | None = None, threshold: str | icclim._core.model.threshold.Threshold | collections.abc.Sequence[str | icclim._core.model.threshold.Threshold] | None = None, callback: Callable[[int], None] = log.callback, callback_percentage_start_value: int = 0, callback_percentage_total: int = 100, base_period_time_range: collections.abc.Sequence[datetime.datetime] | collections.abc.Sequence[str] | None = None, doy_window_width: int = 5, only_leap_years: bool = False, ignore_Feb29th: bool = False, interpolation: str | icclim._core.model.quantile_interpolation.QuantileInterpolation = 'median_unbiased', out_unit: str | None = None, netcdf_version: str | icclim._core.model.netcdf_version.NetcdfVersion = 'NETCDF4', user_index: icclim._core.legacy.user_index.model.UserIndexDict | None = None, save_thresholds: bool = False, logs_verbosity: icclim.logger.Verbosity | str = 'LOW', date_event: bool = False, min_spell_length: int | None = 6, rolling_window_width: int | None = 5, sampling_method: icclim._core.model.icclim_types.SamplingMethodLike = RESAMPLE_METHOD, *, window_width: int | None = None, save_percentile: bool | None = None, indice_name: str | None = None, user_indice: icclim._core.legacy.user_index.model.UserIndexDict | None = None, transfer_limit_Mbytes: float | None = None) -> xarray.core.dataset.Dataset\n\n   Compute climate index.\n\n   This is the main entry point for icclim.\n\n   :param in_files: Absolute path(s) to NetCDF dataset(s), including OPeNDAP URLs,\n                    or path to zarr store, or xarray.Dataset or xarray.DataArray.\n   :type in_files: str | list[str] | Dataset | DataArray | InputDictionary\n   :param index_name: Climate index name.\n                      For ECA&D index, case insensitive name used to lookup the index.\n                      For user index, it's the name of the output variable.\n   :type index_name: str | StandardIndex\n   :param var_name: ``optional`` Target variable name to process corresponding to ``in_files``.\n                    If None (default) on ECA&D index, the variable is guessed based on the\n                    climate index wanted.\n                    Mandatory for a user index.\n   :type var_name: str | list[str] | None\n   :param slice_mode: Type of temporal aggregation:\n                      The possibles values are ``{\"year\", \"month\", \"DJF\", \"MAM\", \"JJA\", \"SON\",\n                      \"ONDJFM\" or \"AMJJAS\", (\"season\", [1,2,3]), (\"month\", [1,2,3,])}``\n                      (where season and month lists can be customized) or any valid pandas\n                      frequency.\n                      A season can also be defined between two exact dates:\n                      ``(\"season\", (\"19 july\", \"14 august\"))``.\n                      Default is \"year\".\n                      See :ref:`slice_mode` for details.\n   :type slice_mode: FrequencyLike | Frequency\n   :param time_range: ``optional`` Temporal range: upper and lower bounds for temporal subsetting.\n                      If ``None``, whole period of input files will be processed.\n                      The dates can either be given as instance of datetime.datetime or as string\n                      values. For strings, many format are accepted.\n                      Default is ``None``.\n   :type time_range: list[datetime.datetime ] | list[str]  | tuple[str, str] | None\n   :param out_file: Output NetCDF file name (default: \"icclim_out.nc\" in the current directory).\n                    Default is \"icclim_out.nc\".\n                    If the input ``in_files`` is a ``Dataset``, ``out_file`` field is ignored.\n                    Use the function returned value instead to retrieve the computed value.\n                    If ``out_file`` already exists, icclim will overwrite it!\n   :type out_file: str | None\n   :param threshold: ``optional`` User defined threshold for certain indices.\n                     Default depend on the index, see their individual definition.\n                     When a list of threshold is provided, the index will be computed for each\n                     thresholds.\n   :type threshold: float | list[float] | None\n   :param transfer_limit_Mbytes: Deprecated, does not have any effect.\n   :type transfer_limit_Mbytes: float\n   :param callback: ``optional`` Progress bar printing. If ``None``, progress bar will not be\n                    printed.\n   :type callback: Callable[[int], None]\n   :param callback_percentage_start_value: ``optional`` Initial value of percentage of the progress bar (default: 0).\n   :type callback_percentage_start_value: int\n   :param callback_percentage_total: ``optional`` Total percentage value (default: 100).\n   :type callback_percentage_total: int\n   :param base_period_time_range: ``optional`` Temporal range of the reference period.\n                                  The dates can either be given as instance of datetime.datetime or as string\n                                  values.\n                                  It is used either:\n                                  #. to compute percentiles if threshold is filled.\n                                  When missing, the studied period is used to compute percentiles.\n                                  The study period is either the dataset filtered by `time_range` or the whole\n                                  dataset if `time_range` is missing.\n                                  For day of year percentiles (doy_per), on extreme percentiles the\n                                  overlapping period between `base_period_time_range` and the study period is\n                                  bootstrapped.\n                                  #. to compute a reference period for indices such as difference_of_mean\n                                  (a.k.a anomaly) if a single variable is given in input.\n   :type base_period_time_range: list[datetime.datetime ] | list[str] | tuple[str, str] | None\n   :param doy_window_width: ``optional`` Window width used to aggreagte day of year values when computing\n                            day of year percentiles (doy_per)\n                            Default: 5 (5 days).\n   :type doy_window_width: int\n   :param min_spell_length: ``optional`` Minimum spell duration to be taken into account when computing\n                            the sum_of_spell_lengths.\n   :type min_spell_length: int\n   :param rolling_window_width: ``optional`` Window width of the rolling window for indicators such as\n                                `{max_of_rolling_sum, max_of_rolling_average, min_of_rolling_sum, min_of_rolling_average}`\n   :type rolling_window_width: int\n   :param only_leap_years: ``optional`` Option for February 29th (default: False).\n   :type only_leap_years: bool\n   :param ignore_Feb29th: ``optional`` Ignoring or not February 29th (default: False).\n   :type ignore_Feb29th: bool\n   :param interpolation: ``optional`` Interpolation method to compute percentile values:\n                         ``{\"linear\", \"median_unbiased\"}``\n                         Default is \"median_unbiased\", a.k.a type 8 or method 8.\n                         Ignored for non percentile based indices.\n   :type interpolation: str | QuantileInterpolation | None\n   :param out_unit: ``optional`` Output unit for certain indices: \"days\" or \"%\"\n                    (default: \"days\").\n   :type out_unit: str | None\n   :param netcdf_version: ``optional`` NetCDF version to create (default: \"NETCDF3_CLASSIC\").\n   :type netcdf_version: str | NetcdfVersion\n   :param user_index: ``optional`` A dictionary with parameters for user defined index.\n                      See :ref:`Custom indices`.\n                      Ignored for ECA&D indices.\n   :type user_index: UserIndexDict\n   :param save_thresholds: ``optional`` True if the thresholds should be saved within the resulting\n                           netcdf file (default: False).\n   :type save_thresholds: bool\n   :param date_event: When True the date of the event (such as when a maximum is reached) will be\n                      stored in coordinates variables.\n                      **warning** This option may significantly slow down computation.\n   :type date_event: bool\n   :param logs_verbosity: ``optional`` Configure how verbose icclim is.\n                          Possible values: ``{\"LOW\", \"HIGH\", \"SILENT\"}`` (default: \"LOW\")\n   :type logs_verbosity: str | Verbosity\n   :param sampling_method: Choose whether the output sampling configured in `slice_mode` is a\n                           `groupby` operation or a `resample` operation (as per xarray definitions).\n                           Possible values:\n                           ``{\"groupby\", \"resample\", \"groupby_ref_and_resample_study\"}``\n                           (default: \"resample\")\n                           `groupby_ref_and_resample_study` may only be used when computing the\n                           `difference_of_means` (a.k.a the anomaly).\n   :type sampling_method: str\n   :param indice_name: DEPRECATED, use index_name instead.\n   :type indice_name: str | None\n   :param user_indice: DEPRECATED, use user_index instead.\n   :type user_indice: dict | None\n   :param window_width: DEPRECATED, use doy_window_width, min_spell_length or rolling_window_width\n                        instead.\n   :type window_width: int\n   :param save_percentile: DEPRECATED, use save_thresholds instead.\n   :type save_percentile: bool\n\n"
                                },
                                {
                                    "line": 180,
                                    "source": "./doc/source/references/api/icclim/main/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _write_output_file(result_ds: xarray.Dataset, input_time_encoding: dict | None, netcdf_version: icclim._core.model.netcdf_version.NetcdfVersion, file_path: str) -> None\n\n   Write `result_ds` to a netCDF file on `out_file` path.\n\n"
                                },
                                {
                                    "line": 185,
                                    "source": "./doc/source/references/api/icclim/main/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: _must_add_reference_var(climate_vars_dict: dict[str, icclim._core.model.in_file_dictionary.InFileDictionary], reference_period: collections.abc.Sequence[str] | None) -> bool\n\n   Check if the reference variable must be added to the input variables.\n\n   Return True whenever the input has no threshold and only one studied variable but\n   there is a reference period.\n   Example case: the anomaly of tx(1960-2100) by tx(1960-1990)."
                                },
                                {
                                    "line": 3,
                                    "source": "./doc/source/references/api/icclim/ecad/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/ecad/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.ecad\n"
                                },
                                {
                                    "line": 8,
                                    "source": "./doc/source/references/api/icclim/ecad/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   European Climate Assesment & Dataset (ECAD) indices.\n\n   The ECAD indices public API, via `icclim.ecad` package, is generated from the\n   `icclim.ecad.registry.EcadIndexRegistry` registry definitions.\n   The parameters of the functions are specialized to each index but are all taken from\n   `icclim.main.index` general function.\n   In other words, the ECAD indices in `icclim.ecad` package are specializations\n   of `icclim.main.index` for ECAD indices.\n\n\n"
                                },
                                {
                                    "line": 23,
                                    "source": "./doc/source/references/api/icclim/ecad/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   binding/index.rst\n   registry/index.rst\n\n"
                                },
                                {
                                    "line": 35,
                                    "source": "./doc/source/references/api/icclim/ecad/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"automodule\".",
                                    "full_message": "Unknown directive type \"automodule\".\n\n.. automodule:: icclim._generated._ecad\n   :members:\n\n   .. autosummary::\n    :nosignatures:\n\n    .. Documentation below is auto-generated with the extract-icclim-funs.py script\n    .. Generated API comment:Begin\n      tg\n     tn\n     tx\n     dtr\n     etr\n     vdtr\n     su\n     tr\n     wsdi\n     tg90p\n     tn90p\n     tx90p\n     txx\n     tnx\n     csu\n     gd4\n     fd\n     cfd\n     hd17\n     id\n     tg10p\n     tn10p\n     tx10p\n     txn\n     tnn\n     csdi\n     cdd\n     prcptot\n     rr1\n     sdii\n     cwd\n     rr\n     r10mm\n     r20mm\n     rx1day\n     rx5day\n     r75p\n     r75ptot\n     r95p\n     r95ptot\n     r99p\n     r99ptot\n     sd\n     sd1\n     sd5cm\n     sd50cm\n     cd\n     cw\n     wd\n     ww\n     fxx\n     fg6bft\n     fgcalm\n     fg\n     ddnorth\n     ddeast\n     ddsouth\n     ddwest\n     gsl\n     spi6\n     spi3\n     pp\n     ss\n     rh\n"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/ecad/binding/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/ecad/binding/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.ecad.binding\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/ecad/binding/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Proxy icclim indicators that redirect to xclim indicators.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/ecad/binding/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: GrowingSeasonLength\n\n\n\n\n   Proxy for xclim.growing_season_length.\n\n   icclim indicator that redirect to xclim `growing_season_length` indicator.\n\n   .. py:method:: preprocess(*args, **kwargs) -> list[xarray.DataArray]\n      :abstractmethod:\n\n      Not implemented as xclim indicator already handle pre/post processing.\n\n\n   .. py:method:: postprocess(*args, **kwargs) -> xarray.DataArray\n      :abstractmethod:\n\n      Not implemented as xclim indicator already handle pre/post processing.\n\n\n"
                                },
                                {
                                    "line": 37,
                                    "source": "./doc/source/references/api/icclim/ecad/binding/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: StandardizedPrecipitationIndex3\n\n\n\n\n   Proxy for xclim.atmos.standardized_precipitation_index.\n\n   icclim indicator that redirect to xclim `standardized_precipitation_index`\n   indicator, with 3 MS frequency preconfigured.\n\n   .. py:method:: preprocess(*args, **kwargs) -> list[xarray.DataArray]\n      :abstractmethod:\n\n      Not implemented as xclim indicator already handle pre/post processing.\n\n\n   .. py:method:: postprocess(*args, **kwargs) -> xarray.DataArray\n      :abstractmethod:\n\n      Not implemented as xclim indicator already handle pre/post processing.\n\n\n"
                                },
                                {
                                    "line": 60,
                                    "source": "./doc/source/references/api/icclim/ecad/binding/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: StandardizedPrecipitationIndex6\n\n\n\n\n   Proxy for xclim.atmos.standardized_precipitation_index.\n\n   icclim indicator that redirect to xclim `standardized_precipitation_index`\n   indicator, with 6 MS configured.\n\n   .. py:method:: preprocess(*args, **kwargs) -> list[xarray.DataArray]\n      :abstractmethod:\n\n      Not implemented as xclim indicator already handle pre/post processing.\n\n\n   .. py:method:: postprocess(*args, **kwargs) -> xarray.DataArray\n      :abstractmethod:\n\n      Not implemented as xclim indicator already handle pre/post processing."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/ecad/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/ecad/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.ecad.registry\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/ecad/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Module for the ECA&D indices.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/ecad/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: EcadIndexRegistry\n\n\n\n\n   Registry for ECAD indices.\n\n   This class represents a registry for ECAD indices. It provides a collection of\n   standard indices used for climate analysis.\n\n   .. py:method:: get_item_aliases(item: icclim._core.model.standard_index.StandardIndex) -> list[str]\n      :staticmethod:\n\n      Get the aliases of an item.\n\n\n   .. py:method:: to_list() -> list[str]\n      :classmethod:\n\n      Get a printable list of all indices in the registry."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/exception/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/exception/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.exception\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/exception/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain icclim-specific exceptions.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/exception/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:exception\".",
                                    "full_message": "Unknown directive type \"py:exception\".\n\n.. py:exception:: InvalidIcclimArgumentError(msg: str, source_err: Exception | None = None)\n\n\n\n\n   Exception raised for erroneous input arguments.\n\n   .. attribute:: msg\n\n      Error description.\n\n      :type: str\n\n   .. attribute:: source_err\n\n      The source of the error, if any.\n\n      :type: Exception or None, optional\n\n   .. method:: __str__()\n\n      Returns a string representation of the error message."
                                },
                                {
                                    "line": 3,
                                    "source": "./doc/source/references/api/icclim/dcsc/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/dcsc/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.dcsc\n"
                                },
                                {
                                    "line": 8,
                                    "source": "./doc/source/references/api/icclim/dcsc/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Direction de la Climatologie et des Services Climatiques (DCSC) indices.\n\n   Meteo France's Direction de la Climatologie et des Services Climatiques (DCSC)\n   specialized indices.\n\n   The DCSC indices public API, via the `icclim.dcsc` package, is generated from the\n   `icclim.dcsc.registry.DcscIndexRegistry` registry definitions.\n   The parameters  of the functions are specialized to each index but are all taken from\n   `icclim.main.index` general function.\n   In other words, the DCSC indices in `icclim.dcsc` module are specializations of\n   `icclim.main.index` for DCSC indices.\n\n\n"
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/source/references/api/icclim/dcsc/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   registry/index.rst\n\n"
                                },
                                {
                                    "line": 36,
                                    "source": "./doc/source/references/api/icclim/dcsc/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"automodule\".",
                                    "full_message": "Unknown directive type \"automodule\".\n\n.. automodule:: icclim._generated._dcsc\n   :members:\n\n   .. autosummary::\n    :nosignatures:\n\n    .. Documentation below is auto-generated with the extract-icclim-funs.py script\n    .. Generated API comment:Begin\n\n     tav\n     txav\n     trav\n     tx10\n     tx90\n     tn10\n     tn90\n     tnfd\n     txfd\n     sd\n     tx35\n     tr\n     txnd\n     tnht\n     tnnd\n     tncwd\n     txhwd\n     hdd\n     cdd\n     pav\n     pint\n     rr\n     rr1mm\n     pn20mm\n     pxcdd\n     pxcwd\n     r99\n     pfl90\n     pq90\n     pq99\n     ffav\n     ff98\n"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/dcsc/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/dcsc/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.dcsc.registry\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/dcsc/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the registry of the DCSC (Meteo France) specific indices.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/dcsc/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: DcscIndexRegistry\n\n\n\n\n   Registry of the DCSC (Meteo France) specific indices.\n\n   .. note:: The indices metadata of this module are in French.\n\n   .. py:method:: get_item_aliases(item: icclim._core.model.standard_index.StandardIndex) -> list[str]\n      :staticmethod:\n\n      Duck-typed method to get the aliases of a StandardIndex item.\n\n      :param item: The StandardIndex item.\n      :type item: StandardIndex\n\n      :returns: The aliases of the item.\n      :rtype: list[str]\n\n      .. rubric:: Notes\n\n      Every StandardIndex registry should implement this method."
                                },
                                {
                                    "line": 3,
                                    "source": "./doc/source/references/api/icclim/generic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/generic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.generic\n"
                                },
                                {
                                    "line": 8,
                                    "source": "./doc/source/references/api/icclim/generic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Generic indices.\n\n   The generic indices public API, via `icclim.generic` package, is generated from the\n   `icclim.generic.registry.GenericIndicatorRegistry` registry definitions.\n   icclim's generic indices are a generalization of the climate indices found in\n   ECAD and DCSC's registries.\n   They can be computed on any dataset and make use of the `Threshold` interface\n   to enable the creation of personalized indices.\n   The parameters of the functions are specialized to each index but are all taken from\n   `icclim.main.index` general function.\n   In other words, the generic indices in `icclim.generic` package are specializations\n   of `icclim.main.index` for ECAD indices.\n\n   .. rubric:: Examples\n\n   >>> from icclim.generic import count_occurrences\n   >>> from icclim import build_threshold\n   >>> thresh = build_threshold(\">= 25 \u00b0C and <= 30 \u00b0C\")\n   >>> result = count_occurrences(\"tas.nc\", thresh).compute()\n   >>> print(result.count_occurrences)\n\n\n"
                                },
                                {
                                    "line": 35,
                                    "source": "./doc/source/references/api/icclim/generic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   registry/index.rst\n\n"
                                },
                                {
                                    "line": 45,
                                    "source": "./doc/source/references/api/icclim/generic/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"automodule\".",
                                    "full_message": "Unknown directive type \"automodule\".\n\n.. automodule:: icclim._generated._generic\n   :members:\n\n   .. autosummary::\n    :nosignatures:\n\n    .. Documentation below is auto-generated with the extract-icclim-funs.py script\n    .. Generated API comment:Begin\n\n    count_occurrences\n    max_consecutive_occurrence\n    sum_of_spell_lengths\n    excess\n    deficit\n    fraction_of_total\n    maximum\n    minimum\n    average\n    sum\n    standard_deviation\n    max_of_rolling_sum\n    min_of_rolling_sum\n    max_of_rolling_average\n    min_of_rolling_average\n    mean_of_difference\n    difference_of_extremes\n    mean_of_absolute_one_time_step_difference\n    difference_of_means\n    percentile\n    custom_index\n"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/generic/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/generic/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.generic.registry\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/generic/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Contain the registry of generic indicators.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/generic/registry/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: GenericIndicatorRegistry\n\n\n\n\n   Registry of generic indicators."
                                },
                                {
                                    "line": 3,
                                    "source": "./doc/source/references/api/icclim/logger/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/logger/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.logger\n\n"
                                },
                                {
                                    "line": 12,
                                    "source": "./doc/source/references/api/icclim/logger/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: VerbosityRegistry\n\n\n\n\n   Registry classes acts as fancy enums.\n\n   It allows to easily store and find constants of similar type.\n   Registries are namespaces, so there is no need to instantiate it or any of\n   its subclasses, every item is a class attribute.\n\n   .. rubric:: Notes\n\n   Registries are not meant to store large collections, they are just fancy lookup\n   tables for items with aliases and no case sensitivity.\n\n   .. py:method:: get_item_aliases(item: Verbosity) -> list[str]\n      :staticmethod:\n\n      Get the aliases for the given item.\n\n      :param item: The item to get aliases for.\n      :type item: T\n\n      :returns: A list of aliases for the item.\n      :rtype: list[str]\n\n      .. rubric:: Notes\n\n      Should be overridden in subclasses.\n\n\n"
                                },
                                {
                                    "line": 45,
                                    "source": "./doc/source/references/api/icclim/logger/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:class\".",
                                    "full_message": "Unknown directive type \"py:class\".\n\n.. py:class:: IcclimLogger(verbosity: Verbosity)\n\n\n   Singleton to display and control logs in icclim library."
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.threshold\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Threshold package.\n\n   This package contains the threshold definitions used in conjunction with generic indices\n   to create personalized indices.\n\n\n"
                                },
                                {
                                    "line": 17,
                                    "source": "./doc/source/references/api/icclim/threshold/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n   factory/index.rst"
                                },
                                {
                                    "line": 1,
                                    "source": "./doc/source/references/api/icclim/threshold/factory/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"py:mod\".",
                                    "full_message": "Unknown interpreted text role \"py:mod\"."
                                },
                                {
                                    "line": 4,
                                    "source": "./doc/source/references/api/icclim/threshold/factory/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:module\".",
                                    "full_message": "Unknown directive type \"py:module\".\n\n.. py:module:: icclim.threshold.factory\n"
                                },
                                {
                                    "line": 6,
                                    "source": "./doc/source/references/api/icclim/threshold/factory/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"autoapi-nested-parse\".",
                                    "full_message": "Unknown directive type \"autoapi-nested-parse\".\n\n.. autoapi-nested-parse::\n\n   Factory to build a `Threshold` from a query or from its components.\n\n\n"
                                },
                                {
                                    "line": 15,
                                    "source": "./doc/source/references/api/icclim/threshold/factory/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"py:function\".",
                                    "full_message": "Unknown directive type \"py:function\".\n\n.. py:function:: build_threshold(query: str | None = None, *, operator: icclim._core.model.operator.Operator | str | None = None, value: icclim._core.model.threshold.ThresholdValueType = None, unit: str | None = None, threshold_min_value: str | float | pint.Quantity | None = None, thresholds: collections.abc.Sequence[icclim._core.model.threshold.Threshold | str] | None = None, logical_link: str | icclim._core.model.logical_link.LogicalLink | None = None, offset: str | float | pint.Quantity | None = None, **kwargs) -> icclim._core.generic.threshold.bounded.BoundedThreshold | icclim._core.generic.threshold.percentile.PercentileThreshold | icclim._core.generic.threshold.basic.BasicThreshold\n\n   Build a `Threshold`.\n\n   This function is a factory for `Threshold` instances.\n   It can build a `BasicThreshold`, a `PercentileThreshold` or a `BoundedThreshold`.\n   See :ref:`generic_indices_recipes` for how to combine thresholds with generic\n   indices.\n\n   :param query: string query describing a threshold.\n                 It must include: an operator, a threshold value and optionally a unit\n                 such as \"> 10 degC\".\n                 It acts as a shorthand for ``operator``, ``value`` and ``unit`` parameters for\n                 simple threshold.\n                 Don't use ``query`` when value is a DataArray, a Dataset or a path to a\n                 netcdf/zarr storage, instead use ``operator``, ``value`` and ``unit``.\n                 ``query`` supersede `operator`, `value` and `unit` parameters.\n   :type query: str | None = None\n   :param operator: keyword argument only.\n                    The operator either as an instance of Operator or as a compatible string.\n                    See :py:class:`OperatorRegistry` for the list of all operators.\n                    When ``query`` is None and operator is None, the default ``Operator.REACH`` is\n                    used.\n   :type operator: Operator | str = None\n   :param value: keyword argument only.\n                 The threshold value(s), default to None.\n                 It can be:\n                 * a simple scalar threshold\n                 * a percentile that will be computed per-grid cell (in combinaison with `unit`)\n                 * per-grid cell thresholds defined by a DataArray, a Dataset or a string path to\n                 a netcdf/zarr.\n                 * a sequence of scalars, the indicator will then be computed for each value and\n                 a specific dimension will be created (also work with percentiles).\n   :type value: str | float | int | Dataset | DataArray | Sequence[float | int | str] | None\n   :param unit: Keyword argument only.\n                The threshold unit.\n                When ``unit`` is None, if ``value`` is a dataset and a \"units\"\n                can be read from its `attrs`, this unit will be used. If value is a scalar or\n                a sequence of scalar, the exceedance will be computed by assuming threshold has\n                the same unit as the studied value is it compared to.\n                When unit is a string it must be a valid unit of our shared pint registry with\n                xclim or a special percentile unit:\n                * \"doy_per\" for day of year percentiles (in ECAD, used for temperature indices\n                such as TX90p)\n                * \"period_per\" for per period percentiles (in ECAD, used for rain indices such\n                as R75p)\n   :type unit: str | None = None\n   :param threshold_min_value: A minimum value used to pre-filter computed threshold values.\n                               This is particularly useful to compute a percentile threshold for rain where\n                               dry days are usually ignored. In that case threshold_min_value would be set to\n                               \"1 mm/day\".\n                               If threshold_min_value is a number, ``unit`` is used to quantify\n                               ``threshold_min_value``.\n   :type threshold_min_value: str | float | pint.Quantity\n   :param offset: Optional. An offset applied to the threshold. This is particularly useful when\n                  the threshold is an existing dataset (netcdf file or zarr store) and the data\n                  should be compared to this dataset + an offset\n                  (e.g. to compute days when T > 5 degC above normal)\n   :type offset: float | None\n   :param kwargs: Additional arguments to build a PercentileThreshold.\n                  See :py:class:`PercentileThreshold` constructor for the complete list\n                  of possible arguments.\n\n   .. rubric:: Examples\n\n   .. code-block:: python\n\n       # -- Scalar threshold\n       scalar_t = build_threshold(\">= 30 degC\")\n       assert isinstance(scalar_t, BasicThreshold)\n\n       # -- Daily percentile threshold\n       doy_t = build_threshold(\">= 30 doy_per\")\n       assert isinstance(doy_t, PercentileThreshold)\n\n       # -- Per grid-cell threshold, with offset\n       grided_t = build_threshold(\n           operator=\">=\", value=\"path/to/tasmax_thresholds.nc\", unit=\"K\", offset=5\n       )\n       assert isinstance(grided_t, BasicThreshold)\n\n       # -- Daily percentile threshold, from a file\n       tasmax = xarray.open_dataset(\"path/to/tasmax_thresholds.nc\").tasmax\n       doys = xclim.core.calendar.percentile_doy(tasmax)\n       doy_file_t = build_threshold(operator=\">=\", value=doys)\n       assert isinstance(doy_file_t, PercentileThreshold)\n\n       # -- Bounded threshold\n       bounded_t = build_threshold(\">= -20 degree AND <= 20 degree \")\n       # equivalent to:\n       x = build_threshold(\">= -20 degree\")\n       y = build_threshold(\"<= 20 degree\")\n       bounded_t2 = x & y\n       assert bounded_t == bounded_t2\n       # equivalent to:\n       bounded_t3 = build_threshold(thresholds=[x, y], logical_link=\"AND\")\n       assert bounded_t == bounded_t3\n       assert isinstance(bounded_t, BoundedThreshold)"
                                },
                                {
                                    "line": 7,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 10,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 25,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 40,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 54,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 66,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 76,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 83,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 96,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 109,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 123,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 144,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 161,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 179,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 197,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 218,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 240,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 261,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 283,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 302,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 321,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 340,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 359,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 367,
                                    "source": "./doc/source/how_to/recipes_generic.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 9,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 12,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 21,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 54,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 85,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 113,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 155,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 199,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 239,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 265,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 303,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 334,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 364,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 404,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 463,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 466,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 502,
                                    "source": "./doc/source/how_to/recipes_custom.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 10,
                                    "source": "./doc/source/how_to/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 10,
                                    "source": "./doc/source/how_to/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 14,
                                    "source": "./doc/source/how_to/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :maxdepth: 2\n   :caption: How to\n\n   Chunk data and parallelize computation <dask>\n   Run our jupyter notebooks <notebooks>\n   Compute ECA&D indices <recipes_ecad>\n   Compute Generic indices <recipes_generic>\n   Use icclim through OCGIS <ocgis>\n   Create customized indices (deprecated) <recipes_custom>"
                                },
                                {
                                    "line": 17,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 63,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 73,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 92,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 112,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 163,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 256,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 318,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 333,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 354,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 406,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 413,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 442,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 464,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 513,
                                    "source": "./doc/source/how_to/dask.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 12,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 20,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 40,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 54,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 62,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 82,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 88,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 94,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 110,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 129,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 161,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 172,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 182,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 198,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 228,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 236,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 263,
                                    "source": "./doc/source/how_to/ocgis.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 5,
                                    "source": "./doc/source/how_to/recipes_ecad.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 14,
                                    "source": "./doc/source/how_to/recipes_ecad.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 54,
                                    "source": "./doc/source/how_to/recipes_ecad.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 98,
                                    "source": "./doc/source/how_to/recipes_ecad.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 151,
                                    "source": "./doc/source/how_to/recipes_ecad.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 220,
                                    "source": "./doc/source/how_to/recipes_ecad.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 237,
                                    "source": "./doc/source/how_to/recipes_ecad.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 24,
                                    "source": "./doc/source/tutorials/installation.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 46,
                                    "source": "./doc/source/tutorials/installation.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 52,
                                    "source": "./doc/source/tutorials/installation.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 58,
                                    "source": "./doc/source/tutorials/installation.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 64,
                                    "source": "./doc/source/tutorials/installation.rst",
                                    "level": 2,
                                    "type": "WARNING",
                                    "message": "Cannot analyze code. Pygments package not found.",
                                    "full_message": "Cannot analyze code. Pygments package not found."
                                },
                                {
                                    "line": 7,
                                    "source": "./doc/source/tutorials/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 11,
                                    "source": "./doc/source/tutorials/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Contents:\n\n   installation\n   notebooks/averaged_tas_anomaly\n   notebooks/deltaT_deltaP_anomaly\n   notebooks/tg90p_calculate__subset_and_plot\n   notebooks/custom_freezing_tas\n   notebooks/cold_spell_duration\n   notebooks/su_summer_days__subset_and_plot\n   notebooks/DCSC_txnn"
                                },
                                {
                                    "line": 22,
                                    "source": "./doc/source/explanation/climate_indices.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"seealso\".",
                                    "full_message": "Unknown directive type \"seealso\".\n\n.. seealso::\n\n  - `Climate Variability and Predictability (CLIVAR) <https://www.clivar.org/clivar-panels/etccdi/indices-data/indices-data>`_\n  - `Expert Team on Climate Change Detection and Indices (ETCCDI) <https://etccdi.pacificclimate.org/>`_\n  - `European Climate Assessment & Dataset (ECA&D) <https://www.ecad.eu>`_\n  - `ATBD ECA&D indices <https://knmi-ecad-assets-prd.s3.amazonaws.com/documents/atbd.pdf>`_\n  - `Article about percentile-based indices <http://etccdi.pacificclimate.org/docs/Zhangetal05JumpPaper.pdf>`_\n  - `Sample quantiles in statistical packages <https://www.amherst.edu/media/view/129116/original/Sample+Quantiles.pdf>`_"
                                },
                                {
                                    "line": 7,
                                    "source": "./doc/source/explanation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 10,
                                    "source": "./doc/source/explanation/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   climate_indices\n   xclim_and_icclim\n   4.2.x_installation"
                                }
                            ]
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                }
            },
            "coverage": {
                "percentage": 60,
                "total_subcriteria": 5,
                "success_subcriteria": 3
            }
        },
        "QC.Lic": {
            "valid": true,
            "subcriteria": {
                "QC.Lic01": {
                    "description": "Is code licensed to be freely used, modified and distributed by others?",
                    "requirement_level": "MUST",
                    "hint": "<p>Your source code repository shall be distributed under an open source license for this subcriterion to pass successfully. Be sure to have a license file present in the code repository matching the name <code>LICENSE</code> with optional extensions (depending on the format used): <code>[.md|.rst|.txt]</code>.</p><p>Valid licenses are any of those approved either by the <a href=\"https://opensource.org/licenses\" target=\"_blank\">Open Source Initiative</a> and/or the Free Software Foundation <a href=\"https://www.gnu.org/licenses/license-list.html\" target=\"_blank\"></a>. You can also check the <a href=\"https://choosealicense.com/\" target=\"_blank\">choosealicense.com</a> site</p>",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "An Open Source license found in the code repository: Apache-2.0",
                            "plugin": {
                                "name": "report2sqaaas-plugin-licensee",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "licensee",
                                "lang": "license",
                                "version": "9.17.0",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-licensee:9.17.0",
                                    "reviewed": "2021-06-28"
                                },
                                "ci": {
                                    "name": "QC.Lic github.com/cerfacs-globc/icclim licensee",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "licensee detect . --confidence 60 --json "
                                    ],
                                    "stdout_text": "{\"licenses\":[{\"key\":\"apache-2.0\",\"spdx_id\":\"Apache-2.0\",\"meta\":{\"title\":\"Apache License 2.0\",\"source\":\"https://spdx.org/licenses/Apache-2.0.html\",\"description\":\"A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.\",\"how\":\"Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.\",\"using\":{\"Kubernetes\":\"https://github.com/kubernetes/kubernetes/blob/master/LICENSE\",\"PDF.js\":\"https://github.com/mozilla/pdf.js/blob/master/LICENSE\",\"Swift\":\"https://github.com/apple/swift/blob/main/LICENSE.txt\"},\"featured\":true,\"hidden\":false,\"nickname\":null,\"note\":\"The Apache Software Foundation <a href=\\\"https://apache.org/foundation/license-faq.html#Apply-My-Software\\\">recommends</a> taking the additional step of adding a boilerplate notice to the header of each source file. You can find the notice in the appendix at the very end of the license text.\"},\"url\":\"http://choosealicense.com/licenses/apache-2.0/\",\"rules\":{\"permissions\":[{\"tag\":\"commercial-use\",\"label\":\"Commercial use\",\"description\":\"The licensed material and derivatives may be used for commercial purposes.\"},{\"tag\":\"modifications\",\"label\":\"Modification\",\"description\":\"The licensed material may be modified.\"},{\"tag\":\"distribution\",\"label\":\"Distribution\",\"description\":\"The licensed material may be distributed.\"},{\"tag\":\"patent-use\",\"label\":\"Patent use\",\"description\":\"This license provides an express grant of patent rights from contributors.\"},{\"tag\":\"private-use\",\"label\":\"Private use\",\"description\":\"The licensed material may be used and modified in private.\"}],\"conditions\":[{\"tag\":\"include-copyright\",\"label\":\"License and copyright notice\",\"description\":\"A copy of the license and copyright notice must be included with the licensed material.\"},{\"tag\":\"document-changes\",\"label\":\"State changes\",\"description\":\"Changes made to the licensed material must be documented.\"}],\"limitations\":[{\"tag\":\"trademark-use\",\"label\":\"Trademark use\",\"description\":\"This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights.\"},{\"tag\":\"liability\",\"label\":\"Liability\",\"description\":\"This license includes a limitation of liability.\"},{\"tag\":\"warranty\",\"label\":\"Warranty\",\"description\":\"This license explicitly states that it does NOT provide any warranty.\"}]},\"fields\":[],\"other\":false,\"gpl\":false,\"lgpl\":false,\"cc\":false}],\"matched_files\":[{\"filename\":\"LICENSE\",\"content\":\"\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \\\"Source\\\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \\\"Object\\\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \\\"Contribution\\\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n      \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \\\"[]\\\"\\n      replaced with your own identifying information. (Don't include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \\\"printed page\\\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n\",\"content_hash\":\"bec905d850e7f5dc2e2db78a950d4a9db560a0b8\",\"content_normalized\":\"terms and conditions for use, reproduction, and distribution - definitions. 'license' shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document. 'licensor' shall mean the copyright holder or entity authorized by the copyright holder that is granting the license. 'legal entity' shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, 'control' means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. 'you' (or 'your') shall mean an individual or legal entity exercising permissions granted by this license. 'source' form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. 'object' form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. 'work' shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below). 'derivative works' shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof. 'contribution' shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright holder or by an individual or legal entity authorized to submit on behalf of the copyright holder. for the purposes of this definition, 'submitted' means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright holder as 'not a contribution.' 'contributor' shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work. - grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form. - grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed. - redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions: - you must give any other recipients of the work or derivative works a copy of this license; and - you must cause any modified files to carry prominent notices stating that you changed the files; and - you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and - if the work includes a 'notice' text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license. you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license. - submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions. - trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file. - disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an 'as is' basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license. - limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages. - accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.\",\"matcher\":{\"name\":\"exact\",\"confidence\":100},\"matched_license\":\"Apache-2.0\",\"attribution\":null}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/79/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "licenses": [
                                    {
                                        "key": "apache-2.0",
                                        "spdx_id": "Apache-2.0",
                                        "meta": {
                                            "title": "Apache License 2.0",
                                            "source": "https://spdx.org/licenses/Apache-2.0.html",
                                            "description": "A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.",
                                            "how": "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.",
                                            "using": {
                                                "Kubernetes": "https://github.com/kubernetes/kubernetes/blob/master/LICENSE",
                                                "PDF.js": "https://github.com/mozilla/pdf.js/blob/master/LICENSE",
                                                "Swift": "https://github.com/apple/swift/blob/main/LICENSE.txt"
                                            },
                                            "featured": true,
                                            "hidden": false,
                                            "nickname": null,
                                            "note": "The Apache Software Foundation <a href=\"https://apache.org/foundation/license-faq.html#Apply-My-Software\">recommends</a> taking the additional step of adding a boilerplate notice to the header of each source file. You can find the notice in the appendix at the very end of the license text."
                                        },
                                        "url": "http://choosealicense.com/licenses/apache-2.0/",
                                        "rules": {
                                            "permissions": [
                                                {
                                                    "tag": "commercial-use",
                                                    "label": "Commercial use",
                                                    "description": "The licensed material and derivatives may be used for commercial purposes."
                                                },
                                                {
                                                    "tag": "modifications",
                                                    "label": "Modification",
                                                    "description": "The licensed material may be modified."
                                                },
                                                {
                                                    "tag": "distribution",
                                                    "label": "Distribution",
                                                    "description": "The licensed material may be distributed."
                                                },
                                                {
                                                    "tag": "patent-use",
                                                    "label": "Patent use",
                                                    "description": "This license provides an express grant of patent rights from contributors."
                                                },
                                                {
                                                    "tag": "private-use",
                                                    "label": "Private use",
                                                    "description": "The licensed material may be used and modified in private."
                                                }
                                            ],
                                            "conditions": [
                                                {
                                                    "tag": "include-copyright",
                                                    "label": "License and copyright notice",
                                                    "description": "A copy of the license and copyright notice must be included with the licensed material."
                                                },
                                                {
                                                    "tag": "document-changes",
                                                    "label": "State changes",
                                                    "description": "Changes made to the licensed material must be documented."
                                                }
                                            ],
                                            "limitations": [
                                                {
                                                    "tag": "trademark-use",
                                                    "label": "Trademark use",
                                                    "description": "This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights."
                                                },
                                                {
                                                    "tag": "liability",
                                                    "label": "Liability",
                                                    "description": "This license includes a limitation of liability."
                                                },
                                                {
                                                    "tag": "warranty",
                                                    "label": "Warranty",
                                                    "description": "This license explicitly states that it does NOT provide any warranty."
                                                }
                                            ]
                                        },
                                        "fields": [],
                                        "other": false,
                                        "gpl": false,
                                        "lgpl": false,
                                        "cc": false
                                    }
                                ],
                                "matched_files": [
                                    {
                                        "filename": "LICENSE",
                                        "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                                        "content_hash": "bec905d850e7f5dc2e2db78a950d4a9db560a0b8",
                                        "content_normalized": "terms and conditions for use, reproduction, and distribution - definitions. 'license' shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document. 'licensor' shall mean the copyright holder or entity authorized by the copyright holder that is granting the license. 'legal entity' shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, 'control' means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. 'you' (or 'your') shall mean an individual or legal entity exercising permissions granted by this license. 'source' form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. 'object' form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. 'work' shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below). 'derivative works' shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof. 'contribution' shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright holder or by an individual or legal entity authorized to submit on behalf of the copyright holder. for the purposes of this definition, 'submitted' means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright holder as 'not a contribution.' 'contributor' shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work. - grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form. - grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed. - redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions: - you must give any other recipients of the work or derivative works a copy of this license; and - you must cause any modified files to carry prominent notices stating that you changed the files; and - you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and - if the work includes a 'notice' text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license. you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license. - submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions. - trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file. - disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an 'as is' basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license. - limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages. - accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.",
                                        "matcher": {
                                            "name": "exact",
                                            "confidence": 100
                                        },
                                        "matched_license": "Apache-2.0",
                                        "attribution": null
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Lic01.1": {
                    "description": "Is LICENSE file placed in the root path of the code repository?",
                    "requirement_level": "MUST",
                    "hint": "Most social coding platforms require the license file to placed in the root path of the code repository, so it is a good practice to use this location by default. Allowed file names are <code>LICENSE</code>, <code>LICENSE.md</code>, <code>LICENSE.rst</code>, <code>LICENSE.txt</code>",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "LICENSE file is visible at the root path of the code repository: LICENSE",
                            "plugin": {
                                "name": "report2sqaaas-plugin-licensee",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "licensee",
                                "lang": "license",
                                "version": "9.17.0",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-licensee:9.17.0",
                                    "reviewed": "2021-06-28"
                                },
                                "ci": {
                                    "name": "QC.Lic github.com/cerfacs-globc/icclim licensee",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "licensee detect . --confidence 60 --json "
                                    ],
                                    "stdout_text": "{\"licenses\":[{\"key\":\"apache-2.0\",\"spdx_id\":\"Apache-2.0\",\"meta\":{\"title\":\"Apache License 2.0\",\"source\":\"https://spdx.org/licenses/Apache-2.0.html\",\"description\":\"A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.\",\"how\":\"Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.\",\"using\":{\"Kubernetes\":\"https://github.com/kubernetes/kubernetes/blob/master/LICENSE\",\"PDF.js\":\"https://github.com/mozilla/pdf.js/blob/master/LICENSE\",\"Swift\":\"https://github.com/apple/swift/blob/main/LICENSE.txt\"},\"featured\":true,\"hidden\":false,\"nickname\":null,\"note\":\"The Apache Software Foundation <a href=\\\"https://apache.org/foundation/license-faq.html#Apply-My-Software\\\">recommends</a> taking the additional step of adding a boilerplate notice to the header of each source file. You can find the notice in the appendix at the very end of the license text.\"},\"url\":\"http://choosealicense.com/licenses/apache-2.0/\",\"rules\":{\"permissions\":[{\"tag\":\"commercial-use\",\"label\":\"Commercial use\",\"description\":\"The licensed material and derivatives may be used for commercial purposes.\"},{\"tag\":\"modifications\",\"label\":\"Modification\",\"description\":\"The licensed material may be modified.\"},{\"tag\":\"distribution\",\"label\":\"Distribution\",\"description\":\"The licensed material may be distributed.\"},{\"tag\":\"patent-use\",\"label\":\"Patent use\",\"description\":\"This license provides an express grant of patent rights from contributors.\"},{\"tag\":\"private-use\",\"label\":\"Private use\",\"description\":\"The licensed material may be used and modified in private.\"}],\"conditions\":[{\"tag\":\"include-copyright\",\"label\":\"License and copyright notice\",\"description\":\"A copy of the license and copyright notice must be included with the licensed material.\"},{\"tag\":\"document-changes\",\"label\":\"State changes\",\"description\":\"Changes made to the licensed material must be documented.\"}],\"limitations\":[{\"tag\":\"trademark-use\",\"label\":\"Trademark use\",\"description\":\"This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights.\"},{\"tag\":\"liability\",\"label\":\"Liability\",\"description\":\"This license includes a limitation of liability.\"},{\"tag\":\"warranty\",\"label\":\"Warranty\",\"description\":\"This license explicitly states that it does NOT provide any warranty.\"}]},\"fields\":[],\"other\":false,\"gpl\":false,\"lgpl\":false,\"cc\":false}],\"matched_files\":[{\"filename\":\"LICENSE\",\"content\":\"\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \\\"Source\\\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \\\"Object\\\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \\\"Contribution\\\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n      \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \\\"[]\\\"\\n      replaced with your own identifying information. (Don't include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \\\"printed page\\\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n\",\"content_hash\":\"bec905d850e7f5dc2e2db78a950d4a9db560a0b8\",\"content_normalized\":\"terms and conditions for use, reproduction, and distribution - definitions. 'license' shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document. 'licensor' shall mean the copyright holder or entity authorized by the copyright holder that is granting the license. 'legal entity' shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, 'control' means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. 'you' (or 'your') shall mean an individual or legal entity exercising permissions granted by this license. 'source' form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. 'object' form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. 'work' shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below). 'derivative works' shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof. 'contribution' shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright holder or by an individual or legal entity authorized to submit on behalf of the copyright holder. for the purposes of this definition, 'submitted' means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright holder as 'not a contribution.' 'contributor' shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work. - grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form. - grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed. - redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions: - you must give any other recipients of the work or derivative works a copy of this license; and - you must cause any modified files to carry prominent notices stating that you changed the files; and - you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and - if the work includes a 'notice' text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license. you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license. - submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions. - trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file. - disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an 'as is' basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license. - limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages. - accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.\",\"matcher\":{\"name\":\"exact\",\"confidence\":100},\"matched_license\":\"Apache-2.0\",\"attribution\":null}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/79/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "licenses": [
                                    {
                                        "key": "apache-2.0",
                                        "spdx_id": "Apache-2.0",
                                        "meta": {
                                            "title": "Apache License 2.0",
                                            "source": "https://spdx.org/licenses/Apache-2.0.html",
                                            "description": "A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.",
                                            "how": "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.",
                                            "using": {
                                                "Kubernetes": "https://github.com/kubernetes/kubernetes/blob/master/LICENSE",
                                                "PDF.js": "https://github.com/mozilla/pdf.js/blob/master/LICENSE",
                                                "Swift": "https://github.com/apple/swift/blob/main/LICENSE.txt"
                                            },
                                            "featured": true,
                                            "hidden": false,
                                            "nickname": null,
                                            "note": "The Apache Software Foundation <a href=\"https://apache.org/foundation/license-faq.html#Apply-My-Software\">recommends</a> taking the additional step of adding a boilerplate notice to the header of each source file. You can find the notice in the appendix at the very end of the license text."
                                        },
                                        "url": "http://choosealicense.com/licenses/apache-2.0/",
                                        "rules": {
                                            "permissions": [
                                                {
                                                    "tag": "commercial-use",
                                                    "label": "Commercial use",
                                                    "description": "The licensed material and derivatives may be used for commercial purposes."
                                                },
                                                {
                                                    "tag": "modifications",
                                                    "label": "Modification",
                                                    "description": "The licensed material may be modified."
                                                },
                                                {
                                                    "tag": "distribution",
                                                    "label": "Distribution",
                                                    "description": "The licensed material may be distributed."
                                                },
                                                {
                                                    "tag": "patent-use",
                                                    "label": "Patent use",
                                                    "description": "This license provides an express grant of patent rights from contributors."
                                                },
                                                {
                                                    "tag": "private-use",
                                                    "label": "Private use",
                                                    "description": "The licensed material may be used and modified in private."
                                                }
                                            ],
                                            "conditions": [
                                                {
                                                    "tag": "include-copyright",
                                                    "label": "License and copyright notice",
                                                    "description": "A copy of the license and copyright notice must be included with the licensed material."
                                                },
                                                {
                                                    "tag": "document-changes",
                                                    "label": "State changes",
                                                    "description": "Changes made to the licensed material must be documented."
                                                }
                                            ],
                                            "limitations": [
                                                {
                                                    "tag": "trademark-use",
                                                    "label": "Trademark use",
                                                    "description": "This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights."
                                                },
                                                {
                                                    "tag": "liability",
                                                    "label": "Liability",
                                                    "description": "This license includes a limitation of liability."
                                                },
                                                {
                                                    "tag": "warranty",
                                                    "label": "Warranty",
                                                    "description": "This license explicitly states that it does NOT provide any warranty."
                                                }
                                            ]
                                        },
                                        "fields": [],
                                        "other": false,
                                        "gpl": false,
                                        "lgpl": false,
                                        "cc": false
                                    }
                                ],
                                "matched_files": [
                                    {
                                        "filename": "LICENSE",
                                        "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                                        "content_hash": "bec905d850e7f5dc2e2db78a950d4a9db560a0b8",
                                        "content_normalized": "terms and conditions for use, reproduction, and distribution - definitions. 'license' shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document. 'licensor' shall mean the copyright holder or entity authorized by the copyright holder that is granting the license. 'legal entity' shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, 'control' means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. 'you' (or 'your') shall mean an individual or legal entity exercising permissions granted by this license. 'source' form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. 'object' form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. 'work' shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below). 'derivative works' shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof. 'contribution' shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright holder or by an individual or legal entity authorized to submit on behalf of the copyright holder. for the purposes of this definition, 'submitted' means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright holder as 'not a contribution.' 'contributor' shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work. - grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form. - grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed. - redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions: - you must give any other recipients of the work or derivative works a copy of this license; and - you must cause any modified files to carry prominent notices stating that you changed the files; and - you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and - if the work includes a 'notice' text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license. you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license. - submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions. - trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file. - disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an 'as is' basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license. - limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages. - accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.",
                                        "matcher": {
                                            "name": "exact",
                                            "confidence": 100
                                        },
                                        "matched_license": "Apache-2.0",
                                        "attribution": null
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Lic02": {
                    "description": "Does the code use a license approved by Open Source Initiative?",
                    "requirement_level": "MUST",
                    "hint": "The <a href=\"https://opensource.org/\" target=\"_blank\">Open Source Initiative (OSI)</a> sets out the requirements for software to be legally declared as Open Source. The license in use shall be in the list of <a href=\"https://opensource.org/license-list.html\" target=\"_blank\">OSI-approved licenses</a> for this criterion to be successful",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "License Apache-2.0 is approved by the Open Source Initiative",
                            "plugin": {
                                "name": "report2sqaaas-plugin-licensee",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "licensee",
                                "lang": "license",
                                "version": "9.17.0",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-licensee:9.17.0",
                                    "reviewed": "2021-06-28"
                                },
                                "ci": {
                                    "name": "QC.Lic github.com/cerfacs-globc/icclim licensee",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "licensee detect . --confidence 60 --json "
                                    ],
                                    "stdout_text": "{\"licenses\":[{\"key\":\"apache-2.0\",\"spdx_id\":\"Apache-2.0\",\"meta\":{\"title\":\"Apache License 2.0\",\"source\":\"https://spdx.org/licenses/Apache-2.0.html\",\"description\":\"A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.\",\"how\":\"Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.\",\"using\":{\"Kubernetes\":\"https://github.com/kubernetes/kubernetes/blob/master/LICENSE\",\"PDF.js\":\"https://github.com/mozilla/pdf.js/blob/master/LICENSE\",\"Swift\":\"https://github.com/apple/swift/blob/main/LICENSE.txt\"},\"featured\":true,\"hidden\":false,\"nickname\":null,\"note\":\"The Apache Software Foundation <a href=\\\"https://apache.org/foundation/license-faq.html#Apply-My-Software\\\">recommends</a> taking the additional step of adding a boilerplate notice to the header of each source file. You can find the notice in the appendix at the very end of the license text.\"},\"url\":\"http://choosealicense.com/licenses/apache-2.0/\",\"rules\":{\"permissions\":[{\"tag\":\"commercial-use\",\"label\":\"Commercial use\",\"description\":\"The licensed material and derivatives may be used for commercial purposes.\"},{\"tag\":\"modifications\",\"label\":\"Modification\",\"description\":\"The licensed material may be modified.\"},{\"tag\":\"distribution\",\"label\":\"Distribution\",\"description\":\"The licensed material may be distributed.\"},{\"tag\":\"patent-use\",\"label\":\"Patent use\",\"description\":\"This license provides an express grant of patent rights from contributors.\"},{\"tag\":\"private-use\",\"label\":\"Private use\",\"description\":\"The licensed material may be used and modified in private.\"}],\"conditions\":[{\"tag\":\"include-copyright\",\"label\":\"License and copyright notice\",\"description\":\"A copy of the license and copyright notice must be included with the licensed material.\"},{\"tag\":\"document-changes\",\"label\":\"State changes\",\"description\":\"Changes made to the licensed material must be documented.\"}],\"limitations\":[{\"tag\":\"trademark-use\",\"label\":\"Trademark use\",\"description\":\"This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights.\"},{\"tag\":\"liability\",\"label\":\"Liability\",\"description\":\"This license includes a limitation of liability.\"},{\"tag\":\"warranty\",\"label\":\"Warranty\",\"description\":\"This license explicitly states that it does NOT provide any warranty.\"}]},\"fields\":[],\"other\":false,\"gpl\":false,\"lgpl\":false,\"cc\":false}],\"matched_files\":[{\"filename\":\"LICENSE\",\"content\":\"\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \\\"Source\\\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \\\"Object\\\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \\\"Contribution\\\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n      \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \\\"[]\\\"\\n      replaced with your own identifying information. (Don't include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \\\"printed page\\\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n\",\"content_hash\":\"bec905d850e7f5dc2e2db78a950d4a9db560a0b8\",\"content_normalized\":\"terms and conditions for use, reproduction, and distribution - definitions. 'license' shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document. 'licensor' shall mean the copyright holder or entity authorized by the copyright holder that is granting the license. 'legal entity' shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, 'control' means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. 'you' (or 'your') shall mean an individual or legal entity exercising permissions granted by this license. 'source' form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. 'object' form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. 'work' shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below). 'derivative works' shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof. 'contribution' shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright holder or by an individual or legal entity authorized to submit on behalf of the copyright holder. for the purposes of this definition, 'submitted' means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright holder as 'not a contribution.' 'contributor' shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work. - grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form. - grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed. - redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions: - you must give any other recipients of the work or derivative works a copy of this license; and - you must cause any modified files to carry prominent notices stating that you changed the files; and - you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and - if the work includes a 'notice' text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license. you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license. - submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions. - trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file. - disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an 'as is' basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license. - limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages. - accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.\",\"matcher\":{\"name\":\"exact\",\"confidence\":100},\"matched_license\":\"Apache-2.0\",\"attribution\":null}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/79/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "licenses": [
                                    {
                                        "key": "apache-2.0",
                                        "spdx_id": "Apache-2.0",
                                        "meta": {
                                            "title": "Apache License 2.0",
                                            "source": "https://spdx.org/licenses/Apache-2.0.html",
                                            "description": "A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.",
                                            "how": "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.",
                                            "using": {
                                                "Kubernetes": "https://github.com/kubernetes/kubernetes/blob/master/LICENSE",
                                                "PDF.js": "https://github.com/mozilla/pdf.js/blob/master/LICENSE",
                                                "Swift": "https://github.com/apple/swift/blob/main/LICENSE.txt"
                                            },
                                            "featured": true,
                                            "hidden": false,
                                            "nickname": null,
                                            "note": "The Apache Software Foundation <a href=\"https://apache.org/foundation/license-faq.html#Apply-My-Software\">recommends</a> taking the additional step of adding a boilerplate notice to the header of each source file. You can find the notice in the appendix at the very end of the license text."
                                        },
                                        "url": "http://choosealicense.com/licenses/apache-2.0/",
                                        "rules": {
                                            "permissions": [
                                                {
                                                    "tag": "commercial-use",
                                                    "label": "Commercial use",
                                                    "description": "The licensed material and derivatives may be used for commercial purposes."
                                                },
                                                {
                                                    "tag": "modifications",
                                                    "label": "Modification",
                                                    "description": "The licensed material may be modified."
                                                },
                                                {
                                                    "tag": "distribution",
                                                    "label": "Distribution",
                                                    "description": "The licensed material may be distributed."
                                                },
                                                {
                                                    "tag": "patent-use",
                                                    "label": "Patent use",
                                                    "description": "This license provides an express grant of patent rights from contributors."
                                                },
                                                {
                                                    "tag": "private-use",
                                                    "label": "Private use",
                                                    "description": "The licensed material may be used and modified in private."
                                                }
                                            ],
                                            "conditions": [
                                                {
                                                    "tag": "include-copyright",
                                                    "label": "License and copyright notice",
                                                    "description": "A copy of the license and copyright notice must be included with the licensed material."
                                                },
                                                {
                                                    "tag": "document-changes",
                                                    "label": "State changes",
                                                    "description": "Changes made to the licensed material must be documented."
                                                }
                                            ],
                                            "limitations": [
                                                {
                                                    "tag": "trademark-use",
                                                    "label": "Trademark use",
                                                    "description": "This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights."
                                                },
                                                {
                                                    "tag": "liability",
                                                    "label": "Liability",
                                                    "description": "This license includes a limitation of liability."
                                                },
                                                {
                                                    "tag": "warranty",
                                                    "label": "Warranty",
                                                    "description": "This license explicitly states that it does NOT provide any warranty."
                                                }
                                            ]
                                        },
                                        "fields": [],
                                        "other": false,
                                        "gpl": false,
                                        "lgpl": false,
                                        "cc": false
                                    }
                                ],
                                "matched_files": [
                                    {
                                        "filename": "LICENSE",
                                        "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                                        "content_hash": "bec905d850e7f5dc2e2db78a950d4a9db560a0b8",
                                        "content_normalized": "terms and conditions for use, reproduction, and distribution - definitions. 'license' shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document. 'licensor' shall mean the copyright holder or entity authorized by the copyright holder that is granting the license. 'legal entity' shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, 'control' means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. 'you' (or 'your') shall mean an individual or legal entity exercising permissions granted by this license. 'source' form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. 'object' form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. 'work' shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below). 'derivative works' shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof. 'contribution' shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright holder or by an individual or legal entity authorized to submit on behalf of the copyright holder. for the purposes of this definition, 'submitted' means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright holder as 'not a contribution.' 'contributor' shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work. - grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form. - grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed. - redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions: - you must give any other recipients of the work or derivative works a copy of this license; and - you must cause any modified files to carry prominent notices stating that you changed the files; and - you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and - if the work includes a 'notice' text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license. you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license. - submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions. - trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file. - disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an 'as is' basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license. - limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages. - accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.",
                                        "matcher": {
                                            "name": "exact",
                                            "confidence": 100
                                        },
                                        "matched_license": "Apache-2.0",
                                        "attribution": null
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Lic02.1": {
                    "description": "Does the code use an Open Source Initiative's popular-recognized license?",
                    "requirement_level": "MAY",
                    "hint": "The Open Source Initiative (OSI) sets out the requirements for software to be legally declared as Open Source. OSI provides a list of popular licenses that shall match most of the demands. The license in use shall be in the list of <a href=\"https://opensource.org/license-list.html\" target=\"_blank\">OSI popular licenses</a> for this criterion to be successful",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "License Apache-2.0 is listed under the Open Source Initiative popular category",
                            "plugin": {
                                "name": "report2sqaaas-plugin-licensee",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "licensee",
                                "lang": "license",
                                "version": "9.17.0",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-licensee:9.17.0",
                                    "reviewed": "2021-06-28"
                                },
                                "ci": {
                                    "name": "QC.Lic github.com/cerfacs-globc/icclim licensee",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "licensee detect . --confidence 60 --json "
                                    ],
                                    "stdout_text": "{\"licenses\":[{\"key\":\"apache-2.0\",\"spdx_id\":\"Apache-2.0\",\"meta\":{\"title\":\"Apache License 2.0\",\"source\":\"https://spdx.org/licenses/Apache-2.0.html\",\"description\":\"A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.\",\"how\":\"Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.\",\"using\":{\"Kubernetes\":\"https://github.com/kubernetes/kubernetes/blob/master/LICENSE\",\"PDF.js\":\"https://github.com/mozilla/pdf.js/blob/master/LICENSE\",\"Swift\":\"https://github.com/apple/swift/blob/main/LICENSE.txt\"},\"featured\":true,\"hidden\":false,\"nickname\":null,\"note\":\"The Apache Software Foundation <a href=\\\"https://apache.org/foundation/license-faq.html#Apply-My-Software\\\">recommends</a> taking the additional step of adding a boilerplate notice to the header of each source file. You can find the notice in the appendix at the very end of the license text.\"},\"url\":\"http://choosealicense.com/licenses/apache-2.0/\",\"rules\":{\"permissions\":[{\"tag\":\"commercial-use\",\"label\":\"Commercial use\",\"description\":\"The licensed material and derivatives may be used for commercial purposes.\"},{\"tag\":\"modifications\",\"label\":\"Modification\",\"description\":\"The licensed material may be modified.\"},{\"tag\":\"distribution\",\"label\":\"Distribution\",\"description\":\"The licensed material may be distributed.\"},{\"tag\":\"patent-use\",\"label\":\"Patent use\",\"description\":\"This license provides an express grant of patent rights from contributors.\"},{\"tag\":\"private-use\",\"label\":\"Private use\",\"description\":\"The licensed material may be used and modified in private.\"}],\"conditions\":[{\"tag\":\"include-copyright\",\"label\":\"License and copyright notice\",\"description\":\"A copy of the license and copyright notice must be included with the licensed material.\"},{\"tag\":\"document-changes\",\"label\":\"State changes\",\"description\":\"Changes made to the licensed material must be documented.\"}],\"limitations\":[{\"tag\":\"trademark-use\",\"label\":\"Trademark use\",\"description\":\"This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights.\"},{\"tag\":\"liability\",\"label\":\"Liability\",\"description\":\"This license includes a limitation of liability.\"},{\"tag\":\"warranty\",\"label\":\"Warranty\",\"description\":\"This license explicitly states that it does NOT provide any warranty.\"}]},\"fields\":[],\"other\":false,\"gpl\":false,\"lgpl\":false,\"cc\":false}],\"matched_files\":[{\"filename\":\"LICENSE\",\"content\":\"\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \\\"Source\\\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \\\"Object\\\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \\\"Contribution\\\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n      \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \\\"[]\\\"\\n      replaced with your own identifying information. (Don't include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \\\"printed page\\\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n\",\"content_hash\":\"bec905d850e7f5dc2e2db78a950d4a9db560a0b8\",\"content_normalized\":\"terms and conditions for use, reproduction, and distribution - definitions. 'license' shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document. 'licensor' shall mean the copyright holder or entity authorized by the copyright holder that is granting the license. 'legal entity' shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, 'control' means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. 'you' (or 'your') shall mean an individual or legal entity exercising permissions granted by this license. 'source' form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. 'object' form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. 'work' shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below). 'derivative works' shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof. 'contribution' shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright holder or by an individual or legal entity authorized to submit on behalf of the copyright holder. for the purposes of this definition, 'submitted' means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright holder as 'not a contribution.' 'contributor' shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work. - grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form. - grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed. - redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions: - you must give any other recipients of the work or derivative works a copy of this license; and - you must cause any modified files to carry prominent notices stating that you changed the files; and - you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and - if the work includes a 'notice' text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license. you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license. - submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions. - trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file. - disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an 'as is' basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license. - limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages. - accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.\",\"matcher\":{\"name\":\"exact\",\"confidence\":100},\"matched_license\":\"Apache-2.0\",\"attribution\":null}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/79/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "licenses": [
                                    {
                                        "key": "apache-2.0",
                                        "spdx_id": "Apache-2.0",
                                        "meta": {
                                            "title": "Apache License 2.0",
                                            "source": "https://spdx.org/licenses/Apache-2.0.html",
                                            "description": "A permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code.",
                                            "how": "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file.",
                                            "using": {
                                                "Kubernetes": "https://github.com/kubernetes/kubernetes/blob/master/LICENSE",
                                                "PDF.js": "https://github.com/mozilla/pdf.js/blob/master/LICENSE",
                                                "Swift": "https://github.com/apple/swift/blob/main/LICENSE.txt"
                                            },
                                            "featured": true,
                                            "hidden": false,
                                            "nickname": null,
                                            "note": "The Apache Software Foundation <a href=\"https://apache.org/foundation/license-faq.html#Apply-My-Software\">recommends</a> taking the additional step of adding a boilerplate notice to the header of each source file. You can find the notice in the appendix at the very end of the license text."
                                        },
                                        "url": "http://choosealicense.com/licenses/apache-2.0/",
                                        "rules": {
                                            "permissions": [
                                                {
                                                    "tag": "commercial-use",
                                                    "label": "Commercial use",
                                                    "description": "The licensed material and derivatives may be used for commercial purposes."
                                                },
                                                {
                                                    "tag": "modifications",
                                                    "label": "Modification",
                                                    "description": "The licensed material may be modified."
                                                },
                                                {
                                                    "tag": "distribution",
                                                    "label": "Distribution",
                                                    "description": "The licensed material may be distributed."
                                                },
                                                {
                                                    "tag": "patent-use",
                                                    "label": "Patent use",
                                                    "description": "This license provides an express grant of patent rights from contributors."
                                                },
                                                {
                                                    "tag": "private-use",
                                                    "label": "Private use",
                                                    "description": "The licensed material may be used and modified in private."
                                                }
                                            ],
                                            "conditions": [
                                                {
                                                    "tag": "include-copyright",
                                                    "label": "License and copyright notice",
                                                    "description": "A copy of the license and copyright notice must be included with the licensed material."
                                                },
                                                {
                                                    "tag": "document-changes",
                                                    "label": "State changes",
                                                    "description": "Changes made to the licensed material must be documented."
                                                }
                                            ],
                                            "limitations": [
                                                {
                                                    "tag": "trademark-use",
                                                    "label": "Trademark use",
                                                    "description": "This license explicitly states that it does NOT grant trademark rights, even though licenses without such a statement probably do not grant any implicit trademark rights."
                                                },
                                                {
                                                    "tag": "liability",
                                                    "label": "Liability",
                                                    "description": "This license includes a limitation of liability."
                                                },
                                                {
                                                    "tag": "warranty",
                                                    "label": "Warranty",
                                                    "description": "This license explicitly states that it does NOT provide any warranty."
                                                }
                                            ]
                                        },
                                        "fields": [],
                                        "other": false,
                                        "gpl": false,
                                        "lgpl": false,
                                        "cc": false
                                    }
                                ],
                                "matched_files": [
                                    {
                                        "filename": "LICENSE",
                                        "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                                        "content_hash": "bec905d850e7f5dc2e2db78a950d4a9db560a0b8",
                                        "content_normalized": "terms and conditions for use, reproduction, and distribution - definitions. 'license' shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document. 'licensor' shall mean the copyright holder or entity authorized by the copyright holder that is granting the license. 'legal entity' shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, 'control' means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. 'you' (or 'your') shall mean an individual or legal entity exercising permissions granted by this license. 'source' form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. 'object' form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. 'work' shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below). 'derivative works' shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof. 'contribution' shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright holder or by an individual or legal entity authorized to submit on behalf of the copyright holder. for the purposes of this definition, 'submitted' means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright holder as 'not a contribution.' 'contributor' shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work. - grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form. - grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed. - redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions: - you must give any other recipients of the work or derivative works a copy of this license; and - you must cause any modified files to carry prominent notices stating that you changed the files; and - you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and - if the work includes a 'notice' text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license. you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license. - submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions. - trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file. - disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an 'as is' basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license. - limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages. - accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.",
                                        "matcher": {
                                            "name": "exact",
                                            "confidence": 100
                                        },
                                        "matched_license": "Apache-2.0",
                                        "attribution": null
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                }
            },
            "coverage": {
                "percentage": 100,
                "total_subcriteria": 4,
                "success_subcriteria": 4
            }
        },
        "QC.Sec": {
            "valid": true,
            "subcriteria": {
                "QC.Sec02": {
                    "description": "Is the source code passing Static Analysis Security Testing (SAST)?",
                    "requirement_level": "MUST",
                    "hint": "Please check & solve the security weaknesses found by the SAST tool",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "Source code files pass SAST checks performed by bandit tool",
                            "plugin": {
                                "name": "report2sqaaas-plugin-bandit",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "bandit",
                                "lang": "Python",
                                "version": "1.7.4",
                                "docker": {
                                    "dockerfile": "QC.Sec/bandit/Dockerfile",
                                    "reviewed": "2022-03-04"
                                },
                                "ci": {
                                    "name": "QC.Sec github.com/cerfacs-globc/icclim bandit",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "bandit -f json --quiet  --confidence-level high --severity-level high --recursive  ."
                                    ],
                                    "stdout_text": "{\n  \"errors\": [],\n  \"generated_at\": \"2024-10-25T13:21:57Z\",\n  \"metrics\": {\n    \"./doc/source/conf.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 61,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 18,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 5,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/climate_variable.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 372,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/constants.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 52,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 0,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/functions.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 1230,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/generic_templates.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 211,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/indicator.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 465,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/threshold/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 0,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/threshold/basic.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 297,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/threshold/bounded.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 197,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/threshold/percentile.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 411,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/generic/threshold/threshold_templates.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 125,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/input_parsing.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 721,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/legacy/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 0,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/legacy/user_index/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 9,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/legacy/user_index/calc_operation.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 38,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/legacy/user_index/model.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 32,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/legacy/user_index/parse.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 231,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 1,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/cf_calendar.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 151,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/global_metadata.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 17,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/icclim_types.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 23,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/in_file_dictionary.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 34,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/index_config.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 100,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/index_group.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 88,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/indicator.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 67,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/logical_link.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 42,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/netcdf_version.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 22,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/operator.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 126,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/quantile_interpolation.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 32,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/registry.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 120,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/standard_index.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 72,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/standard_variable.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 280,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/model/threshold.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 121,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_core/utils.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 33,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_generated/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 5,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_generated/_dcsc.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 2906,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_generated/_ecad.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 5634,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/_generated/_generic.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 1994,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/dcsc/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 11,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/dcsc/registry.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 470,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/ecad/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 9,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/ecad/binding.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 105,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/ecad/registry.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 794,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/exception.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 22,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/frequency.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 574,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/generic/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 20,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/generic/registry.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 208,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/logger.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 139,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/main.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 860,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/rechunk.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 198,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/threshold/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 5,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./src/icclim/threshold/factory.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 374,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 0,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_cf_calendar.py\": {\n      \"CONFIDENCE.HIGH\": 1,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 1,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 62,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_dcsc.py\": {\n      \"CONFIDENCE.HIGH\": 1,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 1,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 8,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_ecad_indices.py\": {\n      \"CONFIDENCE.HIGH\": 3,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 3,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 21,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_frequency.py\": {\n      \"CONFIDENCE.HIGH\": 35,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 35,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 122,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_generated_api.py\": {\n      \"CONFIDENCE.HIGH\": 3,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 1,\n      \"SEVERITY.MEDIUM\": 2,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 348,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_generic_functions.py\": {\n      \"CONFIDENCE.HIGH\": 1,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 1,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 27,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_index_group.py\": {\n      \"CONFIDENCE.HIGH\": 4,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 4,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 25,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_input_parsing.py\": {\n      \"CONFIDENCE.HIGH\": 9,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 9,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 144,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_main.py\": {\n      \"CONFIDENCE.HIGH\": 73,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 73,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 937,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_rechunk.py\": {\n      \"CONFIDENCE.HIGH\": 1,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 1,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 86,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_threshold.py\": {\n      \"CONFIDENCE.HIGH\": 88,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 88,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 249,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/test_user_index.py\": {\n      \"CONFIDENCE.HIGH\": 31,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 31,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 289,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tests/testing_utils.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 49,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tools/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 1,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tools/extract_icclim_funs.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 485,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./tools/update_logo_version.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 36,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"_totals\": {\n      \"CONFIDENCE.HIGH\": 250,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 248,\n      \"SEVERITY.MEDIUM\": 2,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 23021,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    }\n  },\n  \"results\": []\n}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/88/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "errors": [],
                                "generated_at": "2024-10-25T13:21:57Z",
                                "metrics": {
                                    "./doc/source/conf.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 61,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 18,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 5,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/climate_variable.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 372,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/constants.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 52,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 0,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/functions.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 1230,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/generic_templates.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 211,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/indicator.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 465,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/threshold/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 0,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/threshold/basic.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 297,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/threshold/bounded.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 197,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/threshold/percentile.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 411,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/generic/threshold/threshold_templates.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 125,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/input_parsing.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 721,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/legacy/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 0,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/legacy/user_index/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 9,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/legacy/user_index/calc_operation.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 38,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/legacy/user_index/model.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 32,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/legacy/user_index/parse.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 231,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 1,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/cf_calendar.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 151,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/global_metadata.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 17,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/icclim_types.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 23,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/in_file_dictionary.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 34,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/index_config.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 100,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/index_group.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 88,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/indicator.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 67,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/logical_link.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 42,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/netcdf_version.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 22,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/operator.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 126,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/quantile_interpolation.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 32,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/registry.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 120,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/standard_index.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 72,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/standard_variable.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 280,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/model/threshold.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 121,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_core/utils.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 33,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_generated/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 5,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_generated/_dcsc.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 2906,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_generated/_ecad.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 5634,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/_generated/_generic.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 1994,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/dcsc/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 11,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/dcsc/registry.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 470,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/ecad/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 9,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/ecad/binding.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 105,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/ecad/registry.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 794,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/exception.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 22,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/frequency.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 574,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/generic/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 20,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/generic/registry.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 208,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/logger.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 139,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/main.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 860,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/rechunk.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 198,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/threshold/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 5,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./src/icclim/threshold/factory.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 374,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 0,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_cf_calendar.py": {
                                        "CONFIDENCE.HIGH": 1,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 1,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 62,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_dcsc.py": {
                                        "CONFIDENCE.HIGH": 1,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 1,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 8,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_ecad_indices.py": {
                                        "CONFIDENCE.HIGH": 3,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 3,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 21,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_frequency.py": {
                                        "CONFIDENCE.HIGH": 35,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 35,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 122,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_generated_api.py": {
                                        "CONFIDENCE.HIGH": 3,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 1,
                                        "SEVERITY.MEDIUM": 2,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 348,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_generic_functions.py": {
                                        "CONFIDENCE.HIGH": 1,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 1,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 27,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_index_group.py": {
                                        "CONFIDENCE.HIGH": 4,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 4,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 25,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_input_parsing.py": {
                                        "CONFIDENCE.HIGH": 9,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 9,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 144,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_main.py": {
                                        "CONFIDENCE.HIGH": 73,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 73,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 937,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_rechunk.py": {
                                        "CONFIDENCE.HIGH": 1,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 1,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 86,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_threshold.py": {
                                        "CONFIDENCE.HIGH": 88,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 88,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 249,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/test_user_index.py": {
                                        "CONFIDENCE.HIGH": 31,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 31,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 289,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tests/testing_utils.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 49,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tools/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 1,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tools/extract_icclim_funs.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 485,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./tools/update_logo_version.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 36,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "_totals": {
                                        "CONFIDENCE.HIGH": 250,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 248,
                                        "SEVERITY.MEDIUM": 2,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 23021,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    }
                                },
                                "results": []
                            }
                        }
                    ],
                    "valid": true
                }
            },
            "coverage": {
                "percentage": 100,
                "total_subcriteria": 1,
                "success_subcriteria": 1
            }
        },
        "QC.Sty": {
            "valid": false,
            "subcriteria": {
                "QC.Sty01": {
                    "description": "Is the software product following a style standard for Python files?",
                    "requirement_level": "MUST",
                    "hint": "Please check & solve the security weaknesses found by the linter tool",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "Python files are not fully compliant with flake8 (pycodestyle, pyflakes, mccabe) standard",
                            "plugin": {
                                "name": "report2sqaaas-plugin-flake8",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "flake8",
                                "lang": "Python",
                                "version": "4.0.1 (mccabe: 0.6.1, pycodestyle: 2.8.0, pyflakes: 2.4.0)",
                                "docker": {
                                    "image": "pipelinecomponents/flake8:0.9.0",
                                    "reviewed": "2022-03-04"
                                },
                                "ci": {
                                    "name": "QC.Sty github.com/cerfacs-globc/icclim flake8",
                                    "status": "FAILED",
                                    "stdout_command": [
                                        "flake8 ."
                                    ],
                                    "stdout_text": "./tools/extract_icclim_funs.py:5:80: E501 line too long (85 > 79 characters)\n./tools/extract_icclim_funs.py:31:80: E501 line too long (86 > 79 characters)\n./tools/extract_icclim_funs.py:32:80: E501 line too long (87 > 79 characters)\n./tools/extract_icclim_funs.py:113:80: E501 line too long (87 > 79 characters)\n./tools/extract_icclim_funs.py:146:80: E501 line too long (86 > 79 characters)\n./tools/extract_icclim_funs.py:225:80: E501 line too long (80 > 79 characters)\n./tools/extract_icclim_funs.py:260:80: E501 line too long (84 > 79 characters)\n./tools/extract_icclim_funs.py:292:80: E501 line too long (83 > 79 characters)\n./tools/extract_icclim_funs.py:294:80: E501 line too long (82 > 79 characters)\n./tools/extract_icclim_funs.py:305:80: E501 line too long (83 > 79 characters)\n./tools/extract_icclim_funs.py:351:80: E501 line too long (84 > 79 characters)\n./tools/extract_icclim_funs.py:355:80: E501 line too long (83 > 79 characters)\n./tools/extract_icclim_funs.py:357:80: E501 line too long (84 > 79 characters)\n./tools/extract_icclim_funs.py:395:80: E501 line too long (85 > 79 characters)\n./tools/extract_icclim_funs.py:410:80: E501 line too long (86 > 79 characters)\n./tools/extract_icclim_funs.py:443:80: E501 line too long (87 > 79 characters)\n./tools/extract_icclim_funs.py:492:80: E501 line too long (80 > 79 characters)\n./tools/extract_icclim_funs.py:546:80: E501 line too long (85 > 79 characters)\n./tools/extract_icclim_funs.py:567:80: E501 line too long (83 > 79 characters)\n./tools/update_logo_version.py:6:80: E501 line too long (84 > 79 characters)\n./tests/test_threshold.py:75:80: E501 line too long (88 > 79 characters)\n./tests/test_threshold.py:174:80: E501 line too long (88 > 79 characters)\n./tests/test_threshold.py:216:80: E501 line too long (80 > 79 characters)\n./tests/test_main.py:16:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:38:80: E501 line too long (83 > 79 characters)\n./tests/test_main.py:45:80: E501 line too long (82 > 79 characters)\n./tests/test_main.py:102:80: E501 line too long (88 > 79 characters)\n./tests/test_main.py:203:80: E501 line too long (81 > 79 characters)\n./tests/test_main.py:226:80: E501 line too long (86 > 79 characters)\n./tests/test_main.py:259:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:268:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:287:80: E501 line too long (88 > 79 characters)\n./tests/test_main.py:292:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:301:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:514:80: E501 line too long (83 > 79 characters)\n./tests/test_main.py:587:80: E501 line too long (81 > 79 characters)\n./tests/test_main.py:589:80: E501 line too long (86 > 79 characters)\n./tests/test_main.py:640:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:653:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:705:80: E501 line too long (80 > 79 characters)\n./tests/test_main.py:721:80: E501 line too long (80 > 79 characters)\n./tests/test_main.py:737:80: E501 line too long (82 > 79 characters)\n./tests/test_main.py:740:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:765:80: E501 line too long (82 > 79 characters)\n./tests/test_main.py:771:80: E501 line too long (81 > 79 characters)\n./tests/test_main.py:781:80: E501 line too long (85 > 79 characters)\n./tests/test_main.py:787:80: E501 line too long (81 > 79 characters)\n./tests/test_main.py:861:80: E501 line too long (86 > 79 characters)\n./tests/test_main.py:875:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:903:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:920:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:938:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:953:80: E501 line too long (83 > 79 characters)\n./tests/test_main.py:995:80: E501 line too long (83 > 79 characters)\n./tests/test_main.py:1015:80: E501 line too long (80 > 79 characters)\n./tests/test_input_parsing.py:124:80: E501 line too long (85 > 79 characters)\n./tests/test_input_parsing.py:160:80: E501 line too long (81 > 79 characters)\n./tests/test_input_parsing.py:178:80: E501 line too long (84 > 79 characters)\n./tests/test_input_parsing.py:184:80: E501 line too long (86 > 79 characters)\n./tests/test_input_parsing.py:192:80: E501 line too long (80 > 79 characters)\n./tests/test_input_parsing.py:206:80: E501 line too long (81 > 79 characters)\n./tests/test_input_parsing.py:208:80: E501 line too long (86 > 79 characters)\n./tests/test_user_index.py:167:80: E501 line too long (88 > 79 characters)\n./tests/test_user_index.py:189:80: E501 line too long (88 > 79 characters)\n./tests/test_user_index.py:336:80: E501 line too long (80 > 79 characters)\n./tests/test_ecad_indices.py:12:80: E501 line too long (88 > 79 characters)\n./tests/testing_utils.py:37:80: E501 line too long (80 > 79 characters)\n./tests/testing_utils.py:51:80: E501 line too long (83 > 79 characters)\n./tests/test_cf_calendar.py:32:80: E501 line too long (87 > 79 characters)\n./tests/test_cf_calendar.py:37:80: E501 line too long (87 > 79 characters)\n./tests/test_cf_calendar.py:42:80: E501 line too long (87 > 79 characters)\n./tests/test_cf_calendar.py:60:80: E501 line too long (81 > 79 characters)\n./tests/test_frequency.py:92:80: E501 line too long (81 > 79 characters)\n./tests/test_frequency.py:104:80: E501 line too long (87 > 79 characters)\n./tests/test_generated_api.py:16:80: E501 line too long (83 > 79 characters)\n./tests/test_generated_api.py:52:80: E501 line too long (84 > 79 characters)\n./tests/test_rechunk.py:37:80: E501 line too long (83 > 79 characters)\n./tests/test_rechunk.py:69:80: E501 line too long (81 > 79 characters)\n./src/icclim/__init__.py:4:1: F401 'icclim._generated._ecad.*' imported but unused\n./src/icclim/__init__.py:4:80: E501 line too long (86 > 79 characters)\n./src/icclim/__init__.py:5:1: F401 'icclim._generated._generic.*' imported but unused\n./src/icclim/__init__.py:5:80: E501 line too long (92 > 79 characters)\n./src/icclim/rechunk.py:4:80: E501 line too long (83 > 79 characters)\n./src/icclim/rechunk.py:5:80: E501 line too long (80 > 79 characters)\n./src/icclim/rechunk.py:58:80: E501 line too long (86 > 79 characters)\n./src/icclim/rechunk.py:66:80: E501 line too long (88 > 79 characters)\n./src/icclim/rechunk.py:70:80: E501 line too long (82 > 79 characters)\n./src/icclim/rechunk.py:73:80: E501 line too long (85 > 79 characters)\n./src/icclim/rechunk.py:74:80: E501 line too long (86 > 79 characters)\n./src/icclim/rechunk.py:75:80: E501 line too long (85 > 79 characters)\n./src/icclim/rechunk.py:77:80: E501 line too long (86 > 79 characters)\n./src/icclim/rechunk.py:91:80: E501 line too long (84 > 79 characters)\n./src/icclim/rechunk.py:98:80: E501 line too long (84 > 79 characters)\n./src/icclim/rechunk.py:100:80: E501 line too long (80 > 79 characters)\n./src/icclim/rechunk.py:167:80: E501 line too long (83 > 79 characters)\n./src/icclim/rechunk.py:179:80: E501 line too long (80 > 79 characters)\n./src/icclim/rechunk.py:216:80: E501 line too long (85 > 79 characters)\n./src/icclim/rechunk.py:226:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:7:80: E501 line too long (81 > 79 characters)\n./src/icclim/main.py:9:80: E501 line too long (85 > 79 characters)\n./src/icclim/main.py:39:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:95:80: E501 line too long (87 > 79 characters)\n./src/icclim/main.py:97:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:100:80: E501 line too long (87 > 79 characters)\n./src/icclim/main.py:101:80: E501 line too long (83 > 79 characters)\n./src/icclim/main.py:113:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:129:80: E501 line too long (84 > 79 characters)\n./src/icclim/main.py:131:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:138:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:147:80: E501 line too long (87 > 79 characters)\n./src/icclim/main.py:217:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:382:80: E501 line too long (86 > 79 characters)\n./src/icclim/main.py:447:80: E501 line too long (86 > 79 characters)\n./src/icclim/main.py:491:80: E501 line too long (87 > 79 characters)\n./src/icclim/main.py:500:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:582:80: E501 line too long (85 > 79 characters)\n./src/icclim/main.py:636:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:674:80: E501 line too long (85 > 79 characters)\n./src/icclim/main.py:834:80: E501 line too long (81 > 79 characters)\n./src/icclim/main.py:888:80: E501 line too long (81 > 79 characters)\n./src/icclim/main.py:920:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:935:80: E501 line too long (85 > 79 characters)\n./src/icclim/main.py:940:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:5:80: E501 line too long (80 > 79 characters)\n./src/icclim/frequency.py:49:80: E501 line too long (88 > 79 characters)\n./src/icclim/frequency.py:64:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:82:80: E501 line too long (83 > 79 characters)\n./src/icclim/frequency.py:208:80: E501 line too long (88 > 79 characters)\n./src/icclim/frequency.py:257:80: E501 line too long (82 > 79 characters)\n./src/icclim/frequency.py:332:80: E501 line too long (87 > 79 characters)\n./src/icclim/frequency.py:345:80: E501 line too long (87 > 79 characters)\n./src/icclim/frequency.py:358:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:371:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:384:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:397:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:430:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:431:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:434:80: E501 line too long (88 > 79 characters)\n./src/icclim/frequency.py:435:80: E501 line too long (86 > 79 characters)\n./src/icclim/frequency.py:437:80: E501 line too long (86 > 79 characters)\n./src/icclim/frequency.py:439:80: E501 line too long (86 > 79 characters)\n./src/icclim/frequency.py:440:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:485:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:543:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:582:80: E501 line too long (80 > 79 characters)\n./src/icclim/frequency.py:601:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/input_parsing.py:29:5: F811 redefinition of unused 'datetime' from line 8\n./src/icclim/_core/input_parsing.py:53:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:84:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:85:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/input_parsing.py:99:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:117:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:124:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:174:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:175:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:176:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:177:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:188:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:193:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:195:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:256:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/input_parsing.py:260:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:263:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:275:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:307:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/input_parsing.py:320:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:325:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/input_parsing.py:327:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:363:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:368:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/input_parsing.py:371:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:372:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:392:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:393:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:397:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:454:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:458:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:509:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:515:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:532:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:535:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:543:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/input_parsing.py:589:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:616:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:621:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:657:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:676:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:677:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:710:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:736:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:741:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:744:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:756:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/input_parsing.py:772:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:779:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:780:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:802:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:842:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:855:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/climate_variable.py:4:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/climate_variable.py:81:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/climate_variable.py:144:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/climate_variable.py:153:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/climate_variable.py:183:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/climate_variable.py:214:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:215:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/climate_variable.py:217:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:228:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:240:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:243:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/climate_variable.py:248:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/climate_variable.py:253:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/climate_variable.py:264:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:315:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/climate_variable.py:363:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/climate_variable.py:367:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/climate_variable.py:412:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/climate_variable.py:422:28: E203 whitespace before ':'\n./src/icclim/_core/climate_variable.py:422:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/utils.py:14:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/legacy/user_index/__init__.py:5:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/legacy/user_index/__init__.py:6:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:36:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:53:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:55:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:110:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:115:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:136:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:185:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:190:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:193:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/legacy/user_index/model.py:22:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/legacy/user_index/model.py:26:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/legacy/user_index/model.py:40:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/registry.py:24:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/model/registry.py:38:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/model/registry.py:54:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/registry.py:78:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/model/registry.py:134:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/registry.py:138:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/registry.py:151:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/model/standard_index.py:24:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/model/standard_index.py:25:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/standard_index.py:45:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/standard_index.py:51:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/operator.py:142:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/model/icclim_types.py:16:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/icclim_types.py:23:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:4:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:8:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:24:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:60:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:104:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:122:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/index_group.py:35:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/index_group.py:53:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/index_group.py:59:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/logical_link.py:23:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:28:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:32:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:37:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:41:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:67:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:76:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:80:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:140:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:177:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/model/netcdf_version.py:22:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/model/quantile_interpolation.py:45:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/threshold.py:44:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/model/threshold.py:132:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/model/in_file_dictionary.py:30:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/index_config.py:42:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/index_config.py:45:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/index_config.py:66:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/index_config.py:67:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/index_config.py:71:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/model/index_config.py:73:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/index_config.py:75:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/index_config.py:77:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:6:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:8:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:107:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:154:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:198:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:242:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:279:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:312:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/functions.py:313:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:316:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:317:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:367:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:400:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:487:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:488:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:490:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:524:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:532:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:536:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:539:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:572:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:580:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:584:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:587:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:620:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:622:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:628:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:633:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:636:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:669:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:671:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:677:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:682:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:685:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:717:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:718:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:741:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:770:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:771:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:773:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:775:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:793:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:795:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:797:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:813:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:824:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:849:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/functions.py:851:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:853:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:855:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/functions.py:857:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:862:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/functions.py:863:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:917:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:944:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:950:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:971:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/functions.py:999:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:1036:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/functions.py:1064:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:1075:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:1144:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:1149:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:1281:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/functions.py:1329:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:1382:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/indicator.py:159:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/indicator.py:176:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/indicator.py:203:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/indicator.py:206:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/indicator.py:230:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/indicator.py:233:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/indicator.py:417:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/indicator.py:447:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/indicator.py:448:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/indicator.py:450:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/indicator.py:452:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/indicator.py:457:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:34:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:70:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:85:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:93:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:115:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:117:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:128:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:158:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:195:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:208:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:213:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:214:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:10:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:60:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:64:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:65:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:67:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:72:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:76:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:99:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:101:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:173:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:246:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:265:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:280:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:310:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:311:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:315:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:325:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:340:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:341:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:346:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:394:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:419:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:64:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:86:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:90:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:91:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:113:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:116:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:147:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:150:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:168:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:180:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:181:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:221:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:263:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:265:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:276:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:277:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:279:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:332:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:335:80: E501 line too long (86 > 79 characters)\n./src/icclim/ecad/registry.py:5:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/registry.py:28:80: E501 line too long (82 > 79 characters)\n./src/icclim/ecad/registry.py:46:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:476:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:489:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:502:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:515:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:517:80: E501 line too long (86 > 79 characters)\n./src/icclim/ecad/registry.py:527:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:540:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:603:80: E501 line too long (81 > 79 characters)\n./src/icclim/ecad/registry.py:608:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/registry.py:620:80: E501 line too long (81 > 79 characters)\n./src/icclim/ecad/registry.py:625:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/registry.py:637:80: E501 line too long (81 > 79 characters)\n./src/icclim/ecad/registry.py:642:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/registry.py:654:80: E501 line too long (81 > 79 characters)\n./src/icclim/ecad/registry.py:659:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/__init__.py:5:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/__init__.py:11:1: F401 'icclim._generated._ecad.*' imported but unused\n./src/icclim/ecad/binding.py:44:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:48:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:71:80: E501 line too long (82 > 79 characters)\n./src/icclim/ecad/binding.py:85:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:89:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:93:80: E501 line too long (86 > 79 characters)\n./src/icclim/ecad/binding.py:112:80: E501 line too long (82 > 79 characters)\n./src/icclim/ecad/binding.py:126:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:130:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:134:80: E501 line too long (86 > 79 characters)\n./src/icclim/dcsc/registry.py:5:80: E501 line too long (87 > 79 characters)\n./src/icclim/dcsc/registry.py:190:80: E501 line too long (85 > 79 characters)\n./src/icclim/dcsc/registry.py:242:80: E501 line too long (80 > 79 characters)\n./src/icclim/dcsc/registry.py:413:80: E501 line too long (85 > 79 characters)\n./src/icclim/dcsc/registry.py:425:80: E501 line too long (85 > 79 characters)\n./src/icclim/dcsc/registry.py:437:80: E501 line too long (82 > 79 characters)\n./src/icclim/dcsc/registry.py:450:80: E501 line too long (82 > 79 characters)\n./src/icclim/dcsc/registry.py:476:80: E501 line too long (84 > 79 characters)\n./src/icclim/dcsc/__init__.py:6:80: E501 line too long (81 > 79 characters)\n./src/icclim/dcsc/__init__.py:8:80: E501 line too long (85 > 79 characters)\n./src/icclim/dcsc/__init__.py:14:1: F401 'icclim._generated._dcsc.*' imported but unused\n./src/icclim/generic/registry.py:56:80: E501 line too long (86 > 79 characters)\n./src/icclim/generic/registry.py:57:80: E501 line too long (87 > 79 characters)\n./src/icclim/generic/registry.py:58:80: E501 line too long (81 > 79 characters)\n./src/icclim/generic/registry.py:97:80: E501 line too long (80 > 79 characters)\n./src/icclim/generic/registry.py:104:80: E501 line too long (82 > 79 characters)\n./src/icclim/generic/registry.py:105:80: E501 line too long (80 > 79 characters)\n./src/icclim/generic/registry.py:112:80: E501 line too long (88 > 79 characters)\n./src/icclim/generic/registry.py:118:80: E501 line too long (87 > 79 characters)\n./src/icclim/generic/registry.py:124:80: E501 line too long (87 > 79 characters)\n./src/icclim/generic/registry.py:130:80: E501 line too long (87 > 79 characters)\n./src/icclim/generic/registry.py:136:80: E501 line too long (83 > 79 characters)\n./src/icclim/generic/registry.py:194:80: E501 line too long (86 > 79 characters)\n./src/icclim/generic/__init__.py:3:80: E501 line too long (83 > 79 characters)\n./src/icclim/generic/__init__.py:9:80: E501 line too long (84 > 79 characters)\n./src/icclim/generic/__init__.py:11:80: E501 line too long (83 > 79 characters)\n./src/icclim/generic/__init__.py:24:1: F401 'icclim._generated._generic.*' imported but unused\n./src/icclim/_generated/_dcsc.py:90:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:96:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:105:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:107:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:111:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:113:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:121:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:171:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:177:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:186:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:188:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:192:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:194:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:202:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:252:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:258:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:267:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:269:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:273:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:275:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:283:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:316:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:325:80: E501 line too long (97 > 79 characters)\n./src/icclim/_generated/_dcsc.py:327:80: E501 line too long (104 > 79 characters)\n./src/icclim/_generated/_dcsc.py:337:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:343:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:352:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:354:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:358:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:360:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:363:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:365:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:370:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:373:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:389:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:392:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:436:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:445:80: E501 line too long (97 > 79 characters)\n./src/icclim/_generated/_dcsc.py:447:80: E501 line too long (104 > 79 characters)\n./src/icclim/_generated/_dcsc.py:457:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:463:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:472:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:474:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:478:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:480:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:483:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:485:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:490:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:493:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:509:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:512:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:556:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:565:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_dcsc.py:567:80: E501 line too long (105 > 79 characters)\n./src/icclim/_generated/_dcsc.py:577:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:583:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:592:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:594:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:598:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:600:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:603:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:605:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:610:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:613:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:629:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:632:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:676:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:685:80: E501 line too long (97 > 79 characters)\n./src/icclim/_generated/_dcsc.py:687:80: E501 line too long (104 > 79 characters)\n./src/icclim/_generated/_dcsc.py:697:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:703:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:712:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:714:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:718:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:720:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:723:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:725:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:730:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:733:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:749:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:752:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:813:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:819:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:828:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:830:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:834:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:836:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:844:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:897:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:903:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:912:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:914:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:918:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:920:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:928:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:981:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:987:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:996:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:998:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1002:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1004:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1012:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1065:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1071:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1080:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1082:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1086:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1088:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1096:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1149:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1155:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1164:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1166:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1170:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1172:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1180:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1223:80: E501 line too long (101 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1225:80: E501 line too long (108 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1235:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1241:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1250:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1252:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1256:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1258:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1266:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1274:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1276:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1323:80: E501 line too long (102 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1325:80: E501 line too long (109 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1335:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1341:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1350:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1352:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1356:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1358:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1366:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1374:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1376:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1423:80: E501 line too long (101 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1425:80: E501 line too long (108 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1435:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1441:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1450:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1452:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1456:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1458:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1466:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1474:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1476:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1523:80: E501 line too long (116 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1525:80: E501 line too long (124 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1535:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1541:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1550:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1552:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1556:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1558:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1566:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1574:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1576:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1623:80: E501 line too long (118 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1625:80: E501 line too long (126 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1635:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1641:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1650:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1652:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1656:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1658:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1666:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1674:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1676:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1721:80: E501 line too long (121 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1723:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1733:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1739:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1748:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1750:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1754:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1756:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1764:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1805:80: E501 line too long (121 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1807:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1817:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1823:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1832:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1834:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1838:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1840:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1848:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1901:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1907:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1916:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1918:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1922:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1924:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1932:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1982:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1988:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1997:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1999:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2003:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2005:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2013:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2066:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2072:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2081:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2083:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2087:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2089:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2097:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2147:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2153:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2162:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2164:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2168:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2170:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2178:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2231:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2237:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2246:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2248:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2252:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2254:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2262:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2315:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2321:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2330:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2332:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2336:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2338:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2346:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2387:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2389:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2399:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2405:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2414:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2416:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2420:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2422:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2430:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2466:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2487:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2493:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2502:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2504:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2508:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2510:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2513:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2515:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2520:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2523:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2539:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2542:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2587:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2608:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2614:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2623:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2625:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2629:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2631:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2634:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2636:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2641:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2644:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2660:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2663:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2708:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2729:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2735:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2744:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2746:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2750:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2752:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2755:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2757:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2762:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2765:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2781:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2784:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2829:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2850:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2856:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2865:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2867:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2871:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2873:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2876:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2878:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2883:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2886:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2902:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2905:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2950:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2956:80: E501 line too long (92 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2958:80: E501 line too long (99 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2968:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2974:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2983:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2985:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2989:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2991:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2994:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2996:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3001:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3004:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3013:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3047:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3056:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3058:80: E501 line too long (87 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3068:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3074:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3083:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3085:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3089:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3091:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3094:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3096:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3101:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3104:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3120:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3123:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:72:80: E501 line too long (89 > 79 characters)\n./src/icclim/_generated/_generic.py:81:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:87:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:96:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:98:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:102:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:104:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:110:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:120:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:123:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:166:80: E501 line too long (102 > 79 characters)\n./src/icclim/_generated/_generic.py:168:80: E501 line too long (131 > 79 characters)\n./src/icclim/_generated/_generic.py:177:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:183:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:192:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:194:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:198:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:200:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:206:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:216:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:219:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:263:80: E501 line too long (162 > 79 characters)\n./src/icclim/_generated/_generic.py:265:80: E501 line too long (185 > 79 characters)\n./src/icclim/_generated/_generic.py:274:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:280:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:289:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:291:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:295:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:297:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:303:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:306:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:316:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:319:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:363:80: E501 line too long (143 > 79 characters)\n./src/icclim/_generated/_generic.py:365:80: E501 line too long (152 > 79 characters)\n./src/icclim/_generated/_generic.py:374:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:380:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:389:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:391:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:395:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:397:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:403:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:413:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:416:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:459:80: E501 line too long (147 > 79 characters)\n./src/icclim/_generated/_generic.py:461:80: E501 line too long (157 > 79 characters)\n./src/icclim/_generated/_generic.py:470:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:476:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:485:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:487:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:491:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:493:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:499:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:509:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:512:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:555:80: E501 line too long (108 > 79 characters)\n./src/icclim/_generated/_generic.py:557:80: E501 line too long (128 > 79 characters)\n./src/icclim/_generated/_generic.py:566:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:572:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:581:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:583:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:587:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:589:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:595:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:605:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:608:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:651:80: E501 line too long (86 > 79 characters)\n./src/icclim/_generated/_generic.py:653:80: E501 line too long (96 > 79 characters)\n./src/icclim/_generated/_generic.py:662:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:668:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:677:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:679:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:683:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:685:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:691:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:701:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:704:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:747:80: E501 line too long (86 > 79 characters)\n./src/icclim/_generated/_generic.py:749:80: E501 line too long (96 > 79 characters)\n./src/icclim/_generated/_generic.py:758:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:764:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:773:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:775:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:779:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:781:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:787:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:797:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:800:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:843:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:845:80: E501 line too long (94 > 79 characters)\n./src/icclim/_generated/_generic.py:854:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:860:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:869:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:871:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:875:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:877:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:883:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:893:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:896:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:939:80: E501 line too long (85 > 79 characters)\n./src/icclim/_generated/_generic.py:941:80: E501 line too long (91 > 79 characters)\n./src/icclim/_generated/_generic.py:950:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:956:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:965:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:967:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:971:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:973:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:979:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:989:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:992:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1035:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1037:80: E501 line too long (102 > 79 characters)\n./src/icclim/_generated/_generic.py:1046:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1052:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1061:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1063:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1067:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1069:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1075:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1085:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1088:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1132:80: E501 line too long (113 > 79 characters)\n./src/icclim/_generated/_generic.py:1134:80: E501 line too long (134 > 79 characters)\n./src/icclim/_generated/_generic.py:1143:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1149:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1158:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1160:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1164:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1166:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1172:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1176:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:1185:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1188:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1244:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1250:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1259:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1261:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1265:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1267:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1273:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1277:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:1286:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1289:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1345:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1351:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1360:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1362:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1366:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1368:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1374:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1378:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:1387:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1390:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1446:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1452:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1461:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1463:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1467:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1469:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1475:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1479:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:1488:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1491:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1535:80: E501 line too long (137 > 79 characters)\n./src/icclim/_generated/_generic.py:1537:80: E501 line too long (158 > 79 characters)\n./src/icclim/_generated/_generic.py:1546:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1552:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1561:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1563:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1567:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1569:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1575:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1585:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1588:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1631:80: E501 line too long (234 > 79 characters)\n./src/icclim/_generated/_generic.py:1633:80: E501 line too long (259 > 79 characters)\n./src/icclim/_generated/_generic.py:1642:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1648:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1657:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1659:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1663:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1665:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1671:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1681:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1684:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1727:80: E501 line too long (247 > 79 characters)\n./src/icclim/_generated/_generic.py:1729:80: E501 line too long (291 > 79 characters)\n./src/icclim/_generated/_generic.py:1738:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1744:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1753:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1755:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1759:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1761:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1767:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1777:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1780:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1793:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1824:80: E501 line too long (152 > 79 characters)\n./src/icclim/_generated/_generic.py:1826:80: E501 line too long (174 > 79 characters)\n./src/icclim/_generated/_generic.py:1835:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1841:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1850:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1852:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1856:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1858:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1864:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1874:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1877:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1885:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1940:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1946:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1955:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1957:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1961:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1963:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1969:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1979:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1982:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2018:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:2034:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:2044:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2050:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:2059:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:2061:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2065:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:2067:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:2070:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_generic.py:2072:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2077:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:2080:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2085:80: E501 line too long (85 > 79 characters)\n./src/icclim/_generated/_generic.py:2089:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2093:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:2109:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:2112:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2120:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:121:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:127:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:136:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:138:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:142:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:144:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:152:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:202:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:208:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:217:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:219:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:223:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:225:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:233:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:283:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:289:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:298:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:300:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:304:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:306:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:314:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:364:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:370:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:379:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:381:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:385:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:387:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:395:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:445:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:451:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:460:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:462:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:466:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:468:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:476:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:526:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:532:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:541:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:543:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:547:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:549:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:557:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:607:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:613:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:622:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:624:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:628:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:630:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:638:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:691:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:697:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:706:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:708:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:712:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:714:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:722:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:758:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:779:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:785:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:794:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:796:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:800:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:802:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:805:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:807:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:812:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:815:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:831:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:834:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:878:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:899:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:905:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:914:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:916:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:920:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:922:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:925:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:927:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:932:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:935:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:951:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:954:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:998:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1019:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1025:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1034:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1036:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1040:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1042:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1045:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:1047:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1052:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1055:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1071:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1074:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1118:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1139:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1145:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1154:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1156:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1160:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1162:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1165:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:1167:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1172:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1175:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1191:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1194:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1255:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1261:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1270:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1272:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1276:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1278:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1286:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1336:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1342:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1351:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1353:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1357:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1359:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1367:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1417:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1423:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1432:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1434:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1438:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1440:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1448:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1501:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1507:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1516:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1518:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1522:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1524:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1532:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1585:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1591:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1600:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1602:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1606:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1608:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1616:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1669:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1675:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1684:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1686:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1690:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1692:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1700:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1753:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1759:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1768:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1770:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1774:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1776:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1784:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1837:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1843:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1852:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1854:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1858:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1860:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1868:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1904:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1925:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1931:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1940:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1942:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1946:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1948:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1951:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:1953:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1958:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1961:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1977:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1980:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2024:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2045:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2051:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2060:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2062:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2066:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2068:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2071:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:2073:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2078:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2081:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2097:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2100:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2144:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2165:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2171:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2180:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2182:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2186:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2188:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2191:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:2193:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2198:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2201:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2217:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2220:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2281:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2287:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2296:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2298:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2302:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2304:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2312:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2362:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2368:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2377:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2379:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2383:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2385:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2393:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2426:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2447:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2453:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2462:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2464:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2468:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2470:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2473:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:2475:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2480:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2483:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2499:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2502:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2563:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2569:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2578:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2580:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2584:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2586:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2594:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2647:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2653:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2662:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2664:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2668:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2670:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2678:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2731:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2737:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2746:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2748:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2752:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2754:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2762:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2815:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2821:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2830:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2832:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2836:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2838:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2846:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2899:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2905:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2914:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2916:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2920:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2922:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2930:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2983:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2989:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2998:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3000:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3004:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3006:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3014:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3064:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3070:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3079:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3081:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3085:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3087:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3095:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3148:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3154:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3163:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3165:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3169:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3171:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3179:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3232:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3238:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3247:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3249:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3253:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3255:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3263:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3313:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3319:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3328:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3330:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3334:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3336:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3344:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3377:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3388:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3398:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3404:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3413:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3415:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3419:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3421:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3424:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3426:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3431:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3434:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3450:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3453:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3498:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3509:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_ecad.py:3519:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3525:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3534:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3536:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3540:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3542:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3545:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3547:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3552:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3555:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3571:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3574:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3619:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3630:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_ecad.py:3640:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3646:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3655:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3657:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3661:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3663:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3666:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3668:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3673:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3676:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3692:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3695:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3740:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3761:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3767:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3776:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3778:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3782:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3784:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3787:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3789:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3794:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3797:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3813:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3816:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3861:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3882:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3888:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3897:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3899:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3903:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3905:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3908:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3910:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3915:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3918:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3934:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3937:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3982:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3993:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4003:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4009:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4018:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4020:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4024:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4026:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4029:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4031:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4036:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4039:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4055:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4058:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4120:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4126:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4135:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4137:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4141:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4143:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4151:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4201:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4207:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4216:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4218:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4222:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4224:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4232:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4285:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4291:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4300:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4302:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4306:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4308:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4316:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4369:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4375:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4384:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4386:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4390:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4392:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4400:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4436:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4445:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_ecad.py:4447:80: E501 line too long (132 > 79 characters)\n./src/icclim/_generated/_ecad.py:4457:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4463:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4472:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4474:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4478:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4480:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4483:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4485:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4490:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4493:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4509:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4512:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4566:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4575:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_ecad.py:4577:80: E501 line too long (132 > 79 characters)\n./src/icclim/_generated/_ecad.py:4587:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4593:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4602:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4604:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4608:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4610:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4613:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4615:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4620:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4623:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4639:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4642:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4696:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4705:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_ecad.py:4707:80: E501 line too long (132 > 79 characters)\n./src/icclim/_generated/_ecad.py:4717:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4723:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4732:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4734:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4738:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4740:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4743:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4745:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4750:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4753:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4769:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4772:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4826:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4835:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_ecad.py:4837:80: E501 line too long (132 > 79 characters)\n./src/icclim/_generated/_ecad.py:4847:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4853:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4862:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4864:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4868:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4870:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4873:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4875:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4880:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4883:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4899:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4902:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4973:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4979:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4988:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4990:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4994:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4996:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5004:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5054:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5060:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5069:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5071:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5075:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5077:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5085:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5138:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5144:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5153:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5155:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5159:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5161:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5169:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5222:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5228:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5237:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5239:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5243:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5245:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5253:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5303:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5309:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5318:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5320:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5324:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5326:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5334:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5387:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5393:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5402:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5404:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5408:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5410:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5418:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5471:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5477:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5486:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5488:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5492:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5494:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5502:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5555:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5561:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5570:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5572:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5576:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5578:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5586:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5639:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5645:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5654:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5656:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5660:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5662:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5670:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5703:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5721:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5727:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5736:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5738:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5742:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5744:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5747:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:5749:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5754:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5757:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5766:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5800:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5818:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5824:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5833:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5835:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5839:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5841:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5844:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:5846:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5851:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5854:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5863:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5914:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5920:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5929:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5931:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5935:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5937:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5945:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5995:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6001:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:6010:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:6012:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6016:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:6018:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:6026:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6076:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6082:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:6091:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:6093:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6097:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:6099:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:6107:80: E501 line too long (83 > 79 characters)\n./src/icclim/threshold/__init__.py:4:80: E501 line too long (88 > 79 characters)\n./src/icclim/threshold/factory.py:60:80: E501 line too long (85 > 79 characters)\n./src/icclim/threshold/factory.py:61:80: E501 line too long (81 > 79 characters)\n./src/icclim/threshold/factory.py:70:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:77:80: E501 line too long (81 > 79 characters)\n./src/icclim/threshold/factory.py:79:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:81:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:86:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:87:80: E501 line too long (88 > 79 characters)\n./src/icclim/threshold/factory.py:89:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:95:80: E501 line too long (85 > 79 characters)\n./src/icclim/threshold/factory.py:96:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:98:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:100:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:102:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:106:80: E501 line too long (84 > 79 characters)\n./src/icclim/threshold/factory.py:107:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:112:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:113:80: E501 line too long (85 > 79 characters)\n./src/icclim/threshold/factory.py:135:80: E501 line too long (83 > 79 characters)\n./src/icclim/threshold/factory.py:318:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:340:80: E501 line too long (81 > 79 characters)\n./src/icclim/threshold/factory.py:352:45: E203 whitespace before ':'\n./src/icclim/threshold/factory.py:378:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:392:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:408:80: E501 line too long (82 > 79 characters)\n./src/icclim/threshold/factory.py:411:80: E501 line too long (80 > 79 characters)\n./src/icclim/threshold/factory.py:420:80: E501 line too long (88 > 79 characters)\n./src/icclim/threshold/factory.py:430:80: E501 line too long (82 > 79 characters)\n./src/icclim/threshold/factory.py:431:80: E501 line too long (84 > 79 characters)\n./doc/source/conf.py:18:1: E402 module level import not at top of file\n./doc/source/conf.py:33:80: E501 line too long (86 > 79 characters)",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/97/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": "./tools/extract_icclim_funs.py:5:80: E501 line too long (85 > 79 characters)\n./tools/extract_icclim_funs.py:31:80: E501 line too long (86 > 79 characters)\n./tools/extract_icclim_funs.py:32:80: E501 line too long (87 > 79 characters)\n./tools/extract_icclim_funs.py:113:80: E501 line too long (87 > 79 characters)\n./tools/extract_icclim_funs.py:146:80: E501 line too long (86 > 79 characters)\n./tools/extract_icclim_funs.py:225:80: E501 line too long (80 > 79 characters)\n./tools/extract_icclim_funs.py:260:80: E501 line too long (84 > 79 characters)\n./tools/extract_icclim_funs.py:292:80: E501 line too long (83 > 79 characters)\n./tools/extract_icclim_funs.py:294:80: E501 line too long (82 > 79 characters)\n./tools/extract_icclim_funs.py:305:80: E501 line too long (83 > 79 characters)\n./tools/extract_icclim_funs.py:351:80: E501 line too long (84 > 79 characters)\n./tools/extract_icclim_funs.py:355:80: E501 line too long (83 > 79 characters)\n./tools/extract_icclim_funs.py:357:80: E501 line too long (84 > 79 characters)\n./tools/extract_icclim_funs.py:395:80: E501 line too long (85 > 79 characters)\n./tools/extract_icclim_funs.py:410:80: E501 line too long (86 > 79 characters)\n./tools/extract_icclim_funs.py:443:80: E501 line too long (87 > 79 characters)\n./tools/extract_icclim_funs.py:492:80: E501 line too long (80 > 79 characters)\n./tools/extract_icclim_funs.py:546:80: E501 line too long (85 > 79 characters)\n./tools/extract_icclim_funs.py:567:80: E501 line too long (83 > 79 characters)\n./tools/update_logo_version.py:6:80: E501 line too long (84 > 79 characters)\n./tests/test_threshold.py:75:80: E501 line too long (88 > 79 characters)\n./tests/test_threshold.py:174:80: E501 line too long (88 > 79 characters)\n./tests/test_threshold.py:216:80: E501 line too long (80 > 79 characters)\n./tests/test_main.py:16:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:38:80: E501 line too long (83 > 79 characters)\n./tests/test_main.py:45:80: E501 line too long (82 > 79 characters)\n./tests/test_main.py:102:80: E501 line too long (88 > 79 characters)\n./tests/test_main.py:203:80: E501 line too long (81 > 79 characters)\n./tests/test_main.py:226:80: E501 line too long (86 > 79 characters)\n./tests/test_main.py:259:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:268:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:287:80: E501 line too long (88 > 79 characters)\n./tests/test_main.py:292:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:301:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:514:80: E501 line too long (83 > 79 characters)\n./tests/test_main.py:587:80: E501 line too long (81 > 79 characters)\n./tests/test_main.py:589:80: E501 line too long (86 > 79 characters)\n./tests/test_main.py:640:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:653:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:705:80: E501 line too long (80 > 79 characters)\n./tests/test_main.py:721:80: E501 line too long (80 > 79 characters)\n./tests/test_main.py:737:80: E501 line too long (82 > 79 characters)\n./tests/test_main.py:740:80: E501 line too long (84 > 79 characters)\n./tests/test_main.py:765:80: E501 line too long (82 > 79 characters)\n./tests/test_main.py:771:80: E501 line too long (81 > 79 characters)\n./tests/test_main.py:781:80: E501 line too long (85 > 79 characters)\n./tests/test_main.py:787:80: E501 line too long (81 > 79 characters)\n./tests/test_main.py:861:80: E501 line too long (86 > 79 characters)\n./tests/test_main.py:875:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:903:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:920:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:938:80: E501 line too long (87 > 79 characters)\n./tests/test_main.py:953:80: E501 line too long (83 > 79 characters)\n./tests/test_main.py:995:80: E501 line too long (83 > 79 characters)\n./tests/test_main.py:1015:80: E501 line too long (80 > 79 characters)\n./tests/test_input_parsing.py:124:80: E501 line too long (85 > 79 characters)\n./tests/test_input_parsing.py:160:80: E501 line too long (81 > 79 characters)\n./tests/test_input_parsing.py:178:80: E501 line too long (84 > 79 characters)\n./tests/test_input_parsing.py:184:80: E501 line too long (86 > 79 characters)\n./tests/test_input_parsing.py:192:80: E501 line too long (80 > 79 characters)\n./tests/test_input_parsing.py:206:80: E501 line too long (81 > 79 characters)\n./tests/test_input_parsing.py:208:80: E501 line too long (86 > 79 characters)\n./tests/test_user_index.py:167:80: E501 line too long (88 > 79 characters)\n./tests/test_user_index.py:189:80: E501 line too long (88 > 79 characters)\n./tests/test_user_index.py:336:80: E501 line too long (80 > 79 characters)\n./tests/test_ecad_indices.py:12:80: E501 line too long (88 > 79 characters)\n./tests/testing_utils.py:37:80: E501 line too long (80 > 79 characters)\n./tests/testing_utils.py:51:80: E501 line too long (83 > 79 characters)\n./tests/test_cf_calendar.py:32:80: E501 line too long (87 > 79 characters)\n./tests/test_cf_calendar.py:37:80: E501 line too long (87 > 79 characters)\n./tests/test_cf_calendar.py:42:80: E501 line too long (87 > 79 characters)\n./tests/test_cf_calendar.py:60:80: E501 line too long (81 > 79 characters)\n./tests/test_frequency.py:92:80: E501 line too long (81 > 79 characters)\n./tests/test_frequency.py:104:80: E501 line too long (87 > 79 characters)\n./tests/test_generated_api.py:16:80: E501 line too long (83 > 79 characters)\n./tests/test_generated_api.py:52:80: E501 line too long (84 > 79 characters)\n./tests/test_rechunk.py:37:80: E501 line too long (83 > 79 characters)\n./tests/test_rechunk.py:69:80: E501 line too long (81 > 79 characters)\n./src/icclim/__init__.py:4:1: F401 'icclim._generated._ecad.*' imported but unused\n./src/icclim/__init__.py:4:80: E501 line too long (86 > 79 characters)\n./src/icclim/__init__.py:5:1: F401 'icclim._generated._generic.*' imported but unused\n./src/icclim/__init__.py:5:80: E501 line too long (92 > 79 characters)\n./src/icclim/rechunk.py:4:80: E501 line too long (83 > 79 characters)\n./src/icclim/rechunk.py:5:80: E501 line too long (80 > 79 characters)\n./src/icclim/rechunk.py:58:80: E501 line too long (86 > 79 characters)\n./src/icclim/rechunk.py:66:80: E501 line too long (88 > 79 characters)\n./src/icclim/rechunk.py:70:80: E501 line too long (82 > 79 characters)\n./src/icclim/rechunk.py:73:80: E501 line too long (85 > 79 characters)\n./src/icclim/rechunk.py:74:80: E501 line too long (86 > 79 characters)\n./src/icclim/rechunk.py:75:80: E501 line too long (85 > 79 characters)\n./src/icclim/rechunk.py:77:80: E501 line too long (86 > 79 characters)\n./src/icclim/rechunk.py:91:80: E501 line too long (84 > 79 characters)\n./src/icclim/rechunk.py:98:80: E501 line too long (84 > 79 characters)\n./src/icclim/rechunk.py:100:80: E501 line too long (80 > 79 characters)\n./src/icclim/rechunk.py:167:80: E501 line too long (83 > 79 characters)\n./src/icclim/rechunk.py:179:80: E501 line too long (80 > 79 characters)\n./src/icclim/rechunk.py:216:80: E501 line too long (85 > 79 characters)\n./src/icclim/rechunk.py:226:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:7:80: E501 line too long (81 > 79 characters)\n./src/icclim/main.py:9:80: E501 line too long (85 > 79 characters)\n./src/icclim/main.py:39:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:95:80: E501 line too long (87 > 79 characters)\n./src/icclim/main.py:97:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:100:80: E501 line too long (87 > 79 characters)\n./src/icclim/main.py:101:80: E501 line too long (83 > 79 characters)\n./src/icclim/main.py:113:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:129:80: E501 line too long (84 > 79 characters)\n./src/icclim/main.py:131:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:138:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:147:80: E501 line too long (87 > 79 characters)\n./src/icclim/main.py:217:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:382:80: E501 line too long (86 > 79 characters)\n./src/icclim/main.py:447:80: E501 line too long (86 > 79 characters)\n./src/icclim/main.py:491:80: E501 line too long (87 > 79 characters)\n./src/icclim/main.py:500:80: E501 line too long (80 > 79 characters)\n./src/icclim/main.py:582:80: E501 line too long (85 > 79 characters)\n./src/icclim/main.py:636:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:674:80: E501 line too long (85 > 79 characters)\n./src/icclim/main.py:834:80: E501 line too long (81 > 79 characters)\n./src/icclim/main.py:888:80: E501 line too long (81 > 79 characters)\n./src/icclim/main.py:920:80: E501 line too long (82 > 79 characters)\n./src/icclim/main.py:935:80: E501 line too long (85 > 79 characters)\n./src/icclim/main.py:940:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:5:80: E501 line too long (80 > 79 characters)\n./src/icclim/frequency.py:49:80: E501 line too long (88 > 79 characters)\n./src/icclim/frequency.py:64:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:82:80: E501 line too long (83 > 79 characters)\n./src/icclim/frequency.py:208:80: E501 line too long (88 > 79 characters)\n./src/icclim/frequency.py:257:80: E501 line too long (82 > 79 characters)\n./src/icclim/frequency.py:332:80: E501 line too long (87 > 79 characters)\n./src/icclim/frequency.py:345:80: E501 line too long (87 > 79 characters)\n./src/icclim/frequency.py:358:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:371:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:384:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:397:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:430:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:431:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:434:80: E501 line too long (88 > 79 characters)\n./src/icclim/frequency.py:435:80: E501 line too long (86 > 79 characters)\n./src/icclim/frequency.py:437:80: E501 line too long (86 > 79 characters)\n./src/icclim/frequency.py:439:80: E501 line too long (86 > 79 characters)\n./src/icclim/frequency.py:440:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:485:80: E501 line too long (85 > 79 characters)\n./src/icclim/frequency.py:543:80: E501 line too long (81 > 79 characters)\n./src/icclim/frequency.py:582:80: E501 line too long (80 > 79 characters)\n./src/icclim/frequency.py:601:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/input_parsing.py:29:5: F811 redefinition of unused 'datetime' from line 8\n./src/icclim/_core/input_parsing.py:53:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:84:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:85:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/input_parsing.py:99:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:117:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:124:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:174:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:175:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:176:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:177:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:188:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:193:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:195:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:256:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/input_parsing.py:260:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:263:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:275:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:307:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/input_parsing.py:320:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:325:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/input_parsing.py:327:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:363:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:368:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/input_parsing.py:371:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:372:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:392:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:393:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:397:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:454:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:458:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:509:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/input_parsing.py:515:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:532:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:535:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:543:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/input_parsing.py:589:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:616:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:621:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:657:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:676:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/input_parsing.py:677:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:710:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/input_parsing.py:736:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:741:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:744:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:756:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/input_parsing.py:772:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:779:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/input_parsing.py:780:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/input_parsing.py:802:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/input_parsing.py:842:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/input_parsing.py:855:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/climate_variable.py:4:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/climate_variable.py:81:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/climate_variable.py:144:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/climate_variable.py:153:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/climate_variable.py:183:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/climate_variable.py:214:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:215:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/climate_variable.py:217:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:228:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:240:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:243:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/climate_variable.py:248:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/climate_variable.py:253:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/climate_variable.py:264:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/climate_variable.py:315:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/climate_variable.py:363:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/climate_variable.py:367:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/climate_variable.py:412:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/climate_variable.py:422:28: E203 whitespace before ':'\n./src/icclim/_core/climate_variable.py:422:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/utils.py:14:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/legacy/user_index/__init__.py:5:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/legacy/user_index/__init__.py:6:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:36:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:53:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:55:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:110:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:115:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:136:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:185:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:190:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/legacy/user_index/parse.py:193:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/legacy/user_index/model.py:22:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/legacy/user_index/model.py:26:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/legacy/user_index/model.py:40:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/registry.py:24:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/model/registry.py:38:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/model/registry.py:54:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/registry.py:78:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/model/registry.py:134:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/registry.py:138:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/registry.py:151:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/model/standard_index.py:24:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/model/standard_index.py:25:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/standard_index.py:45:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/standard_index.py:51:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/operator.py:142:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/model/icclim_types.py:16:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/icclim_types.py:23:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:4:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:8:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:24:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:60:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:104:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/standard_variable.py:122:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/index_group.py:35:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/index_group.py:53:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/index_group.py:59:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/logical_link.py:23:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:28:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:32:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:37:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:41:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:67:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:76:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:80:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:140:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/cf_calendar.py:177:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/model/netcdf_version.py:22:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/model/quantile_interpolation.py:45:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/threshold.py:44:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/model/threshold.py:132:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/model/in_file_dictionary.py:30:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/model/index_config.py:42:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/model/index_config.py:45:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/index_config.py:66:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/model/index_config.py:67:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/model/index_config.py:71:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/model/index_config.py:73:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/model/index_config.py:75:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/model/index_config.py:77:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:6:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:8:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:107:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:154:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:198:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:242:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:279:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:312:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/functions.py:313:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:316:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:317:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:367:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:400:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:487:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:488:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:490:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:524:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:532:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:536:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:539:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:572:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:580:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:584:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:587:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:620:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:622:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:628:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:633:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:636:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:669:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:671:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:677:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:682:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:685:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/functions.py:717:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:718:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:741:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:770:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:771:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:773:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:775:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:793:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:795:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:797:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:813:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:824:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:849:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/functions.py:851:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:853:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:855:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/functions.py:857:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/functions.py:862:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/functions.py:863:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:917:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:944:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/functions.py:950:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:971:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/functions.py:999:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:1036:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/functions.py:1064:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/functions.py:1075:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:1144:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/functions.py:1149:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/functions.py:1281:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/functions.py:1329:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/functions.py:1382:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/indicator.py:159:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/indicator.py:176:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/indicator.py:203:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/indicator.py:206:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/indicator.py:230:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/indicator.py:233:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/indicator.py:417:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/indicator.py:447:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/indicator.py:448:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/indicator.py:450:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/indicator.py:452:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/indicator.py:457:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:34:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:70:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:85:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:93:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:115:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:117:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:128:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:158:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:195:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:208:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:213:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/bounded.py:214:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:10:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:60:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:64:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:65:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:67:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:72:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:76:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:99:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:101:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:173:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:246:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:265:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:280:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:310:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:311:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:315:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:325:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:340:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:341:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:346:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:394:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/threshold/percentile.py:419:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:64:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:86:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:90:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:91:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:113:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:116:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:147:80: E501 line too long (87 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:150:80: E501 line too long (83 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:168:80: E501 line too long (86 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:180:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:181:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:221:80: E501 line too long (88 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:263:80: E501 line too long (82 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:265:80: E501 line too long (84 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:276:80: E501 line too long (80 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:277:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:279:80: E501 line too long (81 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:332:80: E501 line too long (85 > 79 characters)\n./src/icclim/_core/generic/threshold/basic.py:335:80: E501 line too long (86 > 79 characters)\n./src/icclim/ecad/registry.py:5:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/registry.py:28:80: E501 line too long (82 > 79 characters)\n./src/icclim/ecad/registry.py:46:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:476:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:489:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:502:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:515:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:517:80: E501 line too long (86 > 79 characters)\n./src/icclim/ecad/registry.py:527:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:540:80: E501 line too long (85 > 79 characters)\n./src/icclim/ecad/registry.py:603:80: E501 line too long (81 > 79 characters)\n./src/icclim/ecad/registry.py:608:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/registry.py:620:80: E501 line too long (81 > 79 characters)\n./src/icclim/ecad/registry.py:625:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/registry.py:637:80: E501 line too long (81 > 79 characters)\n./src/icclim/ecad/registry.py:642:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/registry.py:654:80: E501 line too long (81 > 79 characters)\n./src/icclim/ecad/registry.py:659:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/__init__.py:5:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/__init__.py:11:1: F401 'icclim._generated._ecad.*' imported but unused\n./src/icclim/ecad/binding.py:44:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:48:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:71:80: E501 line too long (82 > 79 characters)\n./src/icclim/ecad/binding.py:85:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:89:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:93:80: E501 line too long (86 > 79 characters)\n./src/icclim/ecad/binding.py:112:80: E501 line too long (82 > 79 characters)\n./src/icclim/ecad/binding.py:126:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:130:80: E501 line too long (84 > 79 characters)\n./src/icclim/ecad/binding.py:134:80: E501 line too long (86 > 79 characters)\n./src/icclim/dcsc/registry.py:5:80: E501 line too long (87 > 79 characters)\n./src/icclim/dcsc/registry.py:190:80: E501 line too long (85 > 79 characters)\n./src/icclim/dcsc/registry.py:242:80: E501 line too long (80 > 79 characters)\n./src/icclim/dcsc/registry.py:413:80: E501 line too long (85 > 79 characters)\n./src/icclim/dcsc/registry.py:425:80: E501 line too long (85 > 79 characters)\n./src/icclim/dcsc/registry.py:437:80: E501 line too long (82 > 79 characters)\n./src/icclim/dcsc/registry.py:450:80: E501 line too long (82 > 79 characters)\n./src/icclim/dcsc/registry.py:476:80: E501 line too long (84 > 79 characters)\n./src/icclim/dcsc/__init__.py:6:80: E501 line too long (81 > 79 characters)\n./src/icclim/dcsc/__init__.py:8:80: E501 line too long (85 > 79 characters)\n./src/icclim/dcsc/__init__.py:14:1: F401 'icclim._generated._dcsc.*' imported but unused\n./src/icclim/generic/registry.py:56:80: E501 line too long (86 > 79 characters)\n./src/icclim/generic/registry.py:57:80: E501 line too long (87 > 79 characters)\n./src/icclim/generic/registry.py:58:80: E501 line too long (81 > 79 characters)\n./src/icclim/generic/registry.py:97:80: E501 line too long (80 > 79 characters)\n./src/icclim/generic/registry.py:104:80: E501 line too long (82 > 79 characters)\n./src/icclim/generic/registry.py:105:80: E501 line too long (80 > 79 characters)\n./src/icclim/generic/registry.py:112:80: E501 line too long (88 > 79 characters)\n./src/icclim/generic/registry.py:118:80: E501 line too long (87 > 79 characters)\n./src/icclim/generic/registry.py:124:80: E501 line too long (87 > 79 characters)\n./src/icclim/generic/registry.py:130:80: E501 line too long (87 > 79 characters)\n./src/icclim/generic/registry.py:136:80: E501 line too long (83 > 79 characters)\n./src/icclim/generic/registry.py:194:80: E501 line too long (86 > 79 characters)\n./src/icclim/generic/__init__.py:3:80: E501 line too long (83 > 79 characters)\n./src/icclim/generic/__init__.py:9:80: E501 line too long (84 > 79 characters)\n./src/icclim/generic/__init__.py:11:80: E501 line too long (83 > 79 characters)\n./src/icclim/generic/__init__.py:24:1: F401 'icclim._generated._generic.*' imported but unused\n./src/icclim/_generated/_dcsc.py:90:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:96:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:105:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:107:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:111:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:113:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:121:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:171:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:177:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:186:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:188:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:192:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:194:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:202:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:252:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:258:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:267:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:269:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:273:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:275:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:283:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:316:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:325:80: E501 line too long (97 > 79 characters)\n./src/icclim/_generated/_dcsc.py:327:80: E501 line too long (104 > 79 characters)\n./src/icclim/_generated/_dcsc.py:337:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:343:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:352:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:354:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:358:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:360:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:363:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:365:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:370:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:373:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:389:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:392:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:436:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:445:80: E501 line too long (97 > 79 characters)\n./src/icclim/_generated/_dcsc.py:447:80: E501 line too long (104 > 79 characters)\n./src/icclim/_generated/_dcsc.py:457:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:463:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:472:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:474:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:478:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:480:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:483:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:485:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:490:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:493:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:509:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:512:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:556:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:565:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_dcsc.py:567:80: E501 line too long (105 > 79 characters)\n./src/icclim/_generated/_dcsc.py:577:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:583:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:592:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:594:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:598:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:600:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:603:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:605:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:610:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:613:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:629:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:632:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:676:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:685:80: E501 line too long (97 > 79 characters)\n./src/icclim/_generated/_dcsc.py:687:80: E501 line too long (104 > 79 characters)\n./src/icclim/_generated/_dcsc.py:697:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:703:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:712:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:714:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:718:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:720:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:723:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:725:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:730:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:733:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:749:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:752:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:813:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:819:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:828:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:830:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:834:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:836:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:844:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:897:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:903:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:912:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:914:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:918:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:920:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:928:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:981:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:987:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:996:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:998:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1002:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1004:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1012:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1065:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1071:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1080:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1082:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1086:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1088:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1096:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1149:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1155:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1164:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1166:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1170:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1172:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1180:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1223:80: E501 line too long (101 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1225:80: E501 line too long (108 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1235:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1241:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1250:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1252:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1256:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1258:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1266:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1274:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1276:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1323:80: E501 line too long (102 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1325:80: E501 line too long (109 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1335:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1341:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1350:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1352:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1356:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1358:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1366:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1374:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1376:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1423:80: E501 line too long (101 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1425:80: E501 line too long (108 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1435:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1441:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1450:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1452:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1456:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1458:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1466:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1474:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1476:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1523:80: E501 line too long (116 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1525:80: E501 line too long (124 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1535:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1541:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1550:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1552:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1556:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1558:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1566:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1574:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1576:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1623:80: E501 line too long (118 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1625:80: E501 line too long (126 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1635:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1641:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1650:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1652:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1656:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1658:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1666:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1674:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1676:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1721:80: E501 line too long (121 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1723:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1733:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1739:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1748:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1750:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1754:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1756:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1764:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1805:80: E501 line too long (121 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1807:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1817:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1823:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1832:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1834:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1838:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1840:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1848:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1901:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1907:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1916:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1918:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1922:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1924:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1932:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1982:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1988:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1997:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:1999:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2003:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2005:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2013:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2066:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2072:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2081:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2083:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2087:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2089:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2097:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2147:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2153:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2162:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2164:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2168:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2170:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2178:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2231:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2237:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2246:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2248:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2252:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2254:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2262:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2315:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2321:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2330:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2332:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2336:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2338:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2346:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2387:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2389:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2399:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2405:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2414:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2416:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2420:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2422:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2430:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2466:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2487:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2493:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2502:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2504:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2508:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2510:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2513:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2515:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2520:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2523:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2539:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2542:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2587:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2608:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2614:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2623:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2625:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2629:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2631:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2634:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2636:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2641:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2644:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2660:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2663:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2708:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2729:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2735:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2744:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2746:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2750:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2752:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2755:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2757:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2762:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2765:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2781:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2784:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2829:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2850:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2856:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2865:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2867:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2871:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2873:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2876:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2878:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2883:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2886:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2902:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2905:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2950:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2956:80: E501 line too long (92 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2958:80: E501 line too long (99 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2968:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2974:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2983:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2985:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2989:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2991:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2994:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:2996:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3001:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3004:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3013:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3047:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3056:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3058:80: E501 line too long (87 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3068:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3074:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3083:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3085:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3089:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3091:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3094:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3096:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3101:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3104:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3120:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_dcsc.py:3123:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:72:80: E501 line too long (89 > 79 characters)\n./src/icclim/_generated/_generic.py:81:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:87:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:96:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:98:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:102:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:104:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:110:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:120:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:123:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:166:80: E501 line too long (102 > 79 characters)\n./src/icclim/_generated/_generic.py:168:80: E501 line too long (131 > 79 characters)\n./src/icclim/_generated/_generic.py:177:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:183:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:192:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:194:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:198:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:200:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:206:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:216:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:219:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:263:80: E501 line too long (162 > 79 characters)\n./src/icclim/_generated/_generic.py:265:80: E501 line too long (185 > 79 characters)\n./src/icclim/_generated/_generic.py:274:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:280:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:289:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:291:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:295:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:297:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:303:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:306:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:316:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:319:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:363:80: E501 line too long (143 > 79 characters)\n./src/icclim/_generated/_generic.py:365:80: E501 line too long (152 > 79 characters)\n./src/icclim/_generated/_generic.py:374:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:380:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:389:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:391:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:395:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:397:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:403:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:413:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:416:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:459:80: E501 line too long (147 > 79 characters)\n./src/icclim/_generated/_generic.py:461:80: E501 line too long (157 > 79 characters)\n./src/icclim/_generated/_generic.py:470:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:476:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:485:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:487:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:491:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:493:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:499:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:509:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:512:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:555:80: E501 line too long (108 > 79 characters)\n./src/icclim/_generated/_generic.py:557:80: E501 line too long (128 > 79 characters)\n./src/icclim/_generated/_generic.py:566:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:572:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:581:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:583:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:587:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:589:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:595:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:605:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:608:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:651:80: E501 line too long (86 > 79 characters)\n./src/icclim/_generated/_generic.py:653:80: E501 line too long (96 > 79 characters)\n./src/icclim/_generated/_generic.py:662:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:668:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:677:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:679:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:683:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:685:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:691:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:701:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:704:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:747:80: E501 line too long (86 > 79 characters)\n./src/icclim/_generated/_generic.py:749:80: E501 line too long (96 > 79 characters)\n./src/icclim/_generated/_generic.py:758:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:764:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:773:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:775:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:779:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:781:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:787:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:797:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:800:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:843:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:845:80: E501 line too long (94 > 79 characters)\n./src/icclim/_generated/_generic.py:854:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:860:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:869:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:871:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:875:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:877:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:883:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:893:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:896:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:939:80: E501 line too long (85 > 79 characters)\n./src/icclim/_generated/_generic.py:941:80: E501 line too long (91 > 79 characters)\n./src/icclim/_generated/_generic.py:950:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:956:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:965:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:967:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:971:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:973:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:979:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:989:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:992:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1035:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1037:80: E501 line too long (102 > 79 characters)\n./src/icclim/_generated/_generic.py:1046:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1052:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1061:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1063:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1067:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1069:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1075:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1085:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1088:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1132:80: E501 line too long (113 > 79 characters)\n./src/icclim/_generated/_generic.py:1134:80: E501 line too long (134 > 79 characters)\n./src/icclim/_generated/_generic.py:1143:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1149:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1158:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1160:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1164:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1166:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1172:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1176:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:1185:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1188:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1244:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1250:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1259:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1261:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1265:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1267:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1273:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1277:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:1286:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1289:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1345:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1351:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1360:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1362:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1366:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1368:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1374:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1378:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:1387:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1390:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1446:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1452:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1461:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1463:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1467:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1469:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1475:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1479:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:1488:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1491:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1535:80: E501 line too long (137 > 79 characters)\n./src/icclim/_generated/_generic.py:1537:80: E501 line too long (158 > 79 characters)\n./src/icclim/_generated/_generic.py:1546:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1552:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1561:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1563:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1567:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1569:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1575:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1585:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1588:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1631:80: E501 line too long (234 > 79 characters)\n./src/icclim/_generated/_generic.py:1633:80: E501 line too long (259 > 79 characters)\n./src/icclim/_generated/_generic.py:1642:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1648:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1657:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1659:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1663:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1665:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1671:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1681:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1684:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1727:80: E501 line too long (247 > 79 characters)\n./src/icclim/_generated/_generic.py:1729:80: E501 line too long (291 > 79 characters)\n./src/icclim/_generated/_generic.py:1738:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1744:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1753:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1755:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1759:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1761:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1767:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1777:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1780:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1793:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1824:80: E501 line too long (152 > 79 characters)\n./src/icclim/_generated/_generic.py:1826:80: E501 line too long (174 > 79 characters)\n./src/icclim/_generated/_generic.py:1835:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1841:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1850:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1852:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1856:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1858:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1864:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1874:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1877:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1885:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1940:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1946:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1955:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1957:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:1961:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:1963:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:1969:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_generic.py:1979:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:1982:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2018:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:2034:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:2044:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2050:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:2059:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:2061:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2065:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:2067:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_generic.py:2070:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_generic.py:2072:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2077:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_generic.py:2080:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2085:80: E501 line too long (85 > 79 characters)\n./src/icclim/_generated/_generic.py:2089:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2093:80: E501 line too long (98 > 79 characters)\n./src/icclim/_generated/_generic.py:2109:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_generic.py:2112:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_generic.py:2120:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:121:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:127:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:136:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:138:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:142:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:144:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:152:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:202:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:208:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:217:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:219:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:223:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:225:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:233:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:283:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:289:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:298:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:300:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:304:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:306:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:314:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:364:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:370:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:379:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:381:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:385:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:387:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:395:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:445:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:451:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:460:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:462:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:466:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:468:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:476:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:526:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:532:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:541:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:543:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:547:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:549:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:557:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:607:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:613:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:622:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:624:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:628:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:630:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:638:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:691:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:697:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:706:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:708:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:712:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:714:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:722:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:758:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:779:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:785:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:794:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:796:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:800:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:802:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:805:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:807:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:812:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:815:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:831:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:834:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:878:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:899:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:905:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:914:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:916:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:920:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:922:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:925:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:927:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:932:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:935:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:951:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:954:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:998:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1019:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1025:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1034:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1036:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1040:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1042:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1045:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:1047:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1052:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1055:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1071:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1074:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1118:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1139:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1145:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1154:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1156:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1160:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1162:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1165:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:1167:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1172:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1175:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1191:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1194:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1255:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1261:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1270:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1272:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1276:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1278:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1286:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1336:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1342:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1351:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1353:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1357:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1359:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1367:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1417:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1423:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1432:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1434:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1438:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1440:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1448:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1501:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1507:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1516:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1518:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1522:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1524:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1532:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1585:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1591:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1600:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1602:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1606:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1608:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1616:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1669:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1675:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1684:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1686:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1690:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1692:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1700:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1753:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1759:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1768:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1770:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1774:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1776:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1784:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1837:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1843:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1852:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1854:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1858:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1860:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1868:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1904:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1925:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1931:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1940:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1942:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1946:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1948:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:1951:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:1953:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1958:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:1961:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:1977:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:1980:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2024:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2045:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2051:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2060:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2062:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2066:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2068:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2071:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:2073:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2078:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2081:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2097:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2100:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2144:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2165:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2171:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2180:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2182:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2186:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2188:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2191:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:2193:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2198:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2201:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2217:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2220:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2281:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2287:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2296:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2298:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2302:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2304:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2312:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2362:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2368:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2377:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2379:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2383:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2385:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2393:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2426:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2447:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2453:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2462:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2464:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2468:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2470:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2473:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:2475:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2480:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2483:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2499:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2502:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2563:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2569:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2578:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2580:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2584:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2586:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2594:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2647:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2653:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2662:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2664:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2668:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2670:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2678:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2731:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2737:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2746:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2748:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2752:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2754:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2762:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2815:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2821:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2830:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2832:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2836:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2838:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2846:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2899:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2905:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2914:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2916:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2920:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:2922:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:2930:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2983:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:2989:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:2998:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3000:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3004:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3006:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3014:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3064:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3070:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3079:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3081:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3085:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3087:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3095:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3148:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3154:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3163:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3165:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3169:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3171:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3179:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3232:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3238:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3247:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3249:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3253:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3255:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3263:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3313:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3319:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3328:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3330:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3334:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3336:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3344:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3377:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3388:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3398:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3404:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3413:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3415:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3419:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3421:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3424:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3426:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3431:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3434:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3450:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3453:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3498:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3509:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_ecad.py:3519:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3525:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3534:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3536:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3540:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3542:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3545:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3547:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3552:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3555:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3571:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3574:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3619:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3630:80: E501 line too long (81 > 79 characters)\n./src/icclim/_generated/_ecad.py:3640:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3646:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3655:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3657:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3661:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3663:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3666:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3668:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3673:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3676:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3692:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3695:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3740:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3761:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3767:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3776:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3778:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3782:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3784:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3787:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3789:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3794:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3797:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3813:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3816:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3861:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3882:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3888:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3897:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3899:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3903:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3905:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:3908:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:3910:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3915:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:3918:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3934:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3937:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:3982:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:3993:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4003:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4009:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4018:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4020:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4024:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4026:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4029:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4031:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4036:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4039:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4055:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4058:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4120:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4126:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4135:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4137:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4141:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4143:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4151:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4201:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4207:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4216:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4218:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4222:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4224:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4232:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4285:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4291:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4300:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4302:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4306:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4308:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4316:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4369:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4375:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4384:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4386:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4390:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4392:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4400:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4436:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4445:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_ecad.py:4447:80: E501 line too long (132 > 79 characters)\n./src/icclim/_generated/_ecad.py:4457:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4463:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4472:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4474:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4478:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4480:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4483:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4485:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4490:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4493:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4509:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4512:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4566:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4575:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_ecad.py:4577:80: E501 line too long (132 > 79 characters)\n./src/icclim/_generated/_ecad.py:4587:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4593:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4602:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4604:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4608:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4610:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4613:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4615:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4620:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4623:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4639:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4642:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4696:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4705:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_ecad.py:4707:80: E501 line too long (132 > 79 characters)\n./src/icclim/_generated/_ecad.py:4717:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4723:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4732:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4734:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4738:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4740:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4743:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4745:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4750:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4753:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4769:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4772:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4826:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4835:80: E501 line too long (127 > 79 characters)\n./src/icclim/_generated/_ecad.py:4837:80: E501 line too long (132 > 79 characters)\n./src/icclim/_generated/_ecad.py:4847:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4853:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4862:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4864:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4868:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4870:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:4873:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:4875:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4880:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4883:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4899:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4902:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4973:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4979:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:4988:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4990:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:4994:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:4996:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5004:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5054:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5060:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5069:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5071:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5075:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5077:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5085:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5138:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5144:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5153:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5155:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5159:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5161:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5169:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5222:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5228:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5237:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5239:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5243:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5245:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5253:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5303:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5309:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5318:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5320:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5324:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5326:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5334:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5387:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5393:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5402:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5404:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5408:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5410:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5418:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5471:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5477:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5486:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5488:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5492:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5494:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5502:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5555:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5561:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5570:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5572:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5576:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5578:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5586:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5639:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5645:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5654:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5656:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5660:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5662:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5670:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5703:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5721:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5727:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5736:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5738:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5742:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5744:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5747:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:5749:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5754:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5757:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5766:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5800:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5818:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5824:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5833:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5835:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5839:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5841:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5844:80: E501 line too long (90 > 79 characters)\n./src/icclim/_generated/_ecad.py:5846:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5851:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5854:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5863:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5914:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5920:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:5929:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5931:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5935:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:5937:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:5945:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:5995:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6001:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:6010:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:6012:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6016:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:6018:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:6026:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6076:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6082:80: E501 line too long (80 > 79 characters)\n./src/icclim/_generated/_ecad.py:6091:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:6093:80: E501 line too long (83 > 79 characters)\n./src/icclim/_generated/_ecad.py:6097:80: E501 line too long (84 > 79 characters)\n./src/icclim/_generated/_ecad.py:6099:80: E501 line too long (82 > 79 characters)\n./src/icclim/_generated/_ecad.py:6107:80: E501 line too long (83 > 79 characters)\n./src/icclim/threshold/__init__.py:4:80: E501 line too long (88 > 79 characters)\n./src/icclim/threshold/factory.py:60:80: E501 line too long (85 > 79 characters)\n./src/icclim/threshold/factory.py:61:80: E501 line too long (81 > 79 characters)\n./src/icclim/threshold/factory.py:70:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:77:80: E501 line too long (81 > 79 characters)\n./src/icclim/threshold/factory.py:79:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:81:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:86:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:87:80: E501 line too long (88 > 79 characters)\n./src/icclim/threshold/factory.py:89:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:95:80: E501 line too long (85 > 79 characters)\n./src/icclim/threshold/factory.py:96:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:98:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:100:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:102:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:106:80: E501 line too long (84 > 79 characters)\n./src/icclim/threshold/factory.py:107:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:112:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:113:80: E501 line too long (85 > 79 characters)\n./src/icclim/threshold/factory.py:135:80: E501 line too long (83 > 79 characters)\n./src/icclim/threshold/factory.py:318:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:340:80: E501 line too long (81 > 79 characters)\n./src/icclim/threshold/factory.py:352:45: E203 whitespace before ':'\n./src/icclim/threshold/factory.py:378:80: E501 line too long (87 > 79 characters)\n./src/icclim/threshold/factory.py:392:80: E501 line too long (86 > 79 characters)\n./src/icclim/threshold/factory.py:408:80: E501 line too long (82 > 79 characters)\n./src/icclim/threshold/factory.py:411:80: E501 line too long (80 > 79 characters)\n./src/icclim/threshold/factory.py:420:80: E501 line too long (88 > 79 characters)\n./src/icclim/threshold/factory.py:430:80: E501 line too long (82 > 79 characters)\n./src/icclim/threshold/factory.py:431:80: E501 line too long (84 > 79 characters)\n./doc/source/conf.py:18:1: E402 module level import not at top of file\n./doc/source/conf.py:33:80: E501 line too long (86 > 79 characters)"
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                }
            },
            "coverage": {
                "percentage": 0,
                "total_subcriteria": 1,
                "success_subcriteria": 0
            }
        },
        "QC.Uni": {
            "valid": false,
            "subcriteria": {
                "QC.Uni01": {
                    "description": "Are the tests passing through an automated means?",
                    "requirement_level": "MUST",
                    "hint": "Please check & solve the failing test cases found by the {tool_name} tool",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "Test cases are not passing using None testing framework",
                            "plugin": {
                                "name": "report2sqaaas-plugin-jenkins_exit_status",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "pytest",
                                "lang": "Python",
                                "version": "7.1.3",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-pytest:7.1.3-alpha",
                                    "reviewed": "2023-08-09"
                                },
                                "ci": {
                                    "name": "QC.Uni github.com/cerfacs-globc/icclim pytest",
                                    "status": "FAILED",
                                    "stdout_command": [
                                        "pytest  --json-report  --json-report-indent 4"
                                    ],
                                    "stdout_text": "============================= test session starts ==============================\nplatform linux -- Python 3.9.17, pytest-7.1.3, pluggy-1.2.0\nrootdir: /sqaaas-build/github.com/cerfacs-globc/icclim\nplugins: json-report-1.5.0, metadata-3.0.0\ncollected 0 items / 12 errors\n\n==================================== ERRORS ====================================\n__________________ ERROR collecting tests/test_cf_calendar.py __________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_cf_calendar.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_cf_calendar.py:3: in <module>\n    import numpy as np\nE   ModuleNotFoundError: No module named 'numpy'\n_____________________ ERROR collecting tests/test_dcsc.py ______________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_dcsc.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_dcsc.py:1: in <module>\n    from icclim.dcsc import txnd\nE   ModuleNotFoundError: No module named 'icclim'\n_________________ ERROR collecting tests/test_ecad_indices.py __________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_ecad_indices.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_ecad_indices.py:4: in <module>\n    from icclim._core.model.standard_index import StandardIndex\nE   ModuleNotFoundError: No module named 'icclim'\n___________________ ERROR collecting tests/test_frequency.py ___________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_frequency.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_frequency.py:3: in <module>\n    import cftime\nE   ModuleNotFoundError: No module named 'cftime'\n_________________ ERROR collecting tests/test_generated_api.py _________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_generated_api.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_generated_api.py:7: in <module>\n    import icclim\nE   ModuleNotFoundError: No module named 'icclim'\n_______________ ERROR collecting tests/test_generic_functions.py _______________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_generic_functions.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_generic_functions.py:1: in <module>\n    from icclim._core.climate_variable import ClimateVariable\nE   ModuleNotFoundError: No module named 'icclim'\n__________________ ERROR collecting tests/test_index_group.py __________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_index_group.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_index_group.py:4: in <module>\n    from icclim._core.model.index_group import IndexGroupRegistry\nE   ModuleNotFoundError: No module named 'icclim'\n_________________ ERROR collecting tests/test_input_parsing.py _________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_input_parsing.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_input_parsing.py:7: in <module>\n    import numpy as np\nE   ModuleNotFoundError: No module named 'numpy'\n_____________________ ERROR collecting tests/test_main.py ______________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_main.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_main.py:8: in <module>\n    import cftime\nE   ModuleNotFoundError: No module named 'cftime'\n____________________ ERROR collecting tests/test_rechunk.py ____________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_rechunk.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_rechunk.py:5: in <module>\n    import numpy as np\nE   ModuleNotFoundError: No module named 'numpy'\n___________________ ERROR collecting tests/test_threshold.py ___________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_threshold.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_threshold.py:7: in <module>\n    import numpy as np\nE   ModuleNotFoundError: No module named 'numpy'\n__________________ ERROR collecting tests/test_user_index.py ___________________\nImportError while importing test module '/sqaaas-build/github.com/cerfacs-globc/icclim/tests/test_user_index.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_user_index.py:3: in <module>\n    import icclim\nE   ModuleNotFoundError: No module named 'icclim'\n--------------------------------- JSON report ----------------------------------\nreport saved to: .report.json\n=========================== short test summary info ============================\nERROR tests/test_cf_calendar.py\nERROR tests/test_dcsc.py\nERROR tests/test_ecad_indices.py\nERROR tests/test_frequency.py\nERROR tests/test_generated_api.py\nERROR tests/test_generic_functions.py\nERROR tests/test_index_group.py\nERROR tests/test_input_parsing.py\nERROR tests/test_main.py\nERROR tests/test_rechunk.py\nERROR tests/test_threshold.py\nERROR tests/test_user_index.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 12 errors during collection !!!!!!!!!!!!!!!!!!!\n============================== 12 errors in 0.78s ==============================",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/106/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {}
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                }
            },
            "coverage": {
                "percentage": 0,
                "total_subcriteria": 1,
                "success_subcriteria": 0
            }
        },
        "QC.Ver": {
            "valid": true,
            "subcriteria": {
                "QC.Ver01.0": {
                    "description": "Are tags being used for releasing software",
                    "requirement_level": "MUST",
                    "hint": "Git tags are a convenient way to release software. This subcriterion checks if any git tag is present in the code history. More info on it-scm.com/book/en/v2/Git-Basics-Tagging\" target=\"_blank\">git tagging</a>",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "The code repository uses tags for releasing new software versions",
                            "plugin": {
                                "name": "report2sqaaas-plugin-is_semver",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "get_git_tags.py",
                                "lang": "Semantic Versioning",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Ver/Dockerfile",
                                    "reviewed": "2022-05-10"
                                },
                                "ci": {
                                    "name": "QC.Ver github.com/cerfacs-globc/icclim get_git_tags.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "get_git_tags.py"
                                    ],
                                    "stdout_text": "['v7.0.0', 'v6.5.0', 'v6.4.0', 'v6.3.0', '6.2.0', 'v6.1.5', 'v6.1.3', 'v6.1.2', 'v6.0.0', 'v5.4.0', 'v5.3.0', '5.2.2', '5.2.1', 'v5.1.0', 'v5.0.0', '5.0.0rc1', '4.2.20', '4.2.19', '4.2.18', '4.2.17', '4.2.16', '4.2.15', '4.2.14', '4.2.13', '4.2.12', '4.2.11', '4.2.10', '4.2.9', '4.2.8', '4.3.0-beta.2', '4.3.0-beta.1', '4.2.7', '4.2.6', '4.2.5', '4.2.4', '4.2.3', '4.2.2', '4.2.1', '4.2.0', '4.1.2', '4.1.1', 'v4.1.0', 'v4.0.3', 'v4.0.2', 'v4.0.1', 'V4.0.0', 'v3.1.0']",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/115/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": [
                                "v7.0.0",
                                "v6.5.0",
                                "v6.4.0",
                                "v6.3.0",
                                "6.2.0",
                                "v6.1.5",
                                "v6.1.3",
                                "v6.1.2",
                                "v6.0.0",
                                "v5.4.0",
                                "v5.3.0",
                                "5.2.2",
                                "5.2.1",
                                "v5.1.0",
                                "v5.0.0",
                                "5.0.0rc1",
                                "4.2.20",
                                "4.2.19",
                                "4.2.18",
                                "4.2.17",
                                "4.2.16",
                                "4.2.15",
                                "4.2.14",
                                "4.2.13",
                                "4.2.12",
                                "4.2.11",
                                "4.2.10",
                                "4.2.9",
                                "4.2.8",
                                "4.3.0-beta.2",
                                "4.3.0-beta.1",
                                "4.2.7",
                                "4.2.6",
                                "4.2.5",
                                "4.2.4",
                                "4.2.3",
                                "4.2.2",
                                "4.2.1",
                                "4.2.0",
                                "4.1.2",
                                "4.1.1",
                                "v4.1.0",
                                "v4.0.3",
                                "v4.0.2",
                                "v4.0.1",
                                "V4.0.0",
                                "v3.1.0"
                            ]
                        }
                    ],
                    "valid": true
                },
                "QC.Ver01": {
                    "description": "Is the latest release compliant with Semantic Versioning (SemVer) specification?",
                    "requirement_level": "SHOULD",
                    "hint": "Latest tag must be compliant with <a href=\"https://semver.org\" target=\"_blank\">SemVer specification</a>",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "Latest release tag v7.0.0 found, but is not SemVer compliant",
                            "plugin": {
                                "name": "report2sqaaas-plugin-is_semver",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "get_git_tags.py",
                                "lang": "Semantic Versioning",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Ver/Dockerfile",
                                    "reviewed": "2022-05-10"
                                },
                                "ci": {
                                    "name": "QC.Ver github.com/cerfacs-globc/icclim get_git_tags.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "get_git_tags.py"
                                    ],
                                    "stdout_text": "['v7.0.0', 'v6.5.0', 'v6.4.0', 'v6.3.0', '6.2.0', 'v6.1.5', 'v6.1.3', 'v6.1.2', 'v6.0.0', 'v5.4.0', 'v5.3.0', '5.2.2', '5.2.1', 'v5.1.0', 'v5.0.0', '5.0.0rc1', '4.2.20', '4.2.19', '4.2.18', '4.2.17', '4.2.16', '4.2.15', '4.2.14', '4.2.13', '4.2.12', '4.2.11', '4.2.10', '4.2.9', '4.2.8', '4.3.0-beta.2', '4.3.0-beta.1', '4.2.7', '4.2.6', '4.2.5', '4.2.4', '4.2.3', '4.2.2', '4.2.1', '4.2.0', '4.1.2', '4.1.1', 'v4.1.0', 'v4.0.3', 'v4.0.2', 'v4.0.1', 'V4.0.0', 'v3.1.0']",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/115/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": [
                                "v7.0.0",
                                "v6.5.0",
                                "v6.4.0",
                                "v6.3.0",
                                "6.2.0",
                                "v6.1.5",
                                "v6.1.3",
                                "v6.1.2",
                                "v6.0.0",
                                "v5.4.0",
                                "v5.3.0",
                                "5.2.2",
                                "5.2.1",
                                "v5.1.0",
                                "v5.0.0",
                                "5.0.0rc1",
                                "4.2.20",
                                "4.2.19",
                                "4.2.18",
                                "4.2.17",
                                "4.2.16",
                                "4.2.15",
                                "4.2.14",
                                "4.2.13",
                                "4.2.12",
                                "4.2.11",
                                "4.2.10",
                                "4.2.9",
                                "4.2.8",
                                "4.3.0-beta.2",
                                "4.3.0-beta.1",
                                "4.2.7",
                                "4.2.6",
                                "4.2.5",
                                "4.2.4",
                                "4.2.3",
                                "4.2.2",
                                "4.2.1",
                                "4.2.0",
                                "4.1.2",
                                "4.1.1",
                                "v4.1.0",
                                "v4.0.3",
                                "v4.0.2",
                                "v4.0.1",
                                "V4.0.0",
                                "v3.1.0"
                            ]
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                },
                "QC.Ver02": {
                    "description": "Are all release tags with Semantic Versioning (SemVer) specification?",
                    "requirement_level": "SHOULD",
                    "hint": "Existent release tags shall be <a href=\"https://semver.org\" target=\"_blank\">SemVer</a> compliant for this subcriterion to be successful",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "Not all release tags are SemVer compliant",
                            "plugin": {
                                "name": "report2sqaaas-plugin-is_semver",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "get_git_tags.py",
                                "lang": "Semantic Versioning",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Ver/Dockerfile",
                                    "reviewed": "2022-05-10"
                                },
                                "ci": {
                                    "name": "QC.Ver github.com/cerfacs-globc/icclim get_git_tags.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "get_git_tags.py"
                                    ],
                                    "stdout_text": "['v7.0.0', 'v6.5.0', 'v6.4.0', 'v6.3.0', '6.2.0', 'v6.1.5', 'v6.1.3', 'v6.1.2', 'v6.0.0', 'v5.4.0', 'v5.3.0', '5.2.2', '5.2.1', 'v5.1.0', 'v5.0.0', '5.0.0rc1', '4.2.20', '4.2.19', '4.2.18', '4.2.17', '4.2.16', '4.2.15', '4.2.14', '4.2.13', '4.2.12', '4.2.11', '4.2.10', '4.2.9', '4.2.8', '4.3.0-beta.2', '4.3.0-beta.1', '4.2.7', '4.2.6', '4.2.5', '4.2.4', '4.2.3', '4.2.2', '4.2.1', '4.2.0', '4.1.2', '4.1.1', 'v4.1.0', 'v4.0.3', 'v4.0.2', 'v4.0.1', 'V4.0.0', 'v3.1.0']",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/icclim.assess.sqaaas/job/master/4/execution/node/115/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/icclim.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": [
                                "v7.0.0",
                                "v6.5.0",
                                "v6.4.0",
                                "v6.3.0",
                                "6.2.0",
                                "v6.1.5",
                                "v6.1.3",
                                "v6.1.2",
                                "v6.0.0",
                                "v5.4.0",
                                "v5.3.0",
                                "5.2.2",
                                "5.2.1",
                                "v5.1.0",
                                "v5.0.0",
                                "5.0.0rc1",
                                "4.2.20",
                                "4.2.19",
                                "4.2.18",
                                "4.2.17",
                                "4.2.16",
                                "4.2.15",
                                "4.2.14",
                                "4.2.13",
                                "4.2.12",
                                "4.2.11",
                                "4.2.10",
                                "4.2.9",
                                "4.2.8",
                                "4.3.0-beta.2",
                                "4.3.0-beta.1",
                                "4.2.7",
                                "4.2.6",
                                "4.2.5",
                                "4.2.4",
                                "4.2.3",
                                "4.2.2",
                                "4.2.1",
                                "4.2.0",
                                "4.1.2",
                                "4.1.1",
                                "v4.1.0",
                                "v4.0.3",
                                "v4.0.2",
                                "v4.0.1",
                                "V4.0.0",
                                "v3.1.0"
                            ]
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                }
            },
            "coverage": {
                "percentage": 33,
                "total_subcriteria": 3,
                "success_subcriteria": 1
            }
        },
        "QC.Met": {
            "valid": false,
            "subcriteria": {
                "QC.Met01": {
                    "description": "Is the software citable?",
                    "valid": false,
                    "hint": "The two formats for software citation supported by SQAaaS are: 1) <a href=\"https://codemeta.github.io/\" target=\"_blank\">CodeMeta</a> and 2) <a href=\"https://citation-file-format.github.io/\" target=\"_blank\">Citation File Format (CFF)</a>. While CodeMeta provides you with a more comprehensive description, CFF is a more lightweight, good-enough approach to software (with built-in support by GitHub) citation. Both provide tools (<a href=\"https://codemeta.github.io/codemeta-generator/\" target=\"_blank\">CodeMeta generator</a>, <a href=\"https://citation-file-format.github.io/cff-initializer-javascript/#/\" target=\"_blank\">CFFINIT</a>)to easily generate a working citation file. Once having the file, be sure to add it to the root path of your code repo.",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "No matching files found for language <CodeMeta> in repository searching by extensions or filenames\nNo matching files found for language <Citation File Format> in repository searching by extensions or filenames"
                        }
                    ],
                    "required_for_next_level_badge": false
                }
            },
            "coverage": {
                "percentage": 0,
                "total_subcriteria": 1,
                "success_subcriteria": 0
            }
        }
    },
    "badge": {
        "software": {
            "criteria": {
                "bronze": {
                    "to_fulfill": [
                        "QC.Doc",
                        "QC.Acc",
                        "QC.Lic"
                    ],
                    "missing": [
                        "QC.Doc"
                    ],
                    "fulfilled": [
                        "QC.Acc",
                        "QC.Lic"
                    ]
                },
                "silver": {
                    "to_fulfill": [
                        "QC.Doc",
                        "QC.Ver",
                        "QC.Acc",
                        "QC.Lic",
                        "QC.Met"
                    ],
                    "missing": [
                        "QC.Doc",
                        "QC.Met"
                    ],
                    "fulfilled": [
                        "QC.Ver",
                        "QC.Acc",
                        "QC.Lic"
                    ]
                },
                "gold": {
                    "to_fulfill": [
                        "QC.Doc",
                        "QC.Sec",
                        "QC.Uni",
                        "QC.Sty",
                        "QC.Ver",
                        "QC.Acc",
                        "QC.Lic",
                        "QC.Met"
                    ],
                    "missing": [
                        "QC.Doc",
                        "QC.Uni",
                        "QC.Sty",
                        "QC.Met"
                    ],
                    "fulfilled": [
                        "QC.Ver",
                        "QC.Sec",
                        "QC.Acc",
                        "QC.Lic"
                    ]
                }
            },
            "data": {}
        }
    }
}